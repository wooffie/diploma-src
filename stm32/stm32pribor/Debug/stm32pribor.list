
stm32pribor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c04  08010e28  08010e28  00020e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a2c  08012a2c  00030200  2**0
                  CONTENTS
  4 .ARM          00000000  08012a2c  08012a2c  00030200  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012a2c  08012a2c  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a2c  08012a2c  00022a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a30  08012a30  00022a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08012a34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed4  20000200  08012c34  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010d4  08012c34  000310d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc60  00000000  00000000  00030229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042cd  00000000  00000000  0004ce89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  00051158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a08  00000000  00000000  00052d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdcf  00000000  00000000  00054720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f37  00000000  00000000  000704ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098c50  00000000  00000000  00094426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d076  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000895c  00000000  00000000  0012d0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	08010e0c 	.word	0x08010e0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	08010e0c 	.word	0x08010e0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_ADC1_Init+0x90>)
 800119a:	4a20      	ldr	r2, [pc, #128]	; (800121c <MX_ADC1_Init+0x94>)
 800119c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_ADC1_Init+0x90>)
 80011a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_ADC1_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_ADC1_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_ADC1_Init+0x90>)
 80011b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_ADC1_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_ADC1_Init+0x90>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <MX_ADC1_Init+0x90>)
 80011c8:	f004 f9ea 	bl	80055a0 <HAL_ADC_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011d2:	f003 fadf 	bl	8004794 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011da:	2301      	movs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_ADC1_Init+0x90>)
 80011e8:	f004 fb44 	bl	8005874 <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011f2:	f003 facf 	bl	8004794 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_ADC1_Init+0x90>)
 8001200:	f004 fb38 	bl	8005874 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800120a:	f003 fac3 	bl	8004794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000021c 	.word	0x2000021c
 800121c:	40012400 	.word	0x40012400

08001220 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <HAL_ADC_MspInit+0x6c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d121      	bne.n	8001284 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_ADC_MspInit+0x70>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <HAL_ADC_MspInit+0x70>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_ADC_MspInit+0x70>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_ADC_MspInit+0x70>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <HAL_ADC_MspInit+0x70>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_ADC_MspInit+0x70>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = V_CHECK_Pin;
 8001270:	2304      	movs	r3, #4
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001274:	2303      	movs	r3, #3
 8001276:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_ADC_MspInit+0x74>)
 8001280:	f005 f998 	bl	80065b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40012400 	.word	0x40012400
 8001290:	40021000 	.word	0x40021000
 8001294:	40010800 	.word	0x40010800

08001298 <AFE_WRITE>:
 * This function writes the provided data to the specified register address of the AFE (Analog Front-End) device.
 *
 * @param reg_address The address of the register to write to.
 * @param data The data to be written to the register.
 */
void AFE_WRITE(uint8_t reg_address, unsigned long data) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
	uint8_t pData[] = { reg_address, data >> 16, data >> 8, data };
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	733b      	strb	r3, [r7, #12]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	737b      	strb	r3, [r7, #13]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	73bb      	strb	r3, [r7, #14]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]
	AFE_SPI_EN();
 80012be:	2200      	movs	r2, #0
 80012c0:	2110      	movs	r1, #16
 80012c2:	4813      	ldr	r0, [pc, #76]	; (8001310 <AFE_WRITE+0x78>)
 80012c4:	f005 fc0a 	bl	8006adc <HAL_GPIO_WritePin>

	while (HAL_SPI_GetState(afe_spi) != HAL_SPI_STATE_READY)
 80012c8:	bf00      	nop
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <AFE_WRITE+0x7c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f009 fef7 	bl	800b0c2 <HAL_SPI_GetState>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d1f7      	bne.n	80012ca <AFE_WRITE+0x32>
		;
	HAL_SPI_Transmit_DMA(afe_spi, (uint8_t*) pData, 4);
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <AFE_WRITE+0x7c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f107 010c 	add.w	r1, r7, #12
 80012e2:	2204      	movs	r2, #4
 80012e4:	4618      	mov	r0, r3
 80012e6:	f009 fafb 	bl	800a8e0 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(afe_spi) != HAL_SPI_STATE_READY)
 80012ea:	bf00      	nop
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <AFE_WRITE+0x7c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f009 fee6 	bl	800b0c2 <HAL_SPI_GetState>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d1f7      	bne.n	80012ec <AFE_WRITE+0x54>
		// wait before off ENABLE
		;

	AFE_SPI_DIS();
 80012fc:	2201      	movs	r2, #1
 80012fe:	2110      	movs	r1, #16
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <AFE_WRITE+0x78>)
 8001302:	f005 fbeb 	bl	8006adc <HAL_GPIO_WritePin>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40010800 	.word	0x40010800
 8001314:	2000024c 	.word	0x2000024c

08001318 <AFE_INIT>:
 * This function initializes the AFE module by configuring the SPI interface and performing
 * the necessary initialization steps for proper operation.
 *
 * @param hspi Pointer to the SPI handle structure.
 */
void AFE_INIT(SPI_HandleTypeDef *hspi) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	afe_spi = hspi;
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <AFE_INIT+0x6c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(AFE_SPI_EN_GPIO_Port, AFE_SPI_EN_Pin, GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	2110      	movs	r1, #16
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <AFE_INIT+0x70>)
 800132c:	f005 fbd6 	bl	8006adc <HAL_GPIO_WritePin>

	// RESET INIT
	HAL_Delay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f004 f911 	bl	8005558 <HAL_Delay>
	HAL_GPIO_WritePin(AFE_RESETZ_GPIO_Port, AFE_RESETZ_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2108      	movs	r1, #8
 800133a:	4813      	ldr	r0, [pc, #76]	; (8001388 <AFE_INIT+0x70>)
 800133c:	f005 fbce 	bl	8006adc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f004 f909 	bl	8005558 <HAL_Delay>
	HAL_GPIO_WritePin(AFE_RESETZ_GPIO_Port, AFE_RESETZ_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2108      	movs	r1, #8
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <AFE_INIT+0x70>)
 800134c:	f005 fbc6 	bl	8006adc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001350:	2001      	movs	r0, #1
 8001352:	f004 f901 	bl	8005558 <HAL_Delay>
	HAL_GPIO_WritePin(AFE_RESETZ_GPIO_Port, AFE_RESETZ_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2108      	movs	r1, #8
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <AFE_INIT+0x70>)
 800135c:	f005 fbbe 	bl	8006adc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001360:	2001      	movs	r0, #1
 8001362:	f004 f8f9 	bl	8005558 <HAL_Delay>
	HAL_GPIO_WritePin(AFE_RESETZ_GPIO_Port, AFE_RESETZ_Pin, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2108      	movs	r1, #8
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <AFE_INIT+0x70>)
 800136c:	f005 fbb6 	bl	8006adc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f004 f8f1 	bl	8005558 <HAL_Delay>

	AFE_REG_INIT();
 8001376:	f000 f809 	bl	800138c <AFE_REG_INIT>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000024c 	.word	0x2000024c
 8001388:	40010800 	.word	0x40010800

0800138c <AFE_REG_INIT>:
 *
 * This function initializes the AFE register settings by writing the appropriate values to
 * the AFE registers. It configures various parameters such as FIFO, window size, phases,
 * and LED settings.
 */
void AFE_REG_INIT() {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	// FIFO_EN = 1
	AFE_WRITE(0x00, 0x000040);
 8001390:	2140      	movs	r1, #64	; 0x40
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff ff80 	bl	8001298 <AFE_WRITE>
	// WM_FIFO = 99 (100 for RDY), ADC_RDY -> FIFO_RDY
	AFE_WRITE(0x42, (99 << 6) | (0x02 << 4));
 8001398:	f44f 51c7 	mov.w	r1, #6368	; 0x18e0
 800139c:	2042      	movs	r0, #66	; 0x42
 800139e:	f7ff ff7b 	bl	8001298 <AFE_WRITE>
	// FIFO_EN = 0, TM_COUNT_RST = 1
	AFE_WRITE(0x00, 0x000002);
 80013a2:	2102      	movs	r1, #2
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff ff77 	bl	8001298 <AFE_WRITE>
	// PRPCT = 10, for init
	AFE_WRITE(0x1D, 0x00000A);
 80013aa:	210a      	movs	r1, #10
 80013ac:	201d      	movs	r0, #29
 80013ae:	f7ff ff73 	bl	8001298 <AFE_WRITE>
	// TM_COUT_RST = 0;
	AFE_WRITE(0x00, 0x000000);
 80013b2:	2100      	movs	r1, #0
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ff6f 	bl	8001298 <AFE_WRITE>
	// 1 ms delay
	HAL_Delay(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f004 f8cc 	bl	8005558 <HAL_Delay>
	// TM_COUNT_RST = 1
	AFE_WRITE(0x00, 0x000002);
 80013c0:	2102      	movs	r1, #2
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff ff68 	bl	8001298 <AFE_WRITE>

	// // CLK = 25 Hz , 5120 ticks on 128 kHz
	AFE_WRITE(0x1D, 0x1400);
 80013c8:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80013cc:	201d      	movs	r0, #29
 80013ce:	f7ff ff63 	bl	8001298 <AFE_WRITE>
	// Filter 2.5 kHz
	// AFE_WRITE(0x78, 0b0101);

	// 12 phases A B C D E F
	AFE_WRITE(0x88, 0x00000B);
 80013d2:	210b      	movs	r1, #11
 80013d4:	2088      	movs	r0, #136	; 0x88
 80013d6:	f7ff ff5f 	bl	8001298 <AFE_WRITE>

	// T WINDOW MIN = 16 ticks / 112 us
	AFE_WRITE(0x8C, 0x10);
 80013da:	2110      	movs	r1, #16
 80013dc:	208c      	movs	r0, #140	; 0x8c
 80013de:	f7ff ff5b 	bl	8001298 <AFE_WRITE>


	// PHASE 1
	// RED ON
	AFE_WRITE(0xB8, 0x010004);
 80013e2:	4956      	ldr	r1, [pc, #344]	; (800153c <AFE_REG_INIT+0x1b0>)
 80013e4:	20b8      	movs	r0, #184	; 0xb8
 80013e6:	f7ff ff57 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xB9, (0x3 << 10) | (0x3 << 4) | 0x4);
 80013ea:	f640 4134 	movw	r1, #3124	; 0xc34
 80013ee:	20b9      	movs	r0, #185	; 0xb9
 80013f0:	f7ff ff52 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xBA, 0xC);
 80013f4:	210c      	movs	r1, #12
 80013f6:	20ba      	movs	r0, #186	; 0xba
 80013f8:	f7ff ff4e 	bl	8001298 <AFE_WRITE>

	// 2 - masked
	AFE_WRITE(0xBB, 0x010000);
 80013fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001400:	20bb      	movs	r0, #187	; 0xbb
 8001402:	f7ff ff49 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xBC, (0x1 << 10) | (0x2 << 4) | 0x4);
 8001406:	f240 4124 	movw	r1, #1060	; 0x424
 800140a:	20bc      	movs	r0, #188	; 0xbc
 800140c:	f7ff ff44 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xBD, (0x1 << 17) | 0xC);
 8001410:	494b      	ldr	r1, [pc, #300]	; (8001540 <AFE_REG_INIT+0x1b4>)
 8001412:	20bd      	movs	r0, #189	; 0xbd
 8001414:	f7ff ff40 	bl	8001298 <AFE_WRITE>

	// 3 - masked
	AFE_WRITE(0xBE, 0x010000);
 8001418:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800141c:	20be      	movs	r0, #190	; 0xbe
 800141e:	f7ff ff3b 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xBF, (0x1 << 10) | (0x2 << 4) | 0x4);
 8001422:	f240 4124 	movw	r1, #1060	; 0x424
 8001426:	20bf      	movs	r0, #191	; 0xbf
 8001428:	f7ff ff36 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xC0, (0x1 << 17) | 0xC);
 800142c:	4944      	ldr	r1, [pc, #272]	; (8001540 <AFE_REG_INIT+0x1b4>)
 800142e:	20c0      	movs	r0, #192	; 0xc0
 8001430:	f7ff ff32 	bl	8001298 <AFE_WRITE>

	// 4 - masked
	AFE_WRITE(0xC1, 0x010000);
 8001434:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001438:	20c1      	movs	r0, #193	; 0xc1
 800143a:	f7ff ff2d 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xC2, (0x1 << 10) | (0x2 << 4) | 0x4);
 800143e:	f240 4124 	movw	r1, #1060	; 0x424
 8001442:	20c2      	movs	r0, #194	; 0xc2
 8001444:	f7ff ff28 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xC3, (0x1 << 17) | 0xC);
 8001448:	493d      	ldr	r1, [pc, #244]	; (8001540 <AFE_REG_INIT+0x1b4>)
 800144a:	20c3      	movs	r0, #195	; 0xc3
 800144c:	f7ff ff24 	bl	8001298 <AFE_WRITE>

	// 5
	// IR ON
	AFE_WRITE(0xC4, 0x010008);
 8001450:	493c      	ldr	r1, [pc, #240]	; (8001544 <AFE_REG_INIT+0x1b8>)
 8001452:	20c4      	movs	r0, #196	; 0xc4
 8001454:	f7ff ff20 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xC5, (0x3 << 10) | (0x3 << 4) | 0x4);
 8001458:	f640 4134 	movw	r1, #3124	; 0xc34
 800145c:	20c5      	movs	r0, #197	; 0xc5
 800145e:	f7ff ff1b 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xC6, 0xC);
 8001462:	210c      	movs	r1, #12
 8001464:	20c6      	movs	r0, #198	; 0xc6
 8001466:	f7ff ff17 	bl	8001298 <AFE_WRITE>

	// 6 - masked
	AFE_WRITE(0xC7, 0x010000);
 800146a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800146e:	20c7      	movs	r0, #199	; 0xc7
 8001470:	f7ff ff12 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xC8, (0x1 << 10) | (0x2 << 4) | 0x4);
 8001474:	f240 4124 	movw	r1, #1060	; 0x424
 8001478:	20c8      	movs	r0, #200	; 0xc8
 800147a:	f7ff ff0d 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xC9, (0x1 << 17) | 0xC);
 800147e:	4930      	ldr	r1, [pc, #192]	; (8001540 <AFE_REG_INIT+0x1b4>)
 8001480:	20c9      	movs	r0, #201	; 0xc9
 8001482:	f7ff ff09 	bl	8001298 <AFE_WRITE>

	// 7 - masked
	AFE_WRITE(0xCA, 0x010000);
 8001486:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800148a:	20ca      	movs	r0, #202	; 0xca
 800148c:	f7ff ff04 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xCB, (0x1 << 10) | (0x2 << 4) | 0x4);
 8001490:	f240 4124 	movw	r1, #1060	; 0x424
 8001494:	20cb      	movs	r0, #203	; 0xcb
 8001496:	f7ff feff 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xCC, (0x1 << 17) | 0xC);
 800149a:	4929      	ldr	r1, [pc, #164]	; (8001540 <AFE_REG_INIT+0x1b4>)
 800149c:	20cc      	movs	r0, #204	; 0xcc
 800149e:	f7ff fefb 	bl	8001298 <AFE_WRITE>

	// 8 - masked
	AFE_WRITE(0xCD, 0x010000);
 80014a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80014a6:	20cd      	movs	r0, #205	; 0xcd
 80014a8:	f7ff fef6 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xCE, (0x1 << 10) | (0x2 << 4) | 0x4);
 80014ac:	f240 4124 	movw	r1, #1060	; 0x424
 80014b0:	20ce      	movs	r0, #206	; 0xce
 80014b2:	f7ff fef1 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xCF, (0x1 << 17) | 0xC);
 80014b6:	4922      	ldr	r1, [pc, #136]	; (8001540 <AFE_REG_INIT+0x1b4>)
 80014b8:	20cf      	movs	r0, #207	; 0xcf
 80014ba:	f7ff feed 	bl	8001298 <AFE_WRITE>

	// 9
	// Green ON
	AFE_WRITE(0xD0, 0x020002);
 80014be:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 80014c2:	20d0      	movs	r0, #208	; 0xd0
 80014c4:	f7ff fee8 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xD1, (0x3 << 10) | (0x3 << 4) | 0x1);
 80014c8:	f640 4131 	movw	r1, #3121	; 0xc31
 80014cc:	20d1      	movs	r0, #209	; 0xd1
 80014ce:	f7ff fee3 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xD2, 0xC);
 80014d2:	210c      	movs	r1, #12
 80014d4:	20d2      	movs	r0, #210	; 0xd2
 80014d6:	f7ff fedf 	bl	8001298 <AFE_WRITE>

	// 10 - not masked for aligment
	AFE_WRITE(0xD3, 0x020002);
 80014da:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 80014de:	20d3      	movs	r0, #211	; 0xd3
 80014e0:	f7ff feda 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xD4, (0x1 << 10) | (0x2 << 4) | 0x1);
 80014e4:	f240 4121 	movw	r1, #1057	; 0x421
 80014e8:	20d4      	movs	r0, #212	; 0xd4
 80014ea:	f7ff fed5 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xD5, 0xC);
 80014ee:	210c      	movs	r1, #12
 80014f0:	20d5      	movs	r0, #213	; 0xd5
 80014f2:	f7ff fed1 	bl	8001298 <AFE_WRITE>

	// 11 - masked
	AFE_WRITE(0xD6, 0x020000);
 80014f6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80014fa:	20d6      	movs	r0, #214	; 0xd6
 80014fc:	f7ff fecc 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xD7, (0x1 << 10) | (0x2 << 4) | 0x1);
 8001500:	f240 4121 	movw	r1, #1057	; 0x421
 8001504:	20d7      	movs	r0, #215	; 0xd7
 8001506:	f7ff fec7 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xD8, (0x1 << 17) | 0xC);
 800150a:	490d      	ldr	r1, [pc, #52]	; (8001540 <AFE_REG_INIT+0x1b4>)
 800150c:	20d8      	movs	r0, #216	; 0xd8
 800150e:	f7ff fec3 	bl	8001298 <AFE_WRITE>

	// 12 - masked
	AFE_WRITE(0xD9, 0x020000);
 8001512:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001516:	20d9      	movs	r0, #217	; 0xd9
 8001518:	f7ff febe 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xDA, (0x1 << 10) | (0x2 << 4) | 0x1);
 800151c:	f240 4121 	movw	r1, #1057	; 0x421
 8001520:	20da      	movs	r0, #218	; 0xda
 8001522:	f7ff feb9 	bl	8001298 <AFE_WRITE>
	AFE_WRITE(0xDB, (0x1 << 17) | 0xC);
 8001526:	4906      	ldr	r1, [pc, #24]	; (8001540 <AFE_REG_INIT+0x1b4>)
 8001528:	20db      	movs	r0, #219	; 0xdb
 800152a:	f7ff feb5 	bl	8001298 <AFE_WRITE>

	// FIFO_EN = 1
	AFE_WRITE(0x00, 0x000040);
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff feb1 	bl	8001298 <AFE_WRITE>

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	00010004 	.word	0x00010004
 8001540:	0002000c 	.word	0x0002000c
 8001544:	00010008 	.word	0x00010008

08001548 <AFE_LED_STRENGTH>:
 * @param iled2 The LED strength for LED 2
 * @param iled3 The LED strength for LED 3
 * @param iled4 The LED strength for LED 4
 */
void AFE_LED_STRENGTH(uint8_t iled1, uint8_t iled2, uint8_t iled3,
		uint8_t iled4) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4604      	mov	r4, r0
 8001550:	4608      	mov	r0, r1
 8001552:	4611      	mov	r1, r2
 8001554:	461a      	mov	r2, r3
 8001556:	4623      	mov	r3, r4
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	4603      	mov	r3, r0
 800155c:	71bb      	strb	r3, [r7, #6]
 800155e:	460b      	mov	r3, r1
 8001560:	717b      	strb	r3, [r7, #5]
 8001562:	4613      	mov	r3, r2
 8001564:	713b      	strb	r3, [r7, #4]
	AFE_ILED_1 = iled1;
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <AFE_LED_STRENGTH+0x44>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	7013      	strb	r3, [r2, #0]
	AFE_ILED_2 = iled2;
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <AFE_LED_STRENGTH+0x48>)
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	7013      	strb	r3, [r2, #0]
	AFE_ILED_3 = iled3;
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <AFE_LED_STRENGTH+0x4c>)
 8001574:	797b      	ldrb	r3, [r7, #5]
 8001576:	7013      	strb	r3, [r2, #0]
	AFE_ILED_4 = iled4;
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <AFE_LED_STRENGTH+0x50>)
 800157a:	793b      	ldrb	r3, [r7, #4]
 800157c:	7013      	strb	r3, [r2, #0]
	AFE_ILED_UPDATE();
 800157e:	f000 f80d 	bl	800159c <AFE_ILED_UPDATE>
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	20000450 	.word	0x20000450
 8001590:	20000451 	.word	0x20000451
 8001594:	20000452 	.word	0x20000452
 8001598:	20000453 	.word	0x20000453

0800159c <AFE_ILED_UPDATE>:
 * @brief Updates the LED strengths for AFE
 *
 * This function updates the LED strengths for the AFE by writing the values of `AFE_ILED_1`,
 * `AFE_ILED_2`, `AFE_ILED_3`, and `AFE_ILED_4` to the corresponding registers.
 */
void AFE_ILED_UPDATE() {
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	// ILED1 ILED2 strength
	AFE_WRITE(0xAC, (AFE_ILED_2 << 12) | AFE_ILED_1);
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <AFE_ILED_UPDATE+0x30>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	031b      	lsls	r3, r3, #12
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <AFE_ILED_UPDATE+0x34>)
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	20ac      	movs	r0, #172	; 0xac
 80015b0:	f7ff fe72 	bl	8001298 <AFE_WRITE>
	// ILED3 ILED4 strength
	AFE_WRITE(0xAE, (AFE_ILED_4 << 12) | AFE_ILED_3);
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <AFE_ILED_UPDATE+0x38>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	031b      	lsls	r3, r3, #12
 80015ba:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <AFE_ILED_UPDATE+0x3c>)
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	4313      	orrs	r3, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	20ae      	movs	r0, #174	; 0xae
 80015c4:	f7ff fe68 	bl	8001298 <AFE_WRITE>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000451 	.word	0x20000451
 80015d0:	20000450 	.word	0x20000450
 80015d4:	20000453 	.word	0x20000453
 80015d8:	20000452 	.word	0x20000452

080015dc <AFE_FIFO_READ>:
 * The received data is stored in the AFE_Buffer array, and then converted to floating-point
 * values and stored in the AFE_FLOAT array.
 *
 * @param size The number of samples to read from the FIFO
 */
void AFE_FIFO_READ(uint16_t size) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0e6      	sub	sp, #408	; 0x198
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4602      	mov	r2, r0
 80015e4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80015e8:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 80015ec:	801a      	strh	r2, [r3, #0]
	uint8_t fifo_addr[] = { 0xFF };
 80015ee:	23ff      	movs	r3, #255	; 0xff
 80015f0:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
	uint8_t AFE_Buffer[FIFO_DEPTH * 3];
	AFE_SPI_EN();
 80015f4:	2200      	movs	r2, #0
 80015f6:	2110      	movs	r1, #16
 80015f8:	484f      	ldr	r0, [pc, #316]	; (8001738 <AFE_FIFO_READ+0x15c>)
 80015fa:	f005 fa6f 	bl	8006adc <HAL_GPIO_WritePin>

	while (HAL_SPI_GetState(afe_spi) != HAL_SPI_STATE_READY)
 80015fe:	bf00      	nop
 8001600:	4b4e      	ldr	r3, [pc, #312]	; (800173c <AFE_FIFO_READ+0x160>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f009 fd5c 	bl	800b0c2 <HAL_SPI_GetState>
 800160a:	4603      	mov	r3, r0
 800160c:	2b01      	cmp	r3, #1
 800160e:	d1f7      	bne.n	8001600 <AFE_FIFO_READ+0x24>
		;
	HAL_SPI_Transmit_DMA(afe_spi, (uint8_t*) fifo_addr, 1);
 8001610:	4b4a      	ldr	r3, [pc, #296]	; (800173c <AFE_FIFO_READ+0x160>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8001618:	2201      	movs	r2, #1
 800161a:	4618      	mov	r0, r3
 800161c:	f009 f960 	bl	800a8e0 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(afe_spi) != HAL_SPI_STATE_READY)
 8001620:	bf00      	nop
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <AFE_FIFO_READ+0x160>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f009 fd4b 	bl	800b0c2 <HAL_SPI_GetState>
 800162c:	4603      	mov	r3, r0
 800162e:	2b01      	cmp	r3, #1
 8001630:	d1f7      	bne.n	8001622 <AFE_FIFO_READ+0x46>
		;
	HAL_SPI_Receive_DMA(afe_spi, (uint8_t*) AFE_Buffer, size * 3);
 8001632:	4b42      	ldr	r3, [pc, #264]	; (800173c <AFE_FIFO_READ+0x160>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800163a:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	0052      	lsls	r2, r2, #1
 8001644:	4413      	add	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	f009 fa17 	bl	800aa80 <HAL_SPI_Receive_DMA>
	while (HAL_SPI_GetState(afe_spi) != HAL_SPI_STATE_READY)
 8001652:	bf00      	nop
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <AFE_FIFO_READ+0x160>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f009 fd32 	bl	800b0c2 <HAL_SPI_GetState>
 800165e:	4603      	mov	r3, r0
 8001660:	2b01      	cmp	r3, #1
 8001662:	d1f7      	bne.n	8001654 <AFE_FIFO_READ+0x78>
		;
	AFE_SPI_DIS();
 8001664:	2201      	movs	r2, #1
 8001666:	2110      	movs	r1, #16
 8001668:	4833      	ldr	r0, [pc, #204]	; (8001738 <AFE_FIFO_READ+0x15c>)
 800166a:	f005 fa37 	bl	8006adc <HAL_GPIO_WritePin>

	for (uint16_t i = 0; i < size; i++) {
 800166e:	2300      	movs	r3, #0
 8001670:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 8001674:	e052      	b.n	800171c <AFE_FIFO_READ+0x140>

		int32_t adc = AFE_Buffer[3 * i];
 8001676:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001684:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		adc = (adc << 8) | AFE_Buffer[3 * i + 1];
 800168e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001692:	0219      	lsls	r1, r3, #8
 8001694:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	3301      	adds	r3, #1
 80016a0:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80016a4:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	430b      	orrs	r3, r1
 80016ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		adc = (adc << 8) | AFE_Buffer[3 * i + 2];
 80016b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016b4:	0219      	lsls	r1, r3, #8
 80016b6:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	3302      	adds	r3, #2
 80016c2:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80016c6:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	430b      	orrs	r3, r1
 80016ce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		if (adc & 0x00800000) {
 80016d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <AFE_FIFO_READ+0x10e>
			adc = adc ^ 0xFF000000;
 80016de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016e2:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 80016e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		}
		float result = (float) adc / 2097152.0f;
 80016ea:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80016ee:	f7ff fad5 	bl	8000c9c <__aeabi_i2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fbd7 	bl	8000eac <__aeabi_fdiv>
 80016fe:	4603      	mov	r3, r0
 8001700:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		AFE_FLOAT[i] = result;
 8001704:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8001708:	490d      	ldr	r1, [pc, #52]	; (8001740 <AFE_FIFO_READ+0x164>)
 800170a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint16_t i = 0; i < size; i++) {
 8001712:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8001716:	3301      	adds	r3, #1
 8001718:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 800171c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001720:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8001724:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d3a3      	bcc.n	8001676 <AFE_FIFO_READ+0x9a>
	}
	return;
 800172e:	bf00      	nop
}
 8001730:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40010800 	.word	0x40010800
 800173c:	2000024c 	.word	0x2000024c
 8001740:	20000250 	.word	0x20000250

08001744 <Crc16>:
		0x59C0, 0x5880, 0x9841, 0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1,
		0x8A81, 0x4A40, 0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80,
		0x8C41, 0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
		0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040 };

unsigned short Crc16(unsigned char *pcBlock, unsigned short len) {
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
	unsigned short crc = 0x0000;
 8001750:	2300      	movs	r3, #0
 8001752:	81fb      	strh	r3, [r7, #14]

	while (len--)
 8001754:	e00e      	b.n	8001774 <Crc16+0x30>
		crc = (crc >> 8) ^ Crc16Table[(crc & 0xFF) ^ *pcBlock++];
 8001756:	89fb      	ldrh	r3, [r7, #14]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	b29a      	uxth	r2, r3
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	b2d9      	uxtb	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	1c58      	adds	r0, r3, #1
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	404b      	eors	r3, r1
 800176a:	4908      	ldr	r1, [pc, #32]	; (800178c <Crc16+0x48>)
 800176c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001770:	4053      	eors	r3, r2
 8001772:	81fb      	strh	r3, [r7, #14]
	while (len--)
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	807a      	strh	r2, [r7, #2]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1eb      	bne.n	8001756 <Crc16+0x12>

	return crc;
 800177e:	89fb      	ldrh	r3, [r7, #14]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	08011110 	.word	0x08011110

08001790 <HAL_UART_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	if (huart->Instance == bee_uart->Instance) {
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_UART_TxCpltCallback+0x54>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d119      	bne.n	80017da <HAL_UART_TxCpltCallback+0x4a>
		HAL_UART_AbortReceive_IT(bee_uart);
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_UART_TxCpltCallback+0x54>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00a ff3c 	bl	800c628 <HAL_UART_AbortReceive_IT>
		HAL_UART_AbortReceiveCpltCallback(bee_uart);
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_UART_TxCpltCallback+0x54>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00b f954 	bl	800ca62 <HAL_UART_AbortReceiveCpltCallback>
		response_pointer = 0;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_UART_TxCpltCallback+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	801a      	strh	r2, [r3, #0]
		response_rdy = RESET;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_UART_TxCpltCallback+0x5c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
		bee_response[1] = 0xFF;
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_UART_TxCpltCallback+0x60>)
 80017c8:	22ff      	movs	r2, #255	; 0xff
 80017ca:	705a      	strb	r2, [r3, #1]
		HAL_UART_Receive_IT(bee_uart, (uint8_t*) bee_response, 1);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_UART_TxCpltCallback+0x54>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4907      	ldr	r1, [pc, #28]	; (80017f0 <HAL_UART_TxCpltCallback+0x60>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00a fef7 	bl	800c5c8 <HAL_UART_Receive_IT>
	}

}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200005d8 	.word	0x200005d8
 80017e8:	200004d4 	.word	0x200004d4
 80017ec:	200004d6 	.word	0x200004d6
 80017f0:	20000454 	.word	0x20000454

080017f4 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == bee_uart->Instance) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <HAL_UART_RxCpltCallback+0x94>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d13a      	bne.n	8001880 <HAL_UART_RxCpltCallback+0x8c>
		response_pointer++;
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 8001814:	801a      	strh	r2, [r3, #0]
		if (response_pointer > bee_response[1] + 3) {
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_UART_RxCpltCallback+0x9c>)
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	3303      	adds	r3, #3
 8001822:	429a      	cmp	r2, r3
 8001824:	dd03      	ble.n	800182e <HAL_UART_RxCpltCallback+0x3a>
			response_rdy = SET;
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_UART_RxCpltCallback+0xa0>)
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
			return;
 800182c:	e028      	b.n	8001880 <HAL_UART_RxCpltCallback+0x8c>
		}
		if(response_pointer >= 3 && bee_response[response_pointer-2] == 0x1B){ // escaped ESC
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d919      	bls.n	800186a <HAL_UART_RxCpltCallback+0x76>
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	3b02      	subs	r3, #2
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_UART_RxCpltCallback+0x9c>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	2b1b      	cmp	r3, #27
 8001842:	d112      	bne.n	800186a <HAL_UART_RxCpltCallback+0x76>
			if(bee_response[response_pointer-1] == 0x53) {// escaped SYN
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	3b01      	subs	r3, #1
 800184a:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_UART_RxCpltCallback+0x9c>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	2b53      	cmp	r3, #83	; 0x53
 8001850:	d105      	bne.n	800185e <HAL_UART_RxCpltCallback+0x6a>
				bee_response[response_pointer-2] = BEE_SYNC;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	3b02      	subs	r3, #2
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_UART_RxCpltCallback+0x9c>)
 800185a:	217f      	movs	r1, #127	; 0x7f
 800185c:	54d1      	strb	r1, [r2, r3]
			}
			response_pointer--;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 8001868:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(bee_uart, &bee_response[response_pointer], 1);
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_UART_RxCpltCallback+0x94>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_UART_RxCpltCallback+0x98>)
 8001870:	8812      	ldrh	r2, [r2, #0]
 8001872:	4611      	mov	r1, r2
 8001874:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_UART_RxCpltCallback+0x9c>)
 8001876:	4411      	add	r1, r2
 8001878:	2201      	movs	r2, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f00a fea4 	bl	800c5c8 <HAL_UART_Receive_IT>
	}
}
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200005d8 	.word	0x200005d8
 800188c:	200004d4 	.word	0x200004d4
 8001890:	20000454 	.word	0x20000454
 8001894:	200004d6 	.word	0x200004d6

08001898 <BEE_init>:
 * @brief  Define UART for swarm bee module
 * @param  huart Pointer to a UART_HandleTypeDef structure that contains
 *               the configuration information for the specified UART module
 * @retval None
 */
void BEE_init(UART_HandleTypeDef *huart) {
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	bee_uart = huart;
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <BEE_init+0x18>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	200005d8 	.word	0x200005d8

080018b4 <BEE_TX_B>:
 * @note   Synchronization word and CRC will be pasted in this function
 * @param  command Pointer to command
 * @param  Size  Amount of bytes in command array
 * @retval int Zero - transmission started, otherwise error code
 */
int BEE_TX_B(uint8_t *command) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	uint16_t size = command[0] + 1;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	817b      	strh	r3, [r7, #10]
	if (size > BEE_SIZE - 3)
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	2b7d      	cmp	r3, #125	; 0x7d
 80018ca:	d902      	bls.n	80018d2 <BEE_TX_B+0x1e>
		return -1;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
 80018d0:	e075      	b.n	80019be <BEE_TX_B+0x10a>
	uint16_t payload_size = size + 3;
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	3303      	adds	r3, #3
 80018d6:	81fb      	strh	r3, [r7, #14]
	memcpy(&bee_payload[1], command, size);
 80018d8:	897b      	ldrh	r3, [r7, #10]
 80018da:	461a      	mov	r2, r3
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	483a      	ldr	r0, [pc, #232]	; (80019c8 <BEE_TX_B+0x114>)
 80018e0:	f00b fbce 	bl	800d080 <memcpy>
	bee_payload[0] = BEE_SYNC;
 80018e4:	4b39      	ldr	r3, [pc, #228]	; (80019cc <BEE_TX_B+0x118>)
 80018e6:	227f      	movs	r2, #127	; 0x7f
 80018e8:	701a      	strb	r2, [r3, #0]
	uint16_t crc = getCRC(bee_payload, payload_size);
 80018ea:	89fb      	ldrh	r3, [r7, #14]
 80018ec:	4619      	mov	r1, r3
 80018ee:	4837      	ldr	r0, [pc, #220]	; (80019cc <BEE_TX_B+0x118>)
 80018f0:	f000 f91c 	bl	8001b2c <getCRC>
 80018f4:	4603      	mov	r3, r0
 80018f6:	813b      	strh	r3, [r7, #8]
	bee_payload[payload_size - 2] = (crc) & 0xFF;
 80018f8:	89fb      	ldrh	r3, [r7, #14]
 80018fa:	3b02      	subs	r3, #2
 80018fc:	893a      	ldrh	r2, [r7, #8]
 80018fe:	b2d1      	uxtb	r1, r2
 8001900:	4a32      	ldr	r2, [pc, #200]	; (80019cc <BEE_TX_B+0x118>)
 8001902:	54d1      	strb	r1, [r2, r3]
	bee_payload[payload_size - 1] = (crc >> 8) & 0xFF;
 8001904:	893b      	ldrh	r3, [r7, #8]
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	b29a      	uxth	r2, r3
 800190a:	89fb      	ldrh	r3, [r7, #14]
 800190c:	3b01      	subs	r3, #1
 800190e:	b2d1      	uxtb	r1, r2
 8001910:	4a2e      	ldr	r2, [pc, #184]	; (80019cc <BEE_TX_B+0x118>)
 8001912:	54d1      	strb	r1, [r2, r3]

	uint16_t i = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	81bb      	strh	r3, [r7, #12]
	while (i != BEE_SIZE && i != payload_size) {
 8001918:	e03a      	b.n	8001990 <BEE_TX_B+0xdc>
		if (bee_payload[i] == 0x1B) {
 800191a:	89bb      	ldrh	r3, [r7, #12]
 800191c:	4a2b      	ldr	r2, [pc, #172]	; (80019cc <BEE_TX_B+0x118>)
 800191e:	5cd3      	ldrb	r3, [r2, r3]
 8001920:	2b1b      	cmp	r3, #27
 8001922:	d114      	bne.n	800194e <BEE_TX_B+0x9a>
			memmove(&bee_payload[i + 1], &bee_payload[i],
 8001924:	89bb      	ldrh	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	4a28      	ldr	r2, [pc, #160]	; (80019cc <BEE_TX_B+0x118>)
 800192a:	1898      	adds	r0, r3, r2
 800192c:	89bb      	ldrh	r3, [r7, #12]
 800192e:	4a27      	ldr	r2, [pc, #156]	; (80019cc <BEE_TX_B+0x118>)
 8001930:	1899      	adds	r1, r3, r2
					(payload_size - i) * sizeof(uint8_t));
 8001932:	89fa      	ldrh	r2, [r7, #14]
 8001934:	89bb      	ldrh	r3, [r7, #12]
 8001936:	1ad3      	subs	r3, r2, r3
			memmove(&bee_payload[i + 1], &bee_payload[i],
 8001938:	461a      	mov	r2, r3
 800193a:	f00b fbaf 	bl	800d09c <memmove>
			bee_payload[i + 1] = 0x45;
 800193e:	89bb      	ldrh	r3, [r7, #12]
 8001940:	3301      	adds	r3, #1
 8001942:	4a22      	ldr	r2, [pc, #136]	; (80019cc <BEE_TX_B+0x118>)
 8001944:	2145      	movs	r1, #69	; 0x45
 8001946:	54d1      	strb	r1, [r2, r3]
			payload_size++;
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	3301      	adds	r3, #1
 800194c:	81fb      	strh	r3, [r7, #14]
		}
		if (bee_payload[i] == BEE_SYNC) {
 800194e:	89bb      	ldrh	r3, [r7, #12]
 8001950:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <BEE_TX_B+0x118>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	2b7f      	cmp	r3, #127	; 0x7f
 8001956:	d118      	bne.n	800198a <BEE_TX_B+0xd6>
			memmove(&bee_payload[i + 1], &bee_payload[i],
 8001958:	89bb      	ldrh	r3, [r7, #12]
 800195a:	3301      	adds	r3, #1
 800195c:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <BEE_TX_B+0x118>)
 800195e:	1898      	adds	r0, r3, r2
 8001960:	89bb      	ldrh	r3, [r7, #12]
 8001962:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <BEE_TX_B+0x118>)
 8001964:	1899      	adds	r1, r3, r2
					(payload_size - i) * sizeof(uint8_t));
 8001966:	89fa      	ldrh	r2, [r7, #14]
 8001968:	89bb      	ldrh	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
			memmove(&bee_payload[i + 1], &bee_payload[i],
 800196c:	461a      	mov	r2, r3
 800196e:	f00b fb95 	bl	800d09c <memmove>
			bee_payload[i] = 0x1B;
 8001972:	89bb      	ldrh	r3, [r7, #12]
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <BEE_TX_B+0x118>)
 8001976:	211b      	movs	r1, #27
 8001978:	54d1      	strb	r1, [r2, r3]
			bee_payload[i + 1] = 0x53;
 800197a:	89bb      	ldrh	r3, [r7, #12]
 800197c:	3301      	adds	r3, #1
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <BEE_TX_B+0x118>)
 8001980:	2153      	movs	r1, #83	; 0x53
 8001982:	54d1      	strb	r1, [r2, r3]
			payload_size++;
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	3301      	adds	r3, #1
 8001988:	81fb      	strh	r3, [r7, #14]
		}
		i++;
 800198a:	89bb      	ldrh	r3, [r7, #12]
 800198c:	3301      	adds	r3, #1
 800198e:	81bb      	strh	r3, [r7, #12]
	while (i != BEE_SIZE && i != payload_size) {
 8001990:	89bb      	ldrh	r3, [r7, #12]
 8001992:	2b80      	cmp	r3, #128	; 0x80
 8001994:	d003      	beq.n	800199e <BEE_TX_B+0xea>
 8001996:	89ba      	ldrh	r2, [r7, #12]
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	429a      	cmp	r2, r3
 800199c:	d1bd      	bne.n	800191a <BEE_TX_B+0x66>
	}
	if (i == BEE_SIZE)
 800199e:	89bb      	ldrh	r3, [r7, #12]
 80019a0:	2b80      	cmp	r3, #128	; 0x80
 80019a2:	d102      	bne.n	80019aa <BEE_TX_B+0xf6>
		return -2;
 80019a4:	f06f 0301 	mvn.w	r3, #1
 80019a8:	e009      	b.n	80019be <BEE_TX_B+0x10a>
	BEE_clear_response();
 80019aa:	f000 f813 	bl	80019d4 <BEE_clear_response>
	HAL_UART_Transmit_IT(bee_uart, (uint8_t*) bee_payload, payload_size);
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <BEE_TX_B+0x11c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	89fa      	ldrh	r2, [r7, #14]
 80019b4:	4905      	ldr	r1, [pc, #20]	; (80019cc <BEE_TX_B+0x118>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00a fdc2 	bl	800c540 <HAL_UART_Transmit_IT>
	return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200004d9 	.word	0x200004d9
 80019cc:	200004d8 	.word	0x200004d8
 80019d0:	200005d8 	.word	0x200005d8

080019d4 <BEE_clear_response>:

/**
 * @brief  Clear response array
 * @retval None
 */
void BEE_clear_response() {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
	for (int i = 0; i < BEE_SIZE; i++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	e007      	b.n	80019f0 <BEE_clear_response+0x1c>
		bee_response[i] = 0x00;
 80019e0:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <BEE_clear_response+0x30>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BEE_SIZE; i++) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3301      	adds	r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b7f      	cmp	r3, #127	; 0x7f
 80019f4:	ddf4      	ble.n	80019e0 <BEE_clear_response+0xc>
	}
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000454 	.word	0x20000454

08001a08 <BEE_set_binary>:
/**
 * @brief  Set swarm bee module from ASCII into binary mode
 * @note   Do nothing if module is already in binary mode
 * @retval None
 */
void BEE_set_binary() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(bee_uart, (uint8_t*) "SBIN\r\n", (uint16_t) 6);
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <BEE_set_binary+0x18>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2206      	movs	r2, #6
 8001a12:	4904      	ldr	r1, [pc, #16]	; (8001a24 <BEE_set_binary+0x1c>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00a fd93 	bl	800c540 <HAL_UART_Transmit_IT>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200005d8 	.word	0x200005d8
 8001a24:	08010e28 	.word	0x08010e28

08001a28 <BEE_b_sbiv>:
 * in milliseconds [ms]. The return value indicates the transmission status.
 *
 * @param blinkrate The blink interval in milliseconds [ms].
 * @return The transmission status.
 */
int BEE_b_sbiv(uint16_t blinkrate) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
	uint8_t sbiv[] = { 0x04, 0x55, 0x31, 0x00, 0x00 };
 8001a32:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <BEE_b_sbiv+0x58>)
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a3c:	6018      	str	r0, [r3, #0]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	7019      	strb	r1, [r3, #0]
	uint16_t size = 5;
 8001a42:	2305      	movs	r3, #5
 8001a44:	81fb      	strh	r3, [r7, #14]
	sbiv[size - 2] = (blinkrate >> 8) & 0xFF;
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	89fb      	ldrh	r3, [r7, #14]
 8001a4e:	3b02      	subs	r3, #2
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	3310      	adds	r3, #16
 8001a54:	443b      	add	r3, r7
 8001a56:	f803 2c08 	strb.w	r2, [r3, #-8]
	sbiv[size - 1] = (blinkrate) & 0xFF;
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	88fa      	ldrh	r2, [r7, #6]
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	3310      	adds	r3, #16
 8001a64:	443b      	add	r3, r7
 8001a66:	f803 2c08 	strb.w	r2, [r3, #-8]
	return BEE_TX_B(sbiv);
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff20 	bl	80018b4 <BEE_TX_B>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08010e30 	.word	0x08010e30

08001a84 <BEE_b_fnin>:
 *
 * @param payload The payload data to be transmitted.
 * @param size The size of the payload data.
 * @return The transmission status.
 */
int BEE_b_fnin(uint8_t *payload, uint16_t size) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
	bee_buffer[0] = 3 + size;
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	3303      	adds	r3, #3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <BEE_b_fnin+0x60>)
 8001a9a:	701a      	strb	r2, [r3, #0]
	bee_buffer[1] = 0x55;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <BEE_b_fnin+0x60>)
 8001a9e:	2255      	movs	r2, #85	; 0x55
 8001aa0:	705a      	strb	r2, [r3, #1]
	bee_buffer[2] = 0x28;
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <BEE_b_fnin+0x60>)
 8001aa4:	2228      	movs	r2, #40	; 0x28
 8001aa6:	709a      	strb	r2, [r3, #2]
	bee_buffer[3] = size;
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <BEE_b_fnin+0x60>)
 8001aae:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < size; i++) {
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e00a      	b.n	8001acc <BEE_b_fnin+0x48>
		bee_buffer[4 + i] = payload[i];
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	441a      	add	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	7811      	ldrb	r1, [r2, #0]
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <BEE_b_fnin+0x60>)
 8001ac4:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dbf0      	blt.n	8001ab6 <BEE_b_fnin+0x32>
	}
	return BEE_TX_B(bee_buffer);
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <BEE_b_fnin+0x60>)
 8001ad6:	f7ff feed 	bl	80018b4 <BEE_TX_B>
 8001ada:	4603      	mov	r3, r0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000558 	.word	0x20000558

08001ae8 <printf_bee_response>:

/**
 * @brief  Debug feature for printing response
 * @retval None
 */
void printf_bee_response() {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	for (int i = 0; i < BEE_SIZE; i++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	e00a      	b.n	8001b0a <printf_bee_response+0x22>
		printf("%x ", bee_response[i]);
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <printf_bee_response+0x38>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4809      	ldr	r0, [pc, #36]	; (8001b24 <printf_bee_response+0x3c>)
 8001b00:	f00c f83e 	bl	800db80 <iprintf>
	for (int i = 0; i < BEE_SIZE; i++) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b0e:	ddf1      	ble.n	8001af4 <printf_bee_response+0xc>
	}
	printf("\r\n");
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <printf_bee_response+0x40>)
 8001b12:	f00c f8bb 	bl	800dc8c <puts>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000454 	.word	0x20000454
 8001b24:	08010e38 	.word	0x08010e38
 8001b28:	08010e3c 	.word	0x08010e3c

08001b2c <getCRC>:
 * @brief  Calculate ANSI CRC for given array
 * @param  Buffer Pointer to array.
 * @param  BufferSize  Amount of bytes in array.
 * @retval int16_t 16bit of calculated CRC
 */
uint16_t getCRC(uint8_t *Buffer, uint16_t BufferSize) {
 8001b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b30:	b087      	sub	sp, #28
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	807b      	strh	r3, [r7, #2]
 8001b3a:	466b      	mov	r3, sp
 8001b3c:	461e      	mov	r6, r3
	uint8_t z[BufferSize];
 8001b3e:	8879      	ldrh	r1, [r7, #2]
 8001b40:	460b      	mov	r3, r1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	b28b      	uxth	r3, r1
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4698      	mov	r8, r3
 8001b4c:	4691      	mov	r9, r2
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b62:	b28b      	uxth	r3, r1
 8001b64:	2200      	movs	r2, #0
 8001b66:	461c      	mov	r4, r3
 8001b68:	4615      	mov	r5, r2
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	00eb      	lsls	r3, r5, #3
 8001b74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b78:	00e2      	lsls	r2, r4, #3
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	3307      	adds	r3, #7
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	ebad 0d03 	sub.w	sp, sp, r3
 8001b86:	466b      	mov	r3, sp
 8001b88:	3300      	adds	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
	uint16_t crc;
	for (uint8_t i = 0; i < BufferSize; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	75fb      	strb	r3, [r7, #23]
 8001b90:	e009      	b.n	8001ba6 <getCRC+0x7a>
		z[i] = *Buffer++;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	7dfa      	ldrb	r2, [r7, #23]
 8001b9a:	7819      	ldrb	r1, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	5499      	strb	r1, [r3, r2]
	for (uint8_t i = 0; i < BufferSize; i++)
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f0      	bhi.n	8001b92 <getCRC+0x66>
	crc = Crc16(z, BufferSize - 2);
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	3b02      	subs	r3, #2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7ff fdc3 	bl	8001744 <Crc16>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	817b      	strh	r3, [r7, #10]
	return crc;
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	46b5      	mov	sp, r6
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001bd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_DMA_Init+0x68>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <MX_DMA_Init+0x68>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6153      	str	r3, [r2, #20]
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_DMA_Init+0x68>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	200c      	movs	r0, #12
 8001bf4:	f004 f930 	bl	8005e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bf8:	200c      	movs	r0, #12
 8001bfa:	f004 f959 	bl	8005eb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	200d      	movs	r0, #13
 8001c04:	f004 f928 	bl	8005e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c08:	200d      	movs	r0, #13
 8001c0a:	f004 f951 	bl	8005eb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	2010      	movs	r0, #16
 8001c14:	f004 f920 	bl	8005e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c18:	2010      	movs	r0, #16
 8001c1a:	f004 f949 	bl	8005eb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2011      	movs	r0, #17
 8001c24:	f004 f918 	bl	8005e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001c28:	2011      	movs	r0, #17
 8001c2a:	f004 f941 	bl	8005eb0 <HAL_NVIC_EnableIRQ>

}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000

08001c3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c50:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <MX_GPIO_Init+0x194>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <MX_GPIO_Init+0x194>)
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <MX_GPIO_Init+0x194>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <MX_GPIO_Init+0x194>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <MX_GPIO_Init+0x194>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <MX_GPIO_Init+0x194>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <MX_GPIO_Init+0x194>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <MX_GPIO_Init+0x194>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <MX_GPIO_Init+0x194>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	484d      	ldr	r0, [pc, #308]	; (8001dd4 <MX_GPIO_Init+0x198>)
 8001c9e:	f004 ff1d 	bl	8006adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOD_EN_Pin|A_MODE_Pin|AFE_RESETZ_Pin|AFE_SPI_EN_Pin
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f241 111b 	movw	r1, #4379	; 0x111b
 8001ca8:	484b      	ldr	r0, [pc, #300]	; (8001dd8 <MX_GPIO_Init+0x19c>)
 8001caa:	f004 ff17 	bl	8006adc <HAL_GPIO_WritePin>
                          |AFE_CLK_Pin|TPS61099_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|OLED_ON_Pin, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2124      	movs	r1, #36	; 0x24
 8001cb2:	484a      	ldr	r0, [pc, #296]	; (8001ddc <MX_GPIO_Init+0x1a0>)
 8001cb4:	f004 ff12 	bl	8006adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SB1_Pin;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SB1_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4842      	ldr	r0, [pc, #264]	; (8001dd4 <MX_GPIO_Init+0x198>)
 8001ccc:	f004 fc72 	bl	80065b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	483b      	ldr	r0, [pc, #236]	; (8001dd4 <MX_GPIO_Init+0x198>)
 8001ce8:	f004 fc64 	bl	80065b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOD_EN_Pin|AFE_CLK_Pin|TPS61099_EN_Pin;
 8001cec:	f241 1301 	movw	r3, #4353	; 0x1101
 8001cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	4619      	mov	r1, r3
 8001d04:	4834      	ldr	r0, [pc, #208]	; (8001dd8 <MX_GPIO_Init+0x19c>)
 8001d06:	f004 fc55 	bl	80065b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = A_MODE_Pin;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A_MODE_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	f107 030c 	add.w	r3, r7, #12
 8001d1e:	4619      	mov	r1, r3
 8001d20:	482d      	ldr	r0, [pc, #180]	; (8001dd8 <MX_GPIO_Init+0x19c>)
 8001d22:	f004 fc47 	bl	80065b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AFE_RESETZ_Pin;
 8001d26:	2308      	movs	r3, #8
 8001d28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AFE_RESETZ_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4826      	ldr	r0, [pc, #152]	; (8001dd8 <MX_GPIO_Init+0x19c>)
 8001d3e:	f004 fc39 	bl	80065b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AFE_SPI_EN_Pin;
 8001d42:	2310      	movs	r3, #16
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AFE_SPI_EN_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	481f      	ldr	r0, [pc, #124]	; (8001dd8 <MX_GPIO_Init+0x19c>)
 8001d5a:	f004 fc2b 	bl	80065b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ADC_RDY_Pin|TX_low_Pin;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	481a      	ldr	r0, [pc, #104]	; (8001ddc <MX_GPIO_Init+0x1a0>)
 8001d72:	f004 fc1f 	bl	80065b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUZZ_Pin|OLED_ON_Pin;
 8001d76:	2324      	movs	r3, #36	; 0x24
 8001d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4813      	ldr	r0, [pc, #76]	; (8001ddc <MX_GPIO_Init+0x1a0>)
 8001d8e:	f004 fc11 	bl	80065b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIS_INT_Pin;
 8001d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LIS_INT_GPIO_Port, &GPIO_InitStruct);
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	4619      	mov	r1, r3
 8001da6:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <MX_GPIO_Init+0x19c>)
 8001da8:	f004 fc04 	bl	80065b4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_GPIO_Init+0x1a4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <MX_GPIO_Init+0x1a4>)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	6053      	str	r3, [r2, #4]

}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40011400 	.word	0x40011400
 8001dd8:	40010800 	.word	0x40010800
 8001ddc:	40010c00 	.word	0x40010c00
 8001de0:	40010000 	.word	0x40010000

08001de4 <HR_greenPreprocess_new>:
 * @param ssf_size   Size of the Slope Sum Function (SSF).
 *
 * @return Pointer to the newly created HR_GreenPreprocess structure.
 */
HR_GreenPreprocess* HR_greenPreprocess_new(float freq, int bpf_order,
		float bpf_low, float bpf_high, int ssf_size) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
	SSF *ssf = SSF_new(ssf_size);
 8001df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001df4:	f000 fc9d 	bl	8002732 <SSF_new>
 8001df8:	61f8      	str	r0, [r7, #28]
	BPF_filter *bpf = BPF_new(bpf_order, freq, bpf_low, bpf_high);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68f9      	ldr	r1, [r7, #12]
 8001e00:	68b8      	ldr	r0, [r7, #8]
 8001e02:	f000 fd99 	bl	8002938 <BPF_new>
 8001e06:	61b8      	str	r0, [r7, #24]
	MA_filter *ma = MA_new(7);
 8001e08:	2007      	movs	r0, #7
 8001e0a:	f000 fd18 	bl	800283e <MA_new>
 8001e0e:	6178      	str	r0, [r7, #20]
	HR_GreenPreprocess *greenPreprocess = (HR_GreenPreprocess*) malloc(
 8001e10:	200c      	movs	r0, #12
 8001e12:	f00b f925 	bl	800d060 <malloc>
 8001e16:	4603      	mov	r3, r0
 8001e18:	613b      	str	r3, [r7, #16]
			sizeof(HR_GreenPreprocess));
	greenPreprocess->bpf_green = bpf;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	601a      	str	r2, [r3, #0]
	greenPreprocess->ssf_green = ssf;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	605a      	str	r2, [r3, #4]
	greenPreprocess->ma_green = ma;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	609a      	str	r2, [r3, #8]
	return greenPreprocess;
 8001e2c:	693b      	ldr	r3, [r7, #16]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HR_greenPreprocess_process>:
 * @param array           Pointer to the green channel data array.
 * @param array_size      Size of the green channel data array.
 * @return None.
 */
void HR_greenPreprocess_process(HR_GreenPreprocess *greenPrepocess,
		float *array, int array_size) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
	BPF_process(greenPrepocess->bpf_green, array, array_size);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 f817 	bl	8002e80 <BPF_process>
#ifdef HR_DEBUG
	memcpy(d1, array, HR_SIZE * sizeof(float));
 8001e52:	2264      	movs	r2, #100	; 0x64
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	480d      	ldr	r0, [pc, #52]	; (8001e8c <HR_greenPreprocess_process+0x54>)
 8001e58:	f00b f912 	bl	800d080 <memcpy>
#endif
	SSF_process(greenPrepocess->ssf_green, array, array_size);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fc7e 	bl	8002766 <SSF_process>
	MA_process(greenPrepocess->ma_green, array, array_size);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fcfe 	bl	8002874 <MA_process>
#ifdef HR_DEBUG
	memcpy(d2, array, HR_SIZE * sizeof(float));
 8001e78:	2264      	movs	r2, #100	; 0x64
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <HR_greenPreprocess_process+0x58>)
 8001e7e:	f00b f8ff 	bl	800d080 <memcpy>
#endif
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200005dc 	.word	0x200005dc
 8001e90:	20000640 	.word	0x20000640

08001e94 <HR_heartMonitor_new>:
 *
 * @return Pointer to the newly created HR_HeartMonitor structure.
 */
HR_HeartMonitor* HR_heartMonitor_new(float freq, int size, float threshold,
		int bpf_order, float bpf_low, float bpf_high, int ssf_size,
		int ma_green_size, int ma_redIr_size) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]

	HR_GreenPreprocess *greenPreprocess = HR_greenPreprocess_new(freq,
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	6a3a      	ldr	r2, [r7, #32]
 8001eaa:	6839      	ldr	r1, [r7, #0]
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff ff99 	bl	8001de4 <HR_greenPreprocess_new>
 8001eb2:	6178      	str	r0, [r7, #20]
			bpf_order, bpf_low, bpf_high, ssf_size);

	HR_HeartMonitor *heartMonitor = (HR_HeartMonitor*) malloc(
 8001eb4:	2020      	movs	r0, #32
 8001eb6:	f00b f8d3 	bl	800d060 <malloc>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	613b      	str	r3, [r7, #16]
			sizeof(HR_HeartMonitor));
	heartMonitor->size = size;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	601a      	str	r2, [r3, #0]
	heartMonitor->freq = freq;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
	heartMonitor->green = (float*) calloc(size, sizeof(float));
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2104      	movs	r1, #4
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f00b f894 	bl	800cffc <calloc>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]
	heartMonitor->red = (float*) calloc(size, sizeof(float));
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2104      	movs	r1, #4
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00b f88b 	bl	800cffc <calloc>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	60da      	str	r2, [r3, #12]
	heartMonitor->ir = (float*) calloc(size, sizeof(float));
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f00b f882 	bl	800cffc <calloc>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461a      	mov	r2, r3
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	611a      	str	r2, [r3, #16]
	heartMonitor->peaks = (int*) calloc(size, sizeof(int));
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2104      	movs	r1, #4
 8001f04:	4618      	mov	r0, r3
 8001f06:	f00b f879 	bl	800cffc <calloc>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	615a      	str	r2, [r3, #20]
	heartMonitor->threshold = threshold;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	619a      	str	r2, [r3, #24]
	heartMonitor->greenPreprocess = greenPreprocess;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	61da      	str	r2, [r3, #28]
	return heartMonitor;
 8001f1e:	693b      	ldr	r3, [r7, #16]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HR_heartMonitor_addGreen>:
 * @param array        Pointer to the green channel data array.
 * @param array_size   Size of the green channel data array.
 * @return None.
 */
void HR_heartMonitor_addGreen(HR_HeartMonitor *heartMonitor, float *array,
		int array_size) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
	HR_greenPreprocess_process(heartMonitor->greenPreprocess, array,
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff7b 	bl	8001e38 <HR_greenPreprocess_process>
			array_size);
	if (array_size >= heartMonitor->size) {
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	db0f      	blt.n	8001f6c <HR_heartMonitor_addGreen+0x44>
		memcpy(heartMonitor->green, &array[array_size - heartMonitor->size],
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6898      	ldr	r0, [r3, #8]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	18d1      	adds	r1, r2, r3
				heartMonitor->size * sizeof(float));
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
		memcpy(heartMonitor->green, &array[array_size - heartMonitor->size],
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	461a      	mov	r2, r3
 8001f66:	f00b f88b 	bl	800d080 <memcpy>
				(heartMonitor->size - array_size) * sizeof(float));
		memmove(&heartMonitor->green[heartMonitor->size - array_size], array,
				array_size * sizeof(float));
	}

}
 8001f6a:	e01c      	b.n	8001fa6 <HR_heartMonitor_addGreen+0x7e>
		memmove(heartMonitor->green, &heartMonitor->green[array_size],
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6898      	ldr	r0, [r3, #8]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	18d1      	adds	r1, r2, r3
				(heartMonitor->size - array_size) * sizeof(float));
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	1ad3      	subs	r3, r2, r3
		memmove(heartMonitor->green, &heartMonitor->green[array_size],
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	461a      	mov	r2, r3
 8001f86:	f00b f889 	bl	800d09c <memmove>
		memmove(&heartMonitor->green[heartMonitor->size - array_size], array,
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	1acb      	subs	r3, r1, r3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	18d0      	adds	r0, r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	f00b f87b 	bl	800d09c <memmove>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HR_heartMonitor_addRedIr>:
 * @param array_ir     Pointer to the infrared channel data array.
 * @param array_size   Size of the red and infrared channel data arrays.
 * @return None.
 */
void HR_heartMonitor_addRedIr(HR_HeartMonitor *heartMonitor, float *array_red,
		float *array_ir, int array_size) {
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	603b      	str	r3, [r7, #0]
	if (array_size >= heartMonitor->size) {
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	db1e      	blt.n	8002004 <HR_heartMonitor_addRedIr+0x56>
		memcpy(heartMonitor->red, &array_red[array_size - heartMonitor->size],
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	68d8      	ldr	r0, [r3, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	18d1      	adds	r1, r2, r3
				heartMonitor->size * sizeof(float));
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
		memcpy(heartMonitor->red, &array_red[array_size - heartMonitor->size],
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f00b f84e 	bl	800d080 <memcpy>
		memcpy(heartMonitor->ir, &array_ir[array_size - heartMonitor->size],
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6918      	ldr	r0, [r3, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	18d1      	adds	r1, r2, r3
				heartMonitor->size * sizeof(float));
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
		memcpy(heartMonitor->ir, &array_ir[array_size - heartMonitor->size],
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f00b f83f 	bl	800d080 <memcpy>
		memmove(heartMonitor->ir, &heartMonitor->ir[array_size],
				(heartMonitor->size - array_size) * sizeof(float));
		memcpy(&heartMonitor->ir[heartMonitor->size - array_size], array_ir,
				array_size * sizeof(float));
	}
}
 8002002:	e039      	b.n	8002078 <HR_heartMonitor_addRedIr+0xca>
		memmove(heartMonitor->red, &heartMonitor->red[array_size],
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	68d8      	ldr	r0, [r3, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	18d1      	adds	r1, r2, r3
				(heartMonitor->size - array_size) * sizeof(float));
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	1ad3      	subs	r3, r2, r3
		memmove(heartMonitor->red, &heartMonitor->red[array_size],
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	461a      	mov	r2, r3
 800201e:	f00b f83d 	bl	800d09c <memmove>
		memcpy(&heartMonitor->red[heartMonitor->size - array_size], array_red,
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	1acb      	subs	r3, r1, r3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	18d0      	adds	r0, r2, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	461a      	mov	r2, r3
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	f00b f821 	bl	800d080 <memcpy>
		memmove(heartMonitor->ir, &heartMonitor->ir[array_size],
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6918      	ldr	r0, [r3, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	18d1      	adds	r1, r2, r3
				(heartMonitor->size - array_size) * sizeof(float));
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	1ad3      	subs	r3, r2, r3
		memmove(heartMonitor->ir, &heartMonitor->ir[array_size],
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	461a      	mov	r2, r3
 8002058:	f00b f820 	bl	800d09c <memmove>
		memcpy(&heartMonitor->ir[heartMonitor->size - array_size], array_ir,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	1acb      	subs	r3, r1, r3
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	18d0      	adds	r0, r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	461a      	mov	r2, r3
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f00b f804 	bl	800d080 <memcpy>
}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HR_heartMonitor_peaksFromGreen>:
 * applies peak detection and normalization algorithms to the green channel data array.
 *
 * @param heartMonitor Pointer to the HR_HeartMonitor structure.
 * @return None.
 */
void HR_heartMonitor_peaksFromGreen(HR_HeartMonitor *heartMonitor) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	peaks_detect(heartMonitor->green, heartMonitor->peaks, heartMonitor->size,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6898      	ldr	r0, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6959      	ldr	r1, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f000 fab0 	bl	80025fc <peaks_detect>
			heartMonitor->threshold);
	peaks_normalize(heartMonitor->green, heartMonitor->peaks,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6898      	ldr	r0, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6959      	ldr	r1, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f000 fa10 	bl	80024ce <peaks_normalize>
			heartMonitor->size);
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HR_heartMonitor_heartRateFromPeaks>:
 * It indexes the peaks, calculates the heart rate using the indexed peaks, and returns the result.
 *
 * @param heartMonitor Pointer to the HR_HeartMonitor structure.
 * @return Heart rate calculated from the detected peaks.
 */
float HR_heartMonitor_heartRateFromPeaks(HR_HeartMonitor *heartMonitor) {
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
	int indexed_size = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
	int *signals_indexed = peaks_indexingSize(heartMonitor->peaks,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6958      	ldr	r0, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f107 020c 	add.w	r2, r7, #12
 80020ce:	4619      	mov	r1, r3
 80020d0:	f000 fae8 	bl	80026a4 <peaks_indexingSize>
 80020d4:	6178      	str	r0, [r7, #20]
			heartMonitor->size, &indexed_size);

	float result = HR_heartMonitor_heartRateFromIndexedPeaks(heartMonitor,
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	461a      	mov	r2, r3
 80020da:	6979      	ldr	r1, [r7, #20]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f809 	bl	80020f4 <HR_heartMonitor_heartRateFromIndexedPeaks>
 80020e2:	6138      	str	r0, [r7, #16]
			signals_indexed, indexed_size);

	free(signals_indexed);
 80020e4:	6978      	ldr	r0, [r7, #20]
 80020e6:	f00a ffc3 	bl	800d070 <free>
	return result;
 80020ea:	693b      	ldr	r3, [r7, #16]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HR_heartMonitor_heartRateFromIndexedPeaks>:
 * @param peaks        Pointer to the array of indexed peaks.
 * @param peaks_size   Size of the array of indexed peaks.
 * @return Heart rate calculated from the indexed peaks.
 */
float HR_heartMonitor_heartRateFromIndexedPeaks(HR_HeartMonitor *heartMonitor,
		int *peaks, int peaks_size) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
	int pointer = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
	int count = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
	int sum = 0.0;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
	while (pointer < peaks_size - 1) {
 800210c:	e014      	b.n	8002138 <HR_heartMonitor_heartRateFromIndexedPeaks+0x44>
		sum += (peaks[pointer + 1] - peaks[pointer]);
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	4413      	add	r3, r2
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	440b      	add	r3, r1
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4413      	add	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
		count++;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	3301      	adds	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
		pointer++;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3301      	adds	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
	while (pointer < peaks_size - 1) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	429a      	cmp	r2, r3
 8002140:	dbe5      	blt.n	800210e <HR_heartMonitor_heartRateFromIndexedPeaks+0x1a>
	}

	if (count == 0) {
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HR_heartMonitor_heartRateFromIndexedPeaks+0x58>
		return nanf("");
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HR_heartMonitor_heartRateFromIndexedPeaks+0x88>)
 800214a:	e013      	b.n	8002174 <HR_heartMonitor_heartRateFromIndexedPeaks+0x80>
	} else {
		return 60.0 / ((sum / count) / heartMonitor->freq);
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	fb92 f3f3 	sdiv	r3, r2, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fda1 	bl	8000c9c <__aeabi_i2f>
 800215a:	4602      	mov	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f7fe fea2 	bl	8000eac <__aeabi_fdiv>
 8002168:	4603      	mov	r3, r0
 800216a:	4619      	mov	r1, r3
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <HR_heartMonitor_heartRateFromIndexedPeaks+0x8c>)
 800216e:	f7fe fe9d 	bl	8000eac <__aeabi_fdiv>
 8002172:	4603      	mov	r3, r0
	}
}
 8002174:	4618      	mov	r0, r3
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	7fc00000 	.word	0x7fc00000
 8002180:	42700000 	.word	0x42700000

08002184 <HR_heartMonitor_ratioFromIndexedPeaks>:
 * @param peaks        Pointer to the array of indexed peaks.
 * @param peaks_size   Size of the array of indexed peaks.
 * @return Ratio calculated from the indexed peaks.
 */
float HR_heartMonitor_ratioFromIndexedPeaks(HR_HeartMonitor *heartMonitor,
		int *peaks, int peaks_size) {
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b094      	sub	sp, #80	; 0x50
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
	if (peaks_size < 2) {
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	dc01      	bgt.n	800219a <HR_heartMonitor_ratioFromIndexedPeaks+0x16>
		return nanf("");
 8002196:	4b83      	ldr	r3, [pc, #524]	; (80023a4 <HR_heartMonitor_ratioFromIndexedPeaks+0x220>)
 8002198:	e176      	b.n	8002488 <HR_heartMonitor_ratioFromIndexedPeaks+0x304>
	}
	int *mins = (int*) malloc((peaks_size - 1) * sizeof(int));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3b01      	subs	r3, #1
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f00a ff5d 	bl	800d060 <malloc>
 80021a6:	4603      	mov	r3, r0
 80021a8:	623b      	str	r3, [r7, #32]
	int *maxs = (int*) malloc((peaks_size - 2) * sizeof(int));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3b02      	subs	r3, #2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f00a ff55 	bl	800d060 <malloc>
 80021b6:	4603      	mov	r3, r0
 80021b8:	61fb      	str	r3, [r7, #28]
	// MA_process(heartMonitor->ma_red, heartMonitor->red, heartMonitor->size);
	// MA_process(heartMonitor->ma_ir, heartMonitor->ir, heartMonitor->size);

	// RED
	// find mins
	for (int i = 0; i < peaks_size - 1; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021be:	e018      	b.n	80021f2 <HR_heartMonitor_ratioFromIndexedPeaks+0x6e>
		mins[i] = findMinIndex(heartMonitor->red, peaks[i], peaks[i + 1]);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68d8      	ldr	r0, [r3, #12]
 80021c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	4413      	add	r3, r2
 80021cc:	6819      	ldr	r1, [r3, #0]
 80021ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d0:	3301      	adds	r3, #1
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	4413      	add	r3, r2
 80021d8:	681d      	ldr	r5, [r3, #0]
 80021da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	18d4      	adds	r4, r2, r3
 80021e2:	462a      	mov	r2, r5
 80021e4:	f000 ff78 	bl	80030d8 <findMinIndex>
 80021e8:	4603      	mov	r3, r0
 80021ea:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < peaks_size - 1; i++) {
 80021ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ee:	3301      	adds	r3, #1
 80021f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dbe1      	blt.n	80021c0 <HR_heartMonitor_ratioFromIndexedPeaks+0x3c>
	}

	// find maxs between mins
	for (int i = 0; i < peaks_size - 2; i++) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002200:	e018      	b.n	8002234 <HR_heartMonitor_ratioFromIndexedPeaks+0xb0>
		maxs[i] = findMaxIndex(heartMonitor->red, mins[i], mins[i + 1]);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	68d8      	ldr	r0, [r3, #12]
 8002206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	6a3a      	ldr	r2, [r7, #32]
 800220c:	4413      	add	r3, r2
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002212:	3301      	adds	r3, #1
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	6a3a      	ldr	r2, [r7, #32]
 8002218:	4413      	add	r3, r2
 800221a:	681d      	ldr	r5, [r3, #0]
 800221c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	18d4      	adds	r4, r2, r3
 8002224:	462a      	mov	r2, r5
 8002226:	f000 ff2e 	bl	8003086 <findMaxIndex>
 800222a:	4603      	mov	r3, r0
 800222c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < peaks_size - 2; i++) {
 800222e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002230:	3301      	adds	r3, #1
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b02      	subs	r3, #2
 8002238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800223a:	429a      	cmp	r2, r3
 800223c:	dbe1      	blt.n	8002202 <HR_heartMonitor_ratioFromIndexedPeaks+0x7e>

	}
	// calculate ratio
	float AC_red = 0.0;
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	647b      	str	r3, [r7, #68]	; 0x44
	float DC_red = 0.0;
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	643b      	str	r3, [r7, #64]	; 0x40
	int count = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 0; i < peaks_size - 2; i++) {
 800224e:	2300      	movs	r3, #0
 8002250:	63bb      	str	r3, [r7, #56]	; 0x38
 8002252:	e040      	b.n	80022d6 <HR_heartMonitor_ratioFromIndexedPeaks+0x152>
		count++;
 8002254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002256:	3301      	adds	r3, #1
 8002258:	63fb      	str	r3, [r7, #60]	; 0x3c
		float DC_now = (heartMonitor->red[mins[i]]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	6a39      	ldr	r1, [r7, #32]
 8002264:	440b      	add	r3, r1
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	6818      	ldr	r0, [r3, #0]
				+ heartMonitor->red[mins[i + 1]]) / 2;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002274:	3301      	adds	r3, #1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	6a39      	ldr	r1, [r7, #32]
 800227a:	440b      	add	r3, r1
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fc55 	bl	8000b34 <__addsf3>
 800228a:	4603      	mov	r3, r0
		float DC_now = (heartMonitor->red[mins[i]]
 800228c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fe0b 	bl	8000eac <__aeabi_fdiv>
 8002296:	4603      	mov	r3, r0
 8002298:	617b      	str	r3, [r7, #20]
		AC_red += (heartMonitor->red[maxs[i]] - DC_now);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	69f9      	ldr	r1, [r7, #28]
 80022a4:	440b      	add	r3, r1
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6979      	ldr	r1, [r7, #20]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fc3d 	bl	8000b30 <__aeabi_fsub>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4619      	mov	r1, r3
 80022ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80022bc:	f7fe fc3a 	bl	8000b34 <__addsf3>
 80022c0:	4603      	mov	r3, r0
 80022c2:	647b      	str	r3, [r7, #68]	; 0x44
		DC_red += DC_now;
 80022c4:	6979      	ldr	r1, [r7, #20]
 80022c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80022c8:	f7fe fc34 	bl	8000b34 <__addsf3>
 80022cc:	4603      	mov	r3, r0
 80022ce:	643b      	str	r3, [r7, #64]	; 0x40
	for (int i = 0; i < peaks_size - 2; i++) {
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	3301      	adds	r3, #1
 80022d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3b02      	subs	r3, #2
 80022da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbb9      	blt.n	8002254 <HR_heartMonitor_ratioFromIndexedPeaks+0xd0>
	}

	AC_red = AC_red / count;
 80022e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80022e2:	f7fe fcdb 	bl	8000c9c <__aeabi_i2f>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4619      	mov	r1, r3
 80022ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80022ec:	f7fe fdde 	bl	8000eac <__aeabi_fdiv>
 80022f0:	4603      	mov	r3, r0
 80022f2:	647b      	str	r3, [r7, #68]	; 0x44
	DC_red = DC_red / count;
 80022f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80022f6:	f7fe fcd1 	bl	8000c9c <__aeabi_i2f>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4619      	mov	r1, r3
 80022fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002300:	f7fe fdd4 	bl	8000eac <__aeabi_fdiv>
 8002304:	4603      	mov	r3, r0
 8002306:	643b      	str	r3, [r7, #64]	; 0x40

	// IR
	for (int i = 0; i < peaks_size - 1; i++) {
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
 800230c:	e018      	b.n	8002340 <HR_heartMonitor_ratioFromIndexedPeaks+0x1bc>
		mins[i] = findMinIndex(heartMonitor->ir, peaks[i], peaks[i + 1]);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6918      	ldr	r0, [r3, #16]
 8002312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4413      	add	r3, r2
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231e:	3301      	adds	r3, #1
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	4413      	add	r3, r2
 8002326:	681d      	ldr	r5, [r3, #0]
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	18d4      	adds	r4, r2, r3
 8002330:	462a      	mov	r2, r5
 8002332:	f000 fed1 	bl	80030d8 <findMinIndex>
 8002336:	4603      	mov	r3, r0
 8002338:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < peaks_size - 1; i++) {
 800233a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233c:	3301      	adds	r3, #1
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002346:	429a      	cmp	r2, r3
 8002348:	dbe1      	blt.n	800230e <HR_heartMonitor_ratioFromIndexedPeaks+0x18a>
	}
	// find maxs between mins
	for (int i = 0; i < peaks_size - 2; i++) {
 800234a:	2300      	movs	r3, #0
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
 800234e:	e018      	b.n	8002382 <HR_heartMonitor_ratioFromIndexedPeaks+0x1fe>
		maxs[i] = findMaxIndex(heartMonitor->ir, mins[i], mins[i + 1]);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6918      	ldr	r0, [r3, #16]
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	6a3a      	ldr	r2, [r7, #32]
 800235a:	4413      	add	r3, r2
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	3301      	adds	r3, #1
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	6a3a      	ldr	r2, [r7, #32]
 8002366:	4413      	add	r3, r2
 8002368:	681d      	ldr	r5, [r3, #0]
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	18d4      	adds	r4, r2, r3
 8002372:	462a      	mov	r2, r5
 8002374:	f000 fe87 	bl	8003086 <findMaxIndex>
 8002378:	4603      	mov	r3, r0
 800237a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < peaks_size - 2; i++) {
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	3301      	adds	r3, #1
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3b02      	subs	r3, #2
 8002386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002388:	429a      	cmp	r2, r3
 800238a:	dbe1      	blt.n	8002350 <HR_heartMonitor_ratioFromIndexedPeaks+0x1cc>
	}
	// calculate ratio
	float AC_ir = 0.0;
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
	float DC_ir = 0.0;
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
	count = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (int i = 0; i < peaks_size - 2; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	e043      	b.n	800242a <HR_heartMonitor_ratioFromIndexedPeaks+0x2a6>
 80023a2:	bf00      	nop
 80023a4:	7fc00000 	.word	0x7fc00000
		count++;
 80023a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023aa:	3301      	adds	r3, #1
 80023ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		float DC_now = (heartMonitor->ir[mins[i]]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	6a39      	ldr	r1, [r7, #32]
 80023b8:	440b      	add	r3, r1
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	6818      	ldr	r0, [r3, #0]
				+ heartMonitor->ir[mins[i + 1]]) / 2;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	3301      	adds	r3, #1
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	6a39      	ldr	r1, [r7, #32]
 80023ce:	440b      	add	r3, r1
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fbab 	bl	8000b34 <__addsf3>
 80023de:	4603      	mov	r3, r0
		float DC_now = (heartMonitor->ir[mins[i]]
 80023e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fd61 	bl	8000eac <__aeabi_fdiv>
 80023ea:	4603      	mov	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]
		AC_ir += heartMonitor->ir[maxs[i]] - DC_now;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	69f9      	ldr	r1, [r7, #28]
 80023f8:	440b      	add	r3, r1
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69b9      	ldr	r1, [r7, #24]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fb93 	bl	8000b30 <__aeabi_fsub>
 800240a:	4603      	mov	r3, r0
 800240c:	4619      	mov	r1, r3
 800240e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002410:	f7fe fb90 	bl	8000b34 <__addsf3>
 8002414:	4603      	mov	r3, r0
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
		DC_ir += DC_now;
 8002418:	69b9      	ldr	r1, [r7, #24]
 800241a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800241c:	f7fe fb8a 	bl	8000b34 <__addsf3>
 8002420:	4603      	mov	r3, r0
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i = 0; i < peaks_size - 2; i++) {
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	3301      	adds	r3, #1
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3b02      	subs	r3, #2
 800242e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002430:	429a      	cmp	r2, r3
 8002432:	dbb9      	blt.n	80023a8 <HR_heartMonitor_ratioFromIndexedPeaks+0x224>
	}
	AC_ir = AC_ir / count;
 8002434:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002436:	f7fe fc31 	bl	8000c9c <__aeabi_i2f>
 800243a:	4603      	mov	r3, r0
 800243c:	4619      	mov	r1, r3
 800243e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002440:	f7fe fd34 	bl	8000eac <__aeabi_fdiv>
 8002444:	4603      	mov	r3, r0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
	DC_ir = DC_ir / count;
 8002448:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800244a:	f7fe fc27 	bl	8000c9c <__aeabi_i2f>
 800244e:	4603      	mov	r3, r0
 8002450:	4619      	mov	r1, r3
 8002452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002454:	f7fe fd2a 	bl	8000eac <__aeabi_fdiv>
 8002458:	4603      	mov	r3, r0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28

	free(maxs);
 800245c:	69f8      	ldr	r0, [r7, #28]
 800245e:	f00a fe07 	bl	800d070 <free>
	free(mins);
 8002462:	6a38      	ldr	r0, [r7, #32]
 8002464:	f00a fe04 	bl	800d070 <free>
	return (AC_red / DC_red) / (AC_ir / DC_ir);
 8002468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800246a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800246c:	f7fe fd1e 	bl	8000eac <__aeabi_fdiv>
 8002470:	4603      	mov	r3, r0
 8002472:	461c      	mov	r4, r3
 8002474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002476:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002478:	f7fe fd18 	bl	8000eac <__aeabi_fdiv>
 800247c:	4603      	mov	r3, r0
 800247e:	4619      	mov	r1, r3
 8002480:	4620      	mov	r0, r4
 8002482:	f7fe fd13 	bl	8000eac <__aeabi_fdiv>
 8002486:	4603      	mov	r3, r0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3750      	adds	r7, #80	; 0x50
 800248c:	46bd      	mov	sp, r7
 800248e:	bdb0      	pop	{r4, r5, r7, pc}

08002490 <HR_heartMonitor_ratioFromPeaks>:
 * indexed peaks array and returns the calculated ratio.
 *
 * @param heartMonitor Pointer to the HR_HeartMonitor structure.
 * @return Ratio calculated from the peaks.
 */
float HR_heartMonitor_ratioFromPeaks(HR_HeartMonitor *heartMonitor) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

	int peaks_size = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
	int *peaks = peaks_indexingSize(heartMonitor->peaks, heartMonitor->size,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6958      	ldr	r0, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f107 020c 	add.w	r2, r7, #12
 80024a8:	4619      	mov	r1, r3
 80024aa:	f000 f8fb 	bl	80026a4 <peaks_indexingSize>
 80024ae:	6178      	str	r0, [r7, #20]
			&peaks_size);
	float result = HR_heartMonitor_ratioFromIndexedPeaks(heartMonitor, peaks,
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	461a      	mov	r2, r3
 80024b4:	6979      	ldr	r1, [r7, #20]
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff fe64 	bl	8002184 <HR_heartMonitor_ratioFromIndexedPeaks>
 80024bc:	6138      	str	r0, [r7, #16]
			peaks_size);
	free(peaks);
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f00a fdd6 	bl	800d070 <free>
	return result;
 80024c4:	693b      	ldr	r3, [r7, #16]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <peaks_normalize>:
 * @param array_size The size of the array.
 *
 * @note The 'array' and 'signals' arrays should have a size of at least 'array_size'.
 *
 */
void peaks_normalize(float *array, int *signals, int array_size) {
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b08c      	sub	sp, #48	; 0x30
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
	int start = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 1; i < array_size; i++) {
 80024de:	2301      	movs	r3, #1
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e2:	e081      	b.n	80025e8 <peaks_normalize+0x11a>
		if (signals[i] == 1 && signals[i - 1] == 0) {
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	4413      	add	r3, r2
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d10b      	bne.n	800250a <peaks_normalize+0x3c>
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024f8:	3b01      	subs	r3, #1
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <peaks_normalize+0x3c>
			start = i;
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if ((signals[i] == 0 && signals[i - 1] == 1) || i == array_size - 1) {
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4413      	add	r3, r2
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <peaks_normalize+0x5e>
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800251e:	3b01      	subs	r3, #1
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	4413      	add	r3, r2
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d004      	beq.n	8002536 <peaks_normalize+0x68>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002532:	429a      	cmp	r2, r3
 8002534:	d155      	bne.n	80025e2 <peaks_normalize+0x114>

			float max = array[start];
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4413      	add	r3, r2
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
			for (int j = start + 1; j < i; j++) {
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	3301      	adds	r3, #1
 8002546:	623b      	str	r3, [r7, #32]
 8002548:	e014      	b.n	8002574 <peaks_normalize+0xa6>
				if (max < array[j]) {
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002558:	f7fe fd92 	bl	8001080 <__aeabi_fcmplt>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <peaks_normalize+0xa0>
					max = array[j];
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
			for (int j = start + 1; j < i; j++) {
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	3301      	adds	r3, #1
 8002572:	623b      	str	r3, [r7, #32]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	429a      	cmp	r2, r3
 800257a:	dbe6      	blt.n	800254a <peaks_normalize+0x7c>
				}
			}

			int peaks = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
			int count = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
			for (int j = start; j < i; j++) {
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e01b      	b.n	80025c2 <peaks_normalize+0xf4>
				signals[j] = 0;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	4413      	add	r3, r2
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
				if (array[j] >= max) {
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4413      	add	r3, r2
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025a4:	f7fe fd76 	bl	8001094 <__aeabi_fcmple>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <peaks_normalize+0xee>
					peaks += j;
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	4413      	add	r3, r2
 80025b4:	61fb      	str	r3, [r7, #28]
					count++;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61bb      	str	r3, [r7, #24]
			for (int j = start; j < i; j++) {
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3301      	adds	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	429a      	cmp	r2, r3
 80025c8:	dbdf      	blt.n	800258a <peaks_normalize+0xbc>
				}
			}
			if (count != 0) {
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <peaks_normalize+0x114>
				signals[peaks / count] = 1;
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	4413      	add	r3, r2
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < array_size; i++) {
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	3301      	adds	r3, #1
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f6ff af79 	blt.w	80024e4 <peaks_normalize+0x16>
			}
		}
	}
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	3730      	adds	r7, #48	; 0x30
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <peaks_detect>:
 *
 * @note The 'array' and 'signals' arrays should have a size of at least 'array_size'.
 *
 */
void peaks_detect(float *array, int *signals, int array_size,
		float initial_threshold) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
	float threshold = array[0];
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i < array_size; i++) {
 8002610:	2301      	movs	r3, #1
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	e014      	b.n	8002640 <peaks_detect+0x44>
		if (array[i] > threshold) {
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	69f8      	ldr	r0, [r7, #28]
 8002624:	f7fe fd2c 	bl	8001080 <__aeabi_fcmplt>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <peaks_detect+0x3e>
			threshold = array[i];
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i < array_size; i++) {
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	3301      	adds	r3, #1
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	dbe6      	blt.n	8002616 <peaks_detect+0x1a>
		}
	}
	threshold = initial_threshold * threshold;
 8002648:	6839      	ldr	r1, [r7, #0]
 800264a:	69f8      	ldr	r0, [r7, #28]
 800264c:	f7fe fb7a 	bl	8000d44 <__aeabi_fmul>
 8002650:	4603      	mov	r3, r0
 8002652:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < array_size; i++) {
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e01b      	b.n	8002692 <peaks_detect+0x96>
		if (array[i] > threshold) {
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4413      	add	r3, r2
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	69f8      	ldr	r0, [r7, #28]
 8002668:	f7fe fd0a 	bl	8001080 <__aeabi_fcmplt>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <peaks_detect+0x84>
			signals[i] = 1;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	4413      	add	r3, r2
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e005      	b.n	800268c <peaks_detect+0x90>
		} else {
			signals[i] = 0;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	4413      	add	r3, r2
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < array_size; i++) {
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	429a      	cmp	r2, r3
 8002698:	dbdf      	blt.n	800265a <peaks_detect+0x5e>
		}
	}
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <peaks_indexingSize>:
 * @return Pointer to the indexed array of peak positions.
 *
 * @note The returned indexed array should be freed using the 'free' function after use.
 *
 */
int* peaks_indexingSize(int *signals, int array_size, int *result_size) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
	int count = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < array_size; i++) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	e00c      	b.n	80026d4 <peaks_indexingSize+0x30>
		if (signals[i] == 1) {
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d102      	bne.n	80026ce <peaks_indexingSize+0x2a>
			count++;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	3301      	adds	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < array_size; i++) {
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	3301      	adds	r3, #1
 80026d2:	623b      	str	r3, [r7, #32]
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbee      	blt.n	80026ba <peaks_indexingSize+0x16>
		}
	}
	*result_size = count;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	601a      	str	r2, [r3, #0]
	int *result = (int*) malloc(count * sizeof(int));
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00a fcba 	bl	800d060 <malloc>
 80026ec:	4603      	mov	r3, r0
 80026ee:	617b      	str	r3, [r7, #20]
	int pointer = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < array_size; i++) {
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	e012      	b.n	8002720 <peaks_indexingSize+0x7c>
		if (signals[i] == 1) {
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4413      	add	r3, r2
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d108      	bne.n	800271a <peaks_indexingSize+0x76>
			result[pointer] = i;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4413      	add	r3, r2
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	601a      	str	r2, [r3, #0]
			pointer++;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	3301      	adds	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < array_size; i++) {
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3301      	adds	r3, #1
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	dbe8      	blt.n	80026fa <peaks_indexingSize+0x56>
		}
	}

	return result;
 8002728:	697b      	ldr	r3, [r7, #20]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3728      	adds	r7, #40	; 0x28
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <SSF_new>:
 * @return Pointer to the newly created SSF object.
 *
 * @note The returned SSF object should be freed using the 'SSF_free' function after use.
 *
 */
SSF* SSF_new(int window_size) {
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
	SSF *ssf = (SSF*) malloc(sizeof(SSF));
 800273a:	2008      	movs	r0, #8
 800273c:	f00a fc90 	bl	800d060 <malloc>
 8002740:	4603      	mov	r3, r0
 8002742:	60fb      	str	r3, [r7, #12]
	ssf->window_size = window_size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
	ssf->data = (float*) malloc(window_size * sizeof(float));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4618      	mov	r0, r3
 8002750:	f00a fc86 	bl	800d060 <malloc>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
	return ssf;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <SSF_process>:
 * @param ssf Pointer to the SSF object.
 * @param array Pointer to the input array.
 * @param array_size Size of the input array.
 *
 */
void SSF_process(SSF *ssf, float *array, int array_size) {
 8002766:	b580      	push	{r7, lr}
 8002768:	b08a      	sub	sp, #40	; 0x28
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < array_size; i++) {
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
 8002776:	e059      	b.n	800282c <SSF_process+0xc6>
		for (int j = 1; j < ssf->window_size; j++) {
 8002778:	2301      	movs	r3, #1
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	e011      	b.n	80027a2 <SSF_process+0x3c>
			ssf->data[j] = ssf->data[j - 1];
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002788:	3b01      	subs	r3, #1
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	441a      	add	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	601a      	str	r2, [r3, #0]
		for (int j = 1; j < ssf->window_size; j++) {
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	3301      	adds	r3, #1
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a3a      	ldr	r2, [r7, #32]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbe8      	blt.n	800277e <SSF_process+0x18>
		}
		ssf->data[0] = array[i];
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	441a      	add	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	601a      	str	r2, [r3, #0]
		float sum = 0.0;
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < ssf->window_size - 1; j++) {
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	e022      	b.n	800280e <SSF_process+0xa8>
			float delta = ssf->data[j] - ssf->data[j + 1];
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	3301      	adds	r3, #1
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe f9a4 	bl	8000b30 <__aeabi_fsub>
 80027e8:	4603      	mov	r3, r0
 80027ea:	617b      	str	r3, [r7, #20]
			if (delta >= 0) {
 80027ec:	f04f 0100 	mov.w	r1, #0
 80027f0:	6978      	ldr	r0, [r7, #20]
 80027f2:	f7fe fc59 	bl	80010a8 <__aeabi_fcmpge>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <SSF_process+0xa2>
				sum += delta;
 80027fc:	6979      	ldr	r1, [r7, #20]
 80027fe:	69f8      	ldr	r0, [r7, #28]
 8002800:	f7fe f998 	bl	8000b34 <__addsf3>
 8002804:	4603      	mov	r3, r0
 8002806:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < ssf->window_size - 1; j++) {
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	3301      	adds	r3, #1
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	429a      	cmp	r2, r3
 8002818:	dbd6      	blt.n	80027c8 <SSF_process+0x62>
			}
		}
		array[i] = sum;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	4413      	add	r3, r2
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < array_size; i++) {
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	dba1      	blt.n	8002778 <SSF_process+0x12>
	}
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3728      	adds	r7, #40	; 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <MA_new>:
 *
 * @param window_size The size of the moving average window.
 * @return Pointer to the newly created MA_filter object.
 *
 */
MA_filter* MA_new(int window_size) {
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	MA_filter *filter = malloc(sizeof(MA_filter));
 8002846:	2008      	movs	r0, #8
 8002848:	f00a fc0a 	bl	800d060 <malloc>
 800284c:	4603      	mov	r3, r0
 800284e:	60fb      	str	r3, [r7, #12]
	filter->window_size = window_size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
	filter->data = calloc(window_size - 1, sizeof(float));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3b01      	subs	r3, #1
 800285a:	2104      	movs	r1, #4
 800285c:	4618      	mov	r0, r3
 800285e:	f00a fbcd 	bl	800cffc <calloc>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]
	return filter;
 800286a:	68fb      	ldr	r3, [r7, #12]

}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <MA_process>:
 * @param filter Pointer to the MA_filter object.
 * @param array  Pointer to the array of values to be filtered.
 * @param array_size The size of the array.
 *
 */
void MA_process(MA_filter *filter, float *array, int array_size) {
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < array_size; i++) {
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	e04d      	b.n	8002922 <MA_process+0xae>
		for (int j = filter->window_size - 1; j > 0; j--) {
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3b01      	subs	r3, #1
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	e011      	b.n	80028b4 <MA_process+0x40>
			filter->data[j] = filter->data[j - 1];
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800289a:	3b01      	subs	r3, #1
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	601a      	str	r2, [r3, #0]
		for (int j = filter->window_size - 1; j > 0; j--) {
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	dcea      	bgt.n	8002890 <MA_process+0x1c>
		}
		filter->data[0] = array[i];
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	441a      	add	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	601a      	str	r2, [r3, #0]
		float sum = 0.0;
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < filter->window_size; j++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e00e      	b.n	80028f4 <MA_process+0x80>
			sum += filter->data[j];
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	6978      	ldr	r0, [r7, #20]
 80028e6:	f7fe f925 	bl	8000b34 <__addsf3>
 80028ea:	4603      	mov	r3, r0
 80028ec:	617b      	str	r3, [r7, #20]
		for (int j = 0; j < filter->window_size; j++) {
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	3301      	adds	r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	dbeb      	blt.n	80028d6 <MA_process+0x62>
		}
		array[i] = sum / filter->window_size;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe f9ca 	bl	8000c9c <__aeabi_i2f>
 8002908:	4601      	mov	r1, r0
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	18d4      	adds	r4, r2, r3
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7fe faca 	bl	8000eac <__aeabi_fdiv>
 8002918:	4603      	mov	r3, r0
 800291a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < array_size; i++) {
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	3301      	adds	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	dbad      	blt.n	8002886 <MA_process+0x12>
	}
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	3724      	adds	r7, #36	; 0x24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	0000      	movs	r0, r0
	...

08002938 <BPF_new>:
 * @param low The lower cutoff frequency.
 * @param high The higher cutoff frequency.
 *
 * @return Pointer to the newly created BPF_filter object.
 */
BPF_filter* BPF_new(int order, float freq, float low, float high) {
 8002938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800293c:	b08b      	sub	sp, #44	; 0x2c
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
	BPF_filter *bpf_filter = (BPF_filter*) malloc(sizeof(BPF_filter));
 8002948:	2038      	movs	r0, #56	; 0x38
 800294a:	f00a fb89 	bl	800d060 <malloc>
 800294e:	4603      	mov	r3, r0
 8002950:	623b      	str	r3, [r7, #32]

	bpf_filter->n = order;
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	601a      	str	r2, [r3, #0]
	bpf_filter->freq = freq;
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	605a      	str	r2, [r3, #4]
	bpf_filter->freq_low = low;
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	609a      	str	r2, [r3, #8]
	bpf_filter->freq_high = high;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	60da      	str	r2, [r3, #12]

	float a, b, r;
	a = cosf(M_PI * (high + low) / freq) / cosf(M_PI * (high - low) / freq);
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	6838      	ldr	r0, [r7, #0]
 800296e:	f7fe f8e1 	bl	8000b34 <__addsf3>
 8002972:	4603      	mov	r3, r0
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fd57 	bl	8000428 <__aeabi_f2d>
 800297a:	a36f      	add	r3, pc, #444	; (adr r3, 8002b38 <BPF_new+0x200>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fdaa 	bl	80004d8 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4690      	mov	r8, r2
 800298a:	4699      	mov	r9, r3
 800298c:	68b8      	ldr	r0, [r7, #8]
 800298e:	f7fd fd4b 	bl	8000428 <__aeabi_f2d>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4640      	mov	r0, r8
 8002998:	4649      	mov	r1, r9
 800299a:	f7fd fec7 	bl	800072c <__aeabi_ddiv>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	f7fe f86f 	bl	8000a88 <__aeabi_d2f>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00d facf 	bl	800ff50 <cosf>
 80029b2:	4606      	mov	r6, r0
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	6838      	ldr	r0, [r7, #0]
 80029b8:	f7fe f8ba 	bl	8000b30 <__aeabi_fsub>
 80029bc:	4603      	mov	r3, r0
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fd32 	bl	8000428 <__aeabi_f2d>
 80029c4:	a35c      	add	r3, pc, #368	; (adr r3, 8002b38 <BPF_new+0x200>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f7fd fd85 	bl	80004d8 <__aeabi_dmul>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4690      	mov	r8, r2
 80029d4:	4699      	mov	r9, r3
 80029d6:	68b8      	ldr	r0, [r7, #8]
 80029d8:	f7fd fd26 	bl	8000428 <__aeabi_f2d>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4640      	mov	r0, r8
 80029e2:	4649      	mov	r1, r9
 80029e4:	f7fd fea2 	bl	800072c <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7fe f84a 	bl	8000a88 <__aeabi_d2f>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f00d faaa 	bl	800ff50 <cosf>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4619      	mov	r1, r3
 8002a00:	4630      	mov	r0, r6
 8002a02:	f7fe fa53 	bl	8000eac <__aeabi_fdiv>
 8002a06:	4603      	mov	r3, r0
 8002a08:	61fb      	str	r3, [r7, #28]
	b = tanf(M_PI * (high - low) / freq);
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	6838      	ldr	r0, [r7, #0]
 8002a0e:	f7fe f88f 	bl	8000b30 <__aeabi_fsub>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd07 	bl	8000428 <__aeabi_f2d>
 8002a1a:	a347      	add	r3, pc, #284	; (adr r3, 8002b38 <BPF_new+0x200>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f7fd fd5a 	bl	80004d8 <__aeabi_dmul>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4690      	mov	r8, r2
 8002a2a:	4699      	mov	r9, r3
 8002a2c:	68b8      	ldr	r0, [r7, #8]
 8002a2e:	f7fd fcfb 	bl	8000428 <__aeabi_f2d>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4640      	mov	r0, r8
 8002a38:	4649      	mov	r1, r9
 8002a3a:	f7fd fe77 	bl	800072c <__aeabi_ddiv>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	f7fe f81f 	bl	8000a88 <__aeabi_d2f>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f00d faf1 	bl	8010034 <tanf>
 8002a52:	61b8      	str	r0, [r7, #24]

	bpf_filter->n = bpf_filter->n / 2;
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0fda      	lsrs	r2, r3, #31
 8002a5a:	4413      	add	r3, r2
 8002a5c:	105b      	asrs	r3, r3, #1
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	601a      	str	r2, [r3, #0]
	bpf_filter->A = (float*) malloc(bpf_filter->n * sizeof(float));
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f00a faf8 	bl	800d060 <malloc>
 8002a70:	4603      	mov	r3, r0
 8002a72:	461a      	mov	r2, r3
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	611a      	str	r2, [r3, #16]
	bpf_filter->d1 = (float*) malloc(bpf_filter->n * sizeof(float));
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f00a faee 	bl	800d060 <malloc>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	615a      	str	r2, [r3, #20]
	bpf_filter->d2 = (float*) malloc(bpf_filter->n * sizeof(float));
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f00a fae4 	bl	800d060 <malloc>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	619a      	str	r2, [r3, #24]
	bpf_filter->d3 = (float*) malloc(bpf_filter->n * sizeof(float));
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f00a fada 	bl	800d060 <malloc>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	61da      	str	r2, [r3, #28]
	bpf_filter->d4 = (float*) malloc(bpf_filter->n * sizeof(float));
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f00a fad0 	bl	800d060 <malloc>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	621a      	str	r2, [r3, #32]

	bpf_filter->w0 = (float*) calloc(bpf_filter->n, sizeof(float));
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2104      	movs	r1, #4
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f00a fa94 	bl	800cffc <calloc>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
	bpf_filter->w1 = (float*) calloc(bpf_filter->n, sizeof(float));
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f00a fa8a 	bl	800cffc <calloc>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
	bpf_filter->w2 = (float*) calloc(bpf_filter->n, sizeof(float));
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2104      	movs	r1, #4
 8002af6:	4618      	mov	r0, r3
 8002af8:	f00a fa80 	bl	800cffc <calloc>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
	bpf_filter->w3 = (float*) calloc(bpf_filter->n, sizeof(float));
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2104      	movs	r1, #4
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00a fa76 	bl	800cffc <calloc>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
	bpf_filter->w4 = (float*) calloc(bpf_filter->n, sizeof(float));
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f00a fa6c 	bl	800cffc <calloc>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	635a      	str	r2, [r3, #52]	; 0x34

	for (int i = 0; i < bpf_filter->n; ++i) {
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b30:	e191      	b.n	8002e56 <BPF_new+0x51e>
 8002b32:	bf00      	nop
 8002b34:	f3af 8000 	nop.w
 8002b38:	54442d18 	.word	0x54442d18
 8002b3c:	400921fb 	.word	0x400921fb
		r = sinf(M_PI * (2.0 * i + 1.0) / (4.0 * bpf_filter->n));
 8002b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b42:	f7fd fc5f 	bl	8000404 <__aeabi_i2d>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	f7fd fb0f 	bl	800016c <__adddf3>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	4bc7      	ldr	r3, [pc, #796]	; (8002e78 <BPF_new+0x540>)
 8002b5c:	f7fd fb06 	bl	800016c <__adddf3>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	a3c1      	add	r3, pc, #772	; (adr r3, 8002e70 <BPF_new+0x538>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd fcb3 	bl	80004d8 <__aeabi_dmul>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4690      	mov	r8, r2
 8002b78:	4699      	mov	r9, r3
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fc40 	bl	8000404 <__aeabi_i2d>
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	4bbc      	ldr	r3, [pc, #752]	; (8002e7c <BPF_new+0x544>)
 8002b8a:	f7fd fca5 	bl	80004d8 <__aeabi_dmul>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4640      	mov	r0, r8
 8002b94:	4649      	mov	r1, r9
 8002b96:	f7fd fdc9 	bl	800072c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7fd ff71 	bl	8000a88 <__aeabi_d2f>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f00d fa09 	bl	800ffc0 <sinf>
 8002bae:	6178      	str	r0, [r7, #20]
		freq = b * b + 2.0 * b * r + 1.0;
 8002bb0:	69b9      	ldr	r1, [r7, #24]
 8002bb2:	69b8      	ldr	r0, [r7, #24]
 8002bb4:	f7fe f8c6 	bl	8000d44 <__aeabi_fmul>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fc34 	bl	8000428 <__aeabi_f2d>
 8002bc0:	4680      	mov	r8, r0
 8002bc2:	4689      	mov	r9, r1
 8002bc4:	69b8      	ldr	r0, [r7, #24]
 8002bc6:	f7fd fc2f 	bl	8000428 <__aeabi_f2d>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	f7fd facd 	bl	800016c <__adddf3>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4692      	mov	sl, r2
 8002bd8:	469b      	mov	fp, r3
 8002bda:	6978      	ldr	r0, [r7, #20]
 8002bdc:	f7fd fc24 	bl	8000428 <__aeabi_f2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4650      	mov	r0, sl
 8002be6:	4659      	mov	r1, fp
 8002be8:	f7fd fc76 	bl	80004d8 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4640      	mov	r0, r8
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	f7fd faba 	bl	800016c <__adddf3>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	4b9c      	ldr	r3, [pc, #624]	; (8002e78 <BPF_new+0x540>)
 8002c06:	f7fd fab1 	bl	800016c <__adddf3>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f7fd ff39 	bl	8000a88 <__aeabi_d2f>
 8002c16:	4603      	mov	r3, r0
 8002c18:	60bb      	str	r3, [r7, #8]
		bpf_filter->A[i] = b * b / freq;
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	69b8      	ldr	r0, [r7, #24]
 8002c1e:	f7fe f891 	bl	8000d44 <__aeabi_fmul>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4618      	mov	r0, r3
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	18d6      	adds	r6, r2, r3
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	f7fe f93b 	bl	8000eac <__aeabi_fdiv>
 8002c36:	4603      	mov	r3, r0
 8002c38:	6033      	str	r3, [r6, #0]
		bpf_filter->d1[i] = 4.0 * a * (1.0 + b * r) / freq;
 8002c3a:	69f8      	ldr	r0, [r7, #28]
 8002c3c:	f7fd fbf4 	bl	8000428 <__aeabi_f2d>
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	4b8d      	ldr	r3, [pc, #564]	; (8002e7c <BPF_new+0x544>)
 8002c46:	f7fd fc47 	bl	80004d8 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4690      	mov	r8, r2
 8002c50:	4699      	mov	r9, r3
 8002c52:	6979      	ldr	r1, [r7, #20]
 8002c54:	69b8      	ldr	r0, [r7, #24]
 8002c56:	f7fe f875 	bl	8000d44 <__aeabi_fmul>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fbe3 	bl	8000428 <__aeabi_f2d>
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4b84      	ldr	r3, [pc, #528]	; (8002e78 <BPF_new+0x540>)
 8002c68:	f7fd fa80 	bl	800016c <__adddf3>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4640      	mov	r0, r8
 8002c72:	4649      	mov	r1, r9
 8002c74:	f7fd fc30 	bl	80004d8 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4690      	mov	r8, r2
 8002c7e:	4699      	mov	r9, r3
 8002c80:	68b8      	ldr	r0, [r7, #8]
 8002c82:	f7fd fbd1 	bl	8000428 <__aeabi_f2d>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4640      	mov	r0, r8
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	f7fd fd4d 	bl	800072c <__aeabi_ddiv>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	18d6      	adds	r6, r2, r3
 8002ca4:	f7fd fef0 	bl	8000a88 <__aeabi_d2f>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	6033      	str	r3, [r6, #0]
		bpf_filter->d2[i] = 2.0 * (b * b - 2.0 * a * a - 1.0) / freq;
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	69b8      	ldr	r0, [r7, #24]
 8002cb0:	f7fe f848 	bl	8000d44 <__aeabi_fmul>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fbb6 	bl	8000428 <__aeabi_f2d>
 8002cbc:	4680      	mov	r8, r0
 8002cbe:	4689      	mov	r9, r1
 8002cc0:	69f8      	ldr	r0, [r7, #28]
 8002cc2:	f7fd fbb1 	bl	8000428 <__aeabi_f2d>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	f7fd fa4f 	bl	800016c <__adddf3>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4692      	mov	sl, r2
 8002cd4:	469b      	mov	fp, r3
 8002cd6:	69f8      	ldr	r0, [r7, #28]
 8002cd8:	f7fd fba6 	bl	8000428 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4650      	mov	r0, sl
 8002ce2:	4659      	mov	r1, fp
 8002ce4:	f7fd fbf8 	bl	80004d8 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4640      	mov	r0, r8
 8002cee:	4649      	mov	r1, r9
 8002cf0:	f7fd fa3a 	bl	8000168 <__aeabi_dsub>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	4b5d      	ldr	r3, [pc, #372]	; (8002e78 <BPF_new+0x540>)
 8002d02:	f7fd fa31 	bl	8000168 <__aeabi_dsub>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	f7fd fa2b 	bl	800016c <__adddf3>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4690      	mov	r8, r2
 8002d1c:	4699      	mov	r9, r3
 8002d1e:	68b8      	ldr	r0, [r7, #8]
 8002d20:	f7fd fb82 	bl	8000428 <__aeabi_f2d>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4640      	mov	r0, r8
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	f7fd fcfe 	bl	800072c <__aeabi_ddiv>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	18d6      	adds	r6, r2, r3
 8002d42:	f7fd fea1 	bl	8000a88 <__aeabi_d2f>
 8002d46:	4603      	mov	r3, r0
 8002d48:	6033      	str	r3, [r6, #0]
		bpf_filter->d3[i] = 4.0 * a * (1.0 - b * r) / freq;
 8002d4a:	69f8      	ldr	r0, [r7, #28]
 8002d4c:	f7fd fb6c 	bl	8000428 <__aeabi_f2d>
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	4b49      	ldr	r3, [pc, #292]	; (8002e7c <BPF_new+0x544>)
 8002d56:	f7fd fbbf 	bl	80004d8 <__aeabi_dmul>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4690      	mov	r8, r2
 8002d60:	4699      	mov	r9, r3
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	69b8      	ldr	r0, [r7, #24]
 8002d66:	f7fd ffed 	bl	8000d44 <__aeabi_fmul>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fb5b 	bl	8000428 <__aeabi_f2d>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	f04f 0000 	mov.w	r0, #0
 8002d7a:	493f      	ldr	r1, [pc, #252]	; (8002e78 <BPF_new+0x540>)
 8002d7c:	f7fd f9f4 	bl	8000168 <__aeabi_dsub>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4640      	mov	r0, r8
 8002d86:	4649      	mov	r1, r9
 8002d88:	f7fd fba6 	bl	80004d8 <__aeabi_dmul>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4690      	mov	r8, r2
 8002d92:	4699      	mov	r9, r3
 8002d94:	68b8      	ldr	r0, [r7, #8]
 8002d96:	f7fd fb47 	bl	8000428 <__aeabi_f2d>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4640      	mov	r0, r8
 8002da0:	4649      	mov	r1, r9
 8002da2:	f7fd fcc3 	bl	800072c <__aeabi_ddiv>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	18d6      	adds	r6, r2, r3
 8002db8:	f7fd fe66 	bl	8000a88 <__aeabi_d2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	6033      	str	r3, [r6, #0]
		bpf_filter->d4[i] = -(b * b - 2.0 * b * r + 1.0) / freq;
 8002dc0:	69b9      	ldr	r1, [r7, #24]
 8002dc2:	69b8      	ldr	r0, [r7, #24]
 8002dc4:	f7fd ffbe 	bl	8000d44 <__aeabi_fmul>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fb2c 	bl	8000428 <__aeabi_f2d>
 8002dd0:	4680      	mov	r8, r0
 8002dd2:	4689      	mov	r9, r1
 8002dd4:	69b8      	ldr	r0, [r7, #24]
 8002dd6:	f7fd fb27 	bl	8000428 <__aeabi_f2d>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	f7fd f9c5 	bl	800016c <__adddf3>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4692      	mov	sl, r2
 8002de8:	469b      	mov	fp, r3
 8002dea:	6978      	ldr	r0, [r7, #20]
 8002dec:	f7fd fb1c 	bl	8000428 <__aeabi_f2d>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4650      	mov	r0, sl
 8002df6:	4659      	mov	r1, fp
 8002df8:	f7fd fb6e 	bl	80004d8 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4640      	mov	r0, r8
 8002e02:	4649      	mov	r1, r9
 8002e04:	f7fd f9b0 	bl	8000168 <__aeabi_dsub>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <BPF_new+0x540>)
 8002e16:	f7fd f9a9 	bl	800016c <__adddf3>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4614      	mov	r4, r2
 8002e20:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002e24:	68b8      	ldr	r0, [r7, #8]
 8002e26:	f7fd faff 	bl	8000428 <__aeabi_f2d>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd fc7b 	bl	800072c <__aeabi_ddiv>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	6a1a      	ldr	r2, [r3, #32]
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	18d6      	adds	r6, r2, r3
 8002e48:	f7fd fe1e 	bl	8000a88 <__aeabi_d2f>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	6033      	str	r3, [r6, #0]
	for (int i = 0; i < bpf_filter->n; ++i) {
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	3301      	adds	r3, #1
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	f6ff ae6f 	blt.w	8002b40 <BPF_new+0x208>
	}

	return bpf_filter;
 8002e62:	6a3b      	ldr	r3, [r7, #32]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	372c      	adds	r7, #44	; 0x2c
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e6e:	bf00      	nop
 8002e70:	54442d18 	.word	0x54442d18
 8002e74:	400921fb 	.word	0x400921fb
 8002e78:	3ff00000 	.word	0x3ff00000
 8002e7c:	40100000 	.word	0x40100000

08002e80 <BPF_process>:
 *
 * @param filter Pointer to the BPF_filter object.
 * @param array Pointer to the input array to be filtered.
 * @param array_size The size of the input array.
 */
void BPF_process(BPF_filter *filter, float *array, int array_size) {
 8002e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < array_size; i++) {
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e0ed      	b.n	8003070 <BPF_process+0x1f0>
		for (int j = 0; j < filter->n; ++j) {
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	e0e1      	b.n	800305e <BPF_process+0x1de>
			filter->w0[j] = filter->d1[j] * filter->w1[j]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	f7fd ff46 	bl	8000d44 <__aeabi_fmul>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461c      	mov	r4, r3
					+ filter->d2[j] * filter->w2[j]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f7fd ff35 	bl	8000d44 <__aeabi_fmul>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4619      	mov	r1, r3
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f7fd fe28 	bl	8000b34 <__addsf3>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	461c      	mov	r4, r3
					+ filter->d3[j] * filter->w3[j]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7fd ff1f 	bl	8000d44 <__aeabi_fmul>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7fd fe12 	bl	8000b34 <__addsf3>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461c      	mov	r4, r3
					+ filter->d4[j] * filter->w4[j] + array[i];
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f7fd ff09 	bl	8000d44 <__aeabi_fmul>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4619      	mov	r1, r3
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7fd fdfc 	bl	8000b34 <__addsf3>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	4413      	add	r3, r2
 8002f48:	6819      	ldr	r1, [r3, #0]
			filter->w0[j] = filter->d1[j] * filter->w1[j]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	18d4      	adds	r4, r2, r3
					+ filter->d4[j] * filter->w4[j] + array[i];
 8002f54:	f7fd fdee 	bl	8000b34 <__addsf3>
 8002f58:	4603      	mov	r3, r0
			filter->w0[j] = filter->d1[j] * filter->w1[j]
 8002f5a:	6023      	str	r3, [r4, #0]
			array[i] = filter->A[j]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fa5d 	bl	8000428 <__aeabi_f2d>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	460d      	mov	r5, r1
					* (filter->w0[j] - 2.0 * filter->w2[j] + filter->w4[j]);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fa52 	bl	8000428 <__aeabi_f2d>
 8002f84:	4680      	mov	r8, r0
 8002f86:	4689      	mov	r9, r1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fa47 	bl	8000428 <__aeabi_f2d>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	f7fd f8e5 	bl	800016c <__adddf3>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	4649      	mov	r1, r9
 8002faa:	f7fd f8dd 	bl	8000168 <__aeabi_dsub>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4690      	mov	r8, r2
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fa30 	bl	8000428 <__aeabi_f2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4640      	mov	r0, r8
 8002fce:	4649      	mov	r1, r9
 8002fd0:	f7fd f8cc 	bl	800016c <__adddf3>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4620      	mov	r0, r4
 8002fda:	4629      	mov	r1, r5
 8002fdc:	f7fd fa7c 	bl	80004d8 <__aeabi_dmul>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
			array[i] = filter->A[j]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	18d4      	adds	r4, r2, r3
					* (filter->w0[j] - 2.0 * filter->w2[j] + filter->w4[j]);
 8002ff0:	f7fd fd4a 	bl	8000a88 <__aeabi_d2f>
 8002ff4:	4603      	mov	r3, r0
			array[i] = filter->A[j]
 8002ff6:	6023      	str	r3, [r4, #0]
			filter->w4[j] = filter->w3[j];
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	601a      	str	r2, [r3, #0]
			filter->w3[j] = filter->w2[j];
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	441a      	add	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	601a      	str	r2, [r3, #0]
			filter->w2[j] = filter->w1[j];
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	441a      	add	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	601a      	str	r2, [r3, #0]
			filter->w1[j] = filter->w0[j];
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < filter->n; ++j) {
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	3301      	adds	r3, #1
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	f6ff af18 	blt.w	8002e9a <BPF_process+0x1a>
	for (int i = 0; i < array_size; i++) {
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3301      	adds	r3, #1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	f6ff af0d 	blt.w	8002e94 <BPF_process+0x14>
		}
	}
}
 800307a:	bf00      	nop
 800307c:	bf00      	nop
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003086 <findMaxIndex>:
 * @param array Pointer to the input array.
 * @param start The starting index of the range (inclusive).
 * @param end The ending index of the range (exclusive).
 * @return The index of the maximum value within the specified range.
 */
int findMaxIndex(float *array, int start, int end) {
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
	int index = start;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	617b      	str	r3, [r7, #20]
	for (int i = start; i < end; i++) {
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	e014      	b.n	80030c6 <findMaxIndex+0x40>
		if (array[i] > array[index]) {
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	f7fe f803 	bl	80010bc <__aeabi_fcmpgt>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <findMaxIndex+0x3a>
			index = i;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	617b      	str	r3, [r7, #20]
	for (int i = start; i < end; i++) {
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	3301      	adds	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	dbe6      	blt.n	800309c <findMaxIndex+0x16>
		}
	}
	return index;
 80030ce:	697b      	ldr	r3, [r7, #20]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <findMinIndex>:
 * @param array Pointer to the input array.
 * @param start The starting index of the range (inclusive).
 * @param end The ending index of the range (exclusive).
 * @return The index of the minimum value within the specified range.
 */
int findMinIndex(float *array, int start, int end) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
	int index = start;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	617b      	str	r3, [r7, #20]
	for (int i = start; i < end; i++) {
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	e014      	b.n	8003118 <findMinIndex+0x40>
		if (array[i] < array[index]) {
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	f7fd ffbc 	bl	8001080 <__aeabi_fcmplt>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <findMinIndex+0x3a>
			index = i;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	617b      	str	r3, [r7, #20]
	for (int i = start; i < end; i++) {
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	3301      	adds	r3, #1
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	dbe6      	blt.n	80030ee <findMinIndex+0x16>
		}
	}
	return index;
 8003120:	697b      	ldr	r3, [r7, #20]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <MX_I2C1_Init+0x50>)
 8003132:	4a13      	ldr	r2, [pc, #76]	; (8003180 <MX_I2C1_Init+0x54>)
 8003134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <MX_I2C1_Init+0x50>)
 8003138:	4a12      	ldr	r2, [pc, #72]	; (8003184 <MX_I2C1_Init+0x58>)
 800313a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <MX_I2C1_Init+0x50>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <MX_I2C1_Init+0x50>)
 8003144:	2200      	movs	r2, #0
 8003146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <MX_I2C1_Init+0x50>)
 800314a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800314e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <MX_I2C1_Init+0x50>)
 8003152:	2200      	movs	r2, #0
 8003154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <MX_I2C1_Init+0x50>)
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <MX_I2C1_Init+0x50>)
 800315e:	2200      	movs	r2, #0
 8003160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <MX_I2C1_Init+0x50>)
 8003164:	2200      	movs	r2, #0
 8003166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003168:	4804      	ldr	r0, [pc, #16]	; (800317c <MX_I2C1_Init+0x50>)
 800316a:	f003 fce9 	bl	8006b40 <HAL_I2C_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003174:	f001 fb0e 	bl	8004794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200006a4 	.word	0x200006a4
 8003180:	40005400 	.word	0x40005400
 8003184:	00061a80 	.word	0x00061a80

08003188 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0310 	add.w	r3, r7, #16
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a45      	ldr	r2, [pc, #276]	; (80032b8 <HAL_I2C_MspInit+0x130>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f040 8082 	bne.w	80032ae <HAL_I2C_MspInit+0x126>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031aa:	4b44      	ldr	r3, [pc, #272]	; (80032bc <HAL_I2C_MspInit+0x134>)
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	4a43      	ldr	r2, [pc, #268]	; (80032bc <HAL_I2C_MspInit+0x134>)
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	6193      	str	r3, [r2, #24]
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_I2C_MspInit+0x134>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031c2:	23c0      	movs	r3, #192	; 0xc0
 80031c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c6:	2312      	movs	r3, #18
 80031c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ca:	2303      	movs	r3, #3
 80031cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ce:	f107 0310 	add.w	r3, r7, #16
 80031d2:	4619      	mov	r1, r3
 80031d4:	483a      	ldr	r0, [pc, #232]	; (80032c0 <HAL_I2C_MspInit+0x138>)
 80031d6:	f003 f9ed 	bl	80065b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031da:	4b38      	ldr	r3, [pc, #224]	; (80032bc <HAL_I2C_MspInit+0x134>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4a37      	ldr	r2, [pc, #220]	; (80032bc <HAL_I2C_MspInit+0x134>)
 80031e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031e4:	61d3      	str	r3, [r2, #28]
 80031e6:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_I2C_MspInit+0x134>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80031f2:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 80031f4:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <HAL_I2C_MspInit+0x140>)
 80031f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 80031fa:	2210      	movs	r2, #16
 80031fc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003204:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800320a:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003210:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 8003212:	2200      	movs	r2, #0
 8003214:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003216:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800321c:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 800321e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003222:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003224:	4827      	ldr	r0, [pc, #156]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 8003226:	f002 fe67 	bl	8005ef8 <HAL_DMA_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8003230:	f001 fab0 	bl	8004794 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a23      	ldr	r2, [pc, #140]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
 800323a:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <HAL_I2C_MspInit+0x13c>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003240:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_I2C_MspInit+0x144>)
 8003242:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <HAL_I2C_MspInit+0x148>)
 8003244:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003246:	4b21      	ldr	r3, [pc, #132]	; (80032cc <HAL_I2C_MspInit+0x144>)
 8003248:	2200      	movs	r2, #0
 800324a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800324c:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <HAL_I2C_MspInit+0x144>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <HAL_I2C_MspInit+0x144>)
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003258:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <HAL_I2C_MspInit+0x144>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800325e:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_I2C_MspInit+0x144>)
 8003260:	2200      	movs	r2, #0
 8003262:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_I2C_MspInit+0x144>)
 8003266:	2200      	movs	r2, #0
 8003268:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800326a:	4b18      	ldr	r3, [pc, #96]	; (80032cc <HAL_I2C_MspInit+0x144>)
 800326c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003270:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003272:	4816      	ldr	r0, [pc, #88]	; (80032cc <HAL_I2C_MspInit+0x144>)
 8003274:	f002 fe40 	bl	8005ef8 <HAL_DMA_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800327e:	f001 fa89 	bl	8004794 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a11      	ldr	r2, [pc, #68]	; (80032cc <HAL_I2C_MspInit+0x144>)
 8003286:	639a      	str	r2, [r3, #56]	; 0x38
 8003288:	4a10      	ldr	r2, [pc, #64]	; (80032cc <HAL_I2C_MspInit+0x144>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2100      	movs	r1, #0
 8003292:	201f      	movs	r0, #31
 8003294:	f002 fde0 	bl	8005e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003298:	201f      	movs	r0, #31
 800329a:	f002 fe09 	bl	8005eb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	2020      	movs	r0, #32
 80032a4:	f002 fdd8 	bl	8005e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032a8:	2020      	movs	r0, #32
 80032aa:	f002 fe01 	bl	8005eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80032ae:	bf00      	nop
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40005400 	.word	0x40005400
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40010c00 	.word	0x40010c00
 80032c4:	200006f8 	.word	0x200006f8
 80032c8:	4002006c 	.word	0x4002006c
 80032cc:	2000073c 	.word	0x2000073c
 80032d0:	40020080 	.word	0x40020080

080032d4 <LED_init>:
		0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff };

void LED_init() {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80032d8:	f001 fb8a 	bl	80049f0 <ssd1306_Init>
	led_status = LED_ALL;
 80032dc:	4b02      	ldr	r3, [pc, #8]	; (80032e8 <LED_init+0x14>)
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	2000087f 	.word	0x2000087f

080032ec <LED_update>:

void LED_update(uint8_t t, uint8_t h, uint8_t o) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
 80032f6:	460b      	mov	r3, r1
 80032f8:	71bb      	strb	r3, [r7, #6]
 80032fa:	4613      	mov	r3, r2
 80032fc:	717b      	strb	r3, [r7, #5]

	ssd1306_Fill(Black);
 80032fe:	2000      	movs	r0, #0
 8003300:	f001 fbe0 	bl	8004ac4 <ssd1306_Fill>

	ssd1306_SetCursor(0, 0);
 8003304:	2100      	movs	r1, #0
 8003306:	2000      	movs	r0, #0
 8003308:	f001 fd26 	bl	8004d58 <ssd1306_SetCursor>
	ssd1306_WriteString("Temp C", Font_6x8, White);
 800330c:	4a27      	ldr	r2, [pc, #156]	; (80033ac <LED_update+0xc0>)
 800330e:	2301      	movs	r3, #1
 8003310:	ca06      	ldmia	r2, {r1, r2}
 8003312:	4827      	ldr	r0, [pc, #156]	; (80033b0 <LED_update+0xc4>)
 8003314:	f001 fcfa 	bl	8004d0c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 8003318:	210a      	movs	r1, #10
 800331a:	2000      	movs	r0, #0
 800331c:	f001 fd1c 	bl	8004d58 <ssd1306_SetCursor>
	sprintf(led_buffer, "%d", (uint8_t) t);
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	461a      	mov	r2, r3
 8003324:	4923      	ldr	r1, [pc, #140]	; (80033b4 <LED_update+0xc8>)
 8003326:	4824      	ldr	r0, [pc, #144]	; (80033b8 <LED_update+0xcc>)
 8003328:	f00a fcc8 	bl	800dcbc <siprintf>
	ssd1306_WriteString(led_buffer, Font_7x10, White);
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <LED_update+0xd0>)
 800332e:	2301      	movs	r3, #1
 8003330:	ca06      	ldmia	r2, {r1, r2}
 8003332:	4821      	ldr	r0, [pc, #132]	; (80033b8 <LED_update+0xcc>)
 8003334:	f001 fcea 	bl	8004d0c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 22);
 8003338:	2116      	movs	r1, #22
 800333a:	2000      	movs	r0, #0
 800333c:	f001 fd0c 	bl	8004d58 <ssd1306_SetCursor>
	ssd1306_WriteString("Pulse", Font_6x8, White);
 8003340:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <LED_update+0xc0>)
 8003342:	2301      	movs	r3, #1
 8003344:	ca06      	ldmia	r2, {r1, r2}
 8003346:	481e      	ldr	r0, [pc, #120]	; (80033c0 <LED_update+0xd4>)
 8003348:	f001 fce0 	bl	8004d0c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 32);
 800334c:	2120      	movs	r1, #32
 800334e:	2000      	movs	r0, #0
 8003350:	f001 fd02 	bl	8004d58 <ssd1306_SetCursor>
	sprintf(led_buffer, "%d", (uint8_t) h);
 8003354:	79bb      	ldrb	r3, [r7, #6]
 8003356:	461a      	mov	r2, r3
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <LED_update+0xc8>)
 800335a:	4817      	ldr	r0, [pc, #92]	; (80033b8 <LED_update+0xcc>)
 800335c:	f00a fcae 	bl	800dcbc <siprintf>
	ssd1306_WriteString(led_buffer, Font_7x10, White);
 8003360:	4a16      	ldr	r2, [pc, #88]	; (80033bc <LED_update+0xd0>)
 8003362:	2301      	movs	r3, #1
 8003364:	ca06      	ldmia	r2, {r1, r2}
 8003366:	4814      	ldr	r0, [pc, #80]	; (80033b8 <LED_update+0xcc>)
 8003368:	f001 fcd0 	bl	8004d0c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 44);
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	2000      	movs	r0, #0
 8003370:	f001 fcf2 	bl	8004d58 <ssd1306_SetCursor>
	ssd1306_WriteString("Oxygen", Font_6x8, White);
 8003374:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <LED_update+0xc0>)
 8003376:	2301      	movs	r3, #1
 8003378:	ca06      	ldmia	r2, {r1, r2}
 800337a:	4812      	ldr	r0, [pc, #72]	; (80033c4 <LED_update+0xd8>)
 800337c:	f001 fcc6 	bl	8004d0c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 8003380:	2136      	movs	r1, #54	; 0x36
 8003382:	2000      	movs	r0, #0
 8003384:	f001 fce8 	bl	8004d58 <ssd1306_SetCursor>
	sprintf(led_buffer, "%d", (uint8_t) o);
 8003388:	797b      	ldrb	r3, [r7, #5]
 800338a:	461a      	mov	r2, r3
 800338c:	4909      	ldr	r1, [pc, #36]	; (80033b4 <LED_update+0xc8>)
 800338e:	480a      	ldr	r0, [pc, #40]	; (80033b8 <LED_update+0xcc>)
 8003390:	f00a fc94 	bl	800dcbc <siprintf>
	ssd1306_WriteString(led_buffer, Font_7x10, White);
 8003394:	4a09      	ldr	r2, [pc, #36]	; (80033bc <LED_update+0xd0>)
 8003396:	2301      	movs	r3, #1
 8003398:	ca06      	ldmia	r2, {r1, r2}
 800339a:	4807      	ldr	r0, [pc, #28]	; (80033b8 <LED_update+0xcc>)
 800339c:	f001 fcb6 	bl	8004d0c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80033a0:	f001 fbb2 	bl	8004b08 <ssd1306_UpdateScreen>
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000014 	.word	0x20000014
 80033b0:	08010e40 	.word	0x08010e40
 80033b4:	08010e48 	.word	0x08010e48
 80033b8:	20000780 	.word	0x20000780
 80033bc:	2000001c 	.word	0x2000001c
 80033c0:	08010e4c 	.word	0x08010e4c
 80033c4:	08010e54 	.word	0x08010e54

080033c8 <LED_pribor>:
void inc_led_status() {
	led_status++;
	led_status %= LED_STATUS_COUNT;
}

void LED_pribor() {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af02      	add	r7, sp, #8
	ssd1306_Fill(White);
 80033ce:	2001      	movs	r0, #1
 80033d0:	f001 fb78 	bl	8004ac4 <ssd1306_Fill>
	ssd1306_DrawBitmap(0, 0, pribor_64x64, 64, 64, Black);
 80033d4:	2300      	movs	r3, #0
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	2340      	movs	r3, #64	; 0x40
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2340      	movs	r3, #64	; 0x40
 80033de:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <LED_pribor+0x2c>)
 80033e0:	2100      	movs	r1, #0
 80033e2:	2000      	movs	r0, #0
 80033e4:	f001 fcd0 	bl	8004d88 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80033e8:	f001 fb8e 	bl	8004b08 <ssd1306_UpdateScreen>
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	08011310 	.word	0x08011310

080033f8 <lis2dtw12_read_reg>:
  *
  */
int32_t lis2dtw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	461a      	mov	r2, r3
 8003404:	460b      	mov	r3, r1
 8003406:	72fb      	strb	r3, [r7, #11]
 8003408:	4613      	mov	r3, r2
 800340a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685c      	ldr	r4, [r3, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68d8      	ldr	r0, [r3, #12]
 8003414:	893b      	ldrh	r3, [r7, #8]
 8003416:	7af9      	ldrb	r1, [r7, #11]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	47a0      	blx	r4
 800341c:	6178      	str	r0, [r7, #20]

  return ret;
 800341e:	697b      	ldr	r3, [r7, #20]
}
 8003420:	4618      	mov	r0, r3
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd90      	pop	{r4, r7, pc}

08003428 <lis2dtw12_write_reg>:
  *
  */
int32_t lis2dtw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	461a      	mov	r2, r3
 8003434:	460b      	mov	r3, r1
 8003436:	72fb      	strb	r3, [r7, #11]
 8003438:	4613      	mov	r3, r2
 800343a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681c      	ldr	r4, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68d8      	ldr	r0, [r3, #12]
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	7af9      	ldrb	r1, [r7, #11]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	47a0      	blx	r4
 800344c:	6178      	str	r0, [r7, #20]

  return ret;
 800344e:	697b      	ldr	r3, [r7, #20]
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	bd90      	pop	{r4, r7, pc}

08003458 <lis2dtw12_from_fs8_lp1_to_mg>:
{
  return ((float_t)lsb) * 0.122f;
}

float_t lis2dtw12_from_fs8_lp1_to_mg(int16_t lsb)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.244f;
 8003462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd fc18 	bl	8000c9c <__aeabi_i2f>
 800346c:	4603      	mov	r3, r0
 800346e:	4904      	ldr	r1, [pc, #16]	; (8003480 <lis2dtw12_from_fs8_lp1_to_mg+0x28>)
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd fc67 	bl	8000d44 <__aeabi_fmul>
 8003476:	4603      	mov	r3, r0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	3e79db23 	.word	0x3e79db23

08003484 <lis2dtw12_from_lsb_to_celsius>:
{
  return ((float_t)lsb) * 0.488f;
}

float_t lis2dtw12_from_lsb_to_celsius(int16_t lsb)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 800348e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fc02 	bl	8000c9c <__aeabi_i2f>
 8003498:	4603      	mov	r3, r0
 800349a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fd04 	bl	8000eac <__aeabi_fdiv>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4904      	ldr	r1, [pc, #16]	; (80034b8 <lis2dtw12_from_lsb_to_celsius+0x34>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd fb43 	bl	8000b34 <__addsf3>
 80034ae:	4603      	mov	r3, r0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	41c80000 	.word	0x41c80000

080034bc <lis2dtw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_power_mode_set(stmdev_ctx_t *ctx,
                                 lis2dtw12_mode_t val)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl1_t ctrl1;
  lis2dtw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80034c8:	f107 0210 	add.w	r2, r7, #16
 80034cc:	2301      	movs	r3, #1
 80034ce:	2120      	movs	r1, #32
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff91 	bl	80033f8 <lis2dtw12_read_reg>
 80034d6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d118      	bne.n	8003510 <lis2dtw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	7c3b      	ldrb	r3, [r7, #16]
 80034ea:	f362 0383 	bfi	r3, r2, #2, #2
 80034ee:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	7c3b      	ldrb	r3, [r7, #16]
 80034fa:	f362 0301 	bfi	r3, r2, #0, #2
 80034fe:	743b      	strb	r3, [r7, #16]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003500:	f107 0210 	add.w	r2, r7, #16
 8003504:	2301      	movs	r3, #1
 8003506:	2120      	movs	r1, #32
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff8d 	bl	8003428 <lis2dtw12_write_reg>
 800350e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d107      	bne.n	8003526 <lis2dtw12_power_mode_set+0x6a>
  {
    ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003516:	f107 020c 	add.w	r2, r7, #12
 800351a:	2301      	movs	r3, #1
 800351c:	2125      	movs	r1, #37	; 0x25
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ff6a 	bl	80033f8 <lis2dtw12_read_reg>
 8003524:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d110      	bne.n	800354e <lis2dtw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	b2da      	uxtb	r2, r3
 8003536:	7b3b      	ldrb	r3, [r7, #12]
 8003538:	f362 0382 	bfi	r3, r2, #2, #1
 800353c:	733b      	strb	r3, [r7, #12]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800353e:	f107 020c 	add.w	r2, r7, #12
 8003542:	2301      	movs	r3, #1
 8003544:	2125      	movs	r1, #37	; 0x25
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ff6e 	bl	8003428 <lis2dtw12_write_reg>
 800354c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800354e:	697b      	ldr	r3, [r7, #20]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <lis2dtw12_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_data_rate_set(stmdev_ctx_t *ctx,
                                lis2dtw12_odr_t val)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl1_t ctrl1;
  lis2dtw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003564:	f107 0210 	add.w	r2, r7, #16
 8003568:	2301      	movs	r3, #1
 800356a:	2120      	movs	r1, #32
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff43 	bl	80033f8 <lis2dtw12_read_reg>
 8003572:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <lis2dtw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	b2da      	uxtb	r2, r3
 8003582:	7c3b      	ldrb	r3, [r7, #16]
 8003584:	f362 1307 	bfi	r3, r2, #4, #4
 8003588:	743b      	strb	r3, [r7, #16]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800358a:	f107 0210 	add.w	r2, r7, #16
 800358e:	2301      	movs	r3, #1
 8003590:	2120      	movs	r1, #32
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ff48 	bl	8003428 <lis2dtw12_write_reg>
 8003598:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <lis2dtw12_data_rate_set+0x58>
  {
    ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80035a0:	f107 020c 	add.w	r2, r7, #12
 80035a4:	2301      	movs	r3, #1
 80035a6:	2122      	movs	r1, #34	; 0x22
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ff25 	bl	80033f8 <lis2dtw12_read_reg>
 80035ae:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d110      	bne.n	80035d8 <lis2dtw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	7b3b      	ldrb	r3, [r7, #12]
 80035c2:	f362 0301 	bfi	r3, r2, #0, #2
 80035c6:	733b      	strb	r3, [r7, #12]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80035c8:	f107 020c 	add.w	r2, r7, #12
 80035cc:	2301      	movs	r3, #1
 80035ce:	2122      	movs	r1, #34	; 0x22
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff29 	bl	8003428 <lis2dtw12_write_reg>
 80035d6:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80035d8:	697b      	ldr	r3, [r7, #20]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <lis2dtw12_block_data_update_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	460b      	mov	r3, r1
 80035ec:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL2, (uint8_t *) &reg, 1);
 80035ee:	f107 0208 	add.w	r2, r7, #8
 80035f2:	2301      	movs	r3, #1
 80035f4:	2121      	movs	r1, #33	; 0x21
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fefe 	bl	80033f8 <lis2dtw12_read_reg>
 80035fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <lis2dtw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	b2da      	uxtb	r2, r3
 800360c:	7a3b      	ldrb	r3, [r7, #8]
 800360e:	f362 03c3 	bfi	r3, r2, #3, #1
 8003612:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL2, (uint8_t *) &reg, 1);
 8003614:	f107 0208 	add.w	r2, r7, #8
 8003618:	2301      	movs	r3, #1
 800361a:	2121      	movs	r1, #33	; 0x21
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff03 	bl	8003428 <lis2dtw12_write_reg>
 8003622:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003624:	68fb      	ldr	r3, [r7, #12]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <lis2dtw12_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_full_scale_set(stmdev_ctx_t *ctx,
                                 lis2dtw12_fs_t val)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL6, (uint8_t *) &reg, 1);
 800363a:	f107 0208 	add.w	r2, r7, #8
 800363e:	2301      	movs	r3, #1
 8003640:	2125      	movs	r1, #37	; 0x25
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fed8 	bl	80033f8 <lis2dtw12_read_reg>
 8003648:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10f      	bne.n	8003670 <lis2dtw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	b2da      	uxtb	r2, r3
 8003658:	7a3b      	ldrb	r3, [r7, #8]
 800365a:	f362 1305 	bfi	r3, r2, #4, #2
 800365e:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL6, (uint8_t *) &reg, 1);
 8003660:	f107 0208 	add.w	r2, r7, #8
 8003664:	2301      	movs	r3, #1
 8003666:	2125      	movs	r1, #37	; 0x25
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff fedd 	bl	8003428 <lis2dtw12_write_reg>
 800366e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003670:	68fb      	ldr	r3, [r7, #12]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <lis2dtw12_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_OUT_T_L, buff, 2);
 8003684:	f107 0208 	add.w	r2, r7, #8
 8003688:	2302      	movs	r3, #2
 800368a:	210d      	movs	r1, #13
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff feb3 	bl	80033f8 <lis2dtw12_read_reg>
 8003692:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003694:	7a7b      	ldrb	r3, [r7, #9]
 8003696:	b21a      	sxth	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	7a3b      	ldrb	r3, [r7, #8]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	b21a      	sxth	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	801a      	strh	r2, [r3, #0]

  return ret;
 80036b6:	68fb      	ldr	r3, [r7, #12]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <lis2dtw12_acceleration_raw_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_OUT_X_L, buff, 6);
 80036ca:	f107 020c 	add.w	r2, r7, #12
 80036ce:	2306      	movs	r3, #6
 80036d0:	2128      	movs	r1, #40	; 0x28
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fe90 	bl	80033f8 <lis2dtw12_read_reg>
 80036d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80036da:	7b7b      	ldrb	r3, [r7, #13]
 80036dc:	b21a      	sxth	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	7b3b      	ldrb	r3, [r7, #12]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	b21a      	sxth	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	3302      	adds	r3, #2
 8003702:	b212      	sxth	r2, r2
 8003704:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	3302      	adds	r3, #2
 800370a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370e:	b29b      	uxth	r3, r3
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	b29a      	uxth	r2, r3
 8003714:	7bbb      	ldrb	r3, [r7, #14]
 8003716:	b29b      	uxth	r3, r3
 8003718:	4413      	add	r3, r2
 800371a:	b29a      	uxth	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	3302      	adds	r3, #2
 8003720:	b212      	sxth	r2, r2
 8003722:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003724:	7c7a      	ldrb	r2, [r7, #17]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3304      	adds	r3, #4
 800372a:	b212      	sxth	r2, r2
 800372c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	3304      	adds	r3, #4
 8003732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003736:	b29b      	uxth	r3, r3
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	b29a      	uxth	r2, r3
 800373c:	7c3b      	ldrb	r3, [r7, #16]
 800373e:	b29b      	uxth	r3, r3
 8003740:	4413      	add	r3, r2
 8003742:	b29a      	uxth	r2, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	3304      	adds	r3, #4
 8003748:	b212      	sxth	r2, r2
 800374a:	801a      	strh	r2, [r3, #0]

  return ret;
 800374c:	697b      	ldr	r3, [r7, #20]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <lis2dtw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_WHO_AM_I, buff, 1);
 8003760:	2301      	movs	r3, #1
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	210f      	movs	r1, #15
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff fe46 	bl	80033f8 <lis2dtw12_read_reg>
 800376c:	60f8      	str	r0, [r7, #12]

  return ret;
 800376e:	68fb      	ldr	r3, [r7, #12]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <lis2dtw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL2, (uint8_t *) &reg, 1);
 8003784:	f107 0208 	add.w	r2, r7, #8
 8003788:	2301      	movs	r3, #1
 800378a:	2121      	movs	r1, #33	; 0x21
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff fe33 	bl	80033f8 <lis2dtw12_read_reg>
 8003792:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <lis2dtw12_reset_set+0x42>
  {
    reg.soft_reset = val;
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	7a3b      	ldrb	r3, [r7, #8]
 80037a4:	f362 1386 	bfi	r3, r2, #6, #1
 80037a8:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL2, (uint8_t *) &reg, 1);
 80037aa:	f107 0208 	add.w	r2, r7, #8
 80037ae:	2301      	movs	r3, #1
 80037b0:	2121      	movs	r1, #33	; 0x21
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fe38 	bl	8003428 <lis2dtw12_write_reg>
 80037b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80037ba:	68fb      	ldr	r3, [r7, #12]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <lis2dtw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  lis2dtw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL2, (uint8_t *) &reg, 1);
 80037ce:	f107 0208 	add.w	r2, r7, #8
 80037d2:	2301      	movs	r3, #1
 80037d4:	2121      	movs	r1, #33	; 0x21
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fe0e 	bl	80033f8 <lis2dtw12_read_reg>
 80037dc:	60f8      	str	r0, [r7, #12]
  *val = reg.soft_reset;
 80037de:	7a3b      	ldrb	r3, [r7, #8]
 80037e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	701a      	strb	r2, [r3, #0]

  return ret;
 80037ec:	68fb      	ldr	r3, [r7, #12]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <lis2dtw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_filter_path_set(stmdev_ctx_t *ctx,
                                  lis2dtw12_fds_t val)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl6_t ctrl6;
  lis2dtw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003802:	f107 0210 	add.w	r2, r7, #16
 8003806:	2301      	movs	r3, #1
 8003808:	2125      	movs	r1, #37	; 0x25
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fdf4 	bl	80033f8 <lis2dtw12_read_reg>
 8003810:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d110      	bne.n	800383a <lis2dtw12_filter_path_set+0x44>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	b2da      	uxtb	r2, r3
 8003822:	7c3b      	ldrb	r3, [r7, #16]
 8003824:	f362 03c3 	bfi	r3, r2, #3, #1
 8003828:	743b      	strb	r3, [r7, #16]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800382a:	f107 0210 	add.w	r2, r7, #16
 800382e:	2301      	movs	r3, #1
 8003830:	2125      	movs	r1, #37	; 0x25
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fdf8 	bl	8003428 <lis2dtw12_write_reg>
 8003838:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <lis2dtw12_filter_path_set+0x5a>
  {
    ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL_REG7,
 8003840:	f107 020c 	add.w	r2, r7, #12
 8003844:	2301      	movs	r3, #1
 8003846:	213f      	movs	r1, #63	; 0x3f
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fdd5 	bl	80033f8 <lis2dtw12_read_reg>
 800384e:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <lis2dtw12_filter_path_set+0x80>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	b2da      	uxtb	r2, r3
 800385e:	7b3b      	ldrb	r3, [r7, #12]
 8003860:	f362 1304 	bfi	r3, r2, #4, #1
 8003864:	733b      	strb	r3, [r7, #12]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL_REG7,
 8003866:	f107 020c 	add.w	r2, r7, #12
 800386a:	2301      	movs	r3, #1
 800386c:	213f      	movs	r1, #63	; 0x3f
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fdda 	bl	8003428 <lis2dtw12_write_reg>
 8003874:	6178      	str	r0, [r7, #20]
                              (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8003876:	697b      	ldr	r3, [r7, #20]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <lis2dtw12_filter_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_filter_bandwidth_set(stmdev_ctx_t *ctx,
                                       lis2dtw12_bw_filt_t val)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL6, (uint8_t *) &reg, 1);
 800388c:	f107 0208 	add.w	r2, r7, #8
 8003890:	2301      	movs	r3, #1
 8003892:	2125      	movs	r1, #37	; 0x25
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff fdaf 	bl	80033f8 <lis2dtw12_read_reg>
 800389a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10f      	bne.n	80038c2 <lis2dtw12_filter_bandwidth_set+0x42>
  {
    reg.bw_filt = (uint8_t) val;
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	7a3b      	ldrb	r3, [r7, #8]
 80038ac:	f362 1387 	bfi	r3, r2, #6, #2
 80038b0:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL6, (uint8_t *) &reg, 1);
 80038b2:	f107 0208 	add.w	r2, r7, #8
 80038b6:	2301      	movs	r3, #1
 80038b8:	2125      	movs	r1, #37	; 0x25
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fdb4 	bl	8003428 <lis2dtw12_write_reg>
 80038c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80038c2:	68fb      	ldr	r3, [r7, #12]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <lis2dtw12_pin_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_pin_polarity_set(stmdev_ctx_t *ctx,
                                   lis2dtw12_h_lactive_t val)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl3_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL3, (uint8_t *) &reg, 1);
 80038d8:	f107 0208 	add.w	r2, r7, #8
 80038dc:	2301      	movs	r3, #1
 80038de:	2122      	movs	r1, #34	; 0x22
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fd89 	bl	80033f8 <lis2dtw12_read_reg>
 80038e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <lis2dtw12_pin_polarity_set+0x42>
  {
    reg.h_lactive = (uint8_t) val;
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	7a3b      	ldrb	r3, [r7, #8]
 80038f8:	f362 03c3 	bfi	r3, r2, #3, #1
 80038fc:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL3, (uint8_t *) &reg, 1);
 80038fe:	f107 0208 	add.w	r2, r7, #8
 8003902:	2301      	movs	r3, #1
 8003904:	2122      	movs	r1, #34	; 0x22
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fd8e 	bl	8003428 <lis2dtw12_write_reg>
 800390c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800390e:	68fb      	ldr	r3, [r7, #12]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <lis2dtw12_int_notification_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_int_notification_set(stmdev_ctx_t *ctx,
                                       lis2dtw12_lir_t val)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl3_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL3, (uint8_t *) &reg, 1);
 8003924:	f107 0208 	add.w	r2, r7, #8
 8003928:	2301      	movs	r3, #1
 800392a:	2122      	movs	r1, #34	; 0x22
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fd63 	bl	80033f8 <lis2dtw12_read_reg>
 8003932:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <lis2dtw12_int_notification_set+0x42>
  {
    reg.lir = (uint8_t) val;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	b2da      	uxtb	r2, r3
 8003942:	7a3b      	ldrb	r3, [r7, #8]
 8003944:	f362 1304 	bfi	r3, r2, #4, #1
 8003948:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL3, (uint8_t *) &reg, 1);
 800394a:	f107 0208 	add.w	r2, r7, #8
 800394e:	2301      	movs	r3, #1
 8003950:	2122      	movs	r1, #34	; 0x22
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fd68 	bl	8003428 <lis2dtw12_write_reg>
 8003958:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <lis2dtw12_pin_int1_route_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     lis2dtw12_ctrl4_int1_pad_ctrl_t *val)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  lis2dtw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL_REG7, (uint8_t *) &reg, 1);
 800396e:	f107 0208 	add.w	r2, r7, #8
 8003972:	2301      	movs	r3, #1
 8003974:	213f      	movs	r1, #63	; 0x3f
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fd3e 	bl	80033f8 <lis2dtw12_read_reg>
 800397c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d132      	bne.n	80039ea <lis2dtw12_pin_int1_route_set+0x86>
  {
    if ((val->int1_tap | val->int1_ff | val->int1_wu |
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800398c:	b2da      	uxtb	r2, r3
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003996:	b2db      	uxtb	r3, r3
 8003998:	4313      	orrs	r3, r2
 800399a:	b2da      	uxtb	r2, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b2da      	uxtb	r2, r3
         val->int1_single_tap |
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039b2:	b2db      	uxtb	r3, r3
    if ((val->int1_tap | val->int1_ff | val->int1_wu |
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b2da      	uxtb	r2, r3
         val->int1_6d) != PROPERTY_DISABLE)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039c0:	b2db      	uxtb	r3, r3
         val->int1_single_tap |
 80039c2:	4313      	orrs	r3, r2
 80039c4:	b2db      	uxtb	r3, r3
    if ((val->int1_tap | val->int1_ff | val->int1_wu |
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <lis2dtw12_pin_int1_route_set+0x70>
    {
      reg.interrupts_enable = PROPERTY_ENABLE;
 80039ca:	7a3b      	ldrb	r3, [r7, #8]
 80039cc:	f043 0320 	orr.w	r3, r3, #32
 80039d0:	723b      	strb	r3, [r7, #8]
 80039d2:	e003      	b.n	80039dc <lis2dtw12_pin_int1_route_set+0x78>
    }

    else
    {
      reg.interrupts_enable = PROPERTY_DISABLE;
 80039d4:	7a3b      	ldrb	r3, [r7, #8]
 80039d6:	f36f 1345 	bfc	r3, #5, #1
 80039da:	723b      	strb	r3, [r7, #8]
    }

    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL4_INT1_PAD_CTRL,
 80039dc:	2301      	movs	r3, #1
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	2123      	movs	r1, #35	; 0x23
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fd20 	bl	8003428 <lis2dtw12_write_reg>
 80039e8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *) val, 1);
  }

  if (ret == 0)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <lis2dtw12_pin_int1_route_set+0x9c>
  {
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL_REG7, (uint8_t *) &reg, 1);
 80039f0:	f107 0208 	add.w	r2, r7, #8
 80039f4:	2301      	movs	r3, #1
 80039f6:	213f      	movs	r1, #63	; 0x3f
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fd15 	bl	8003428 <lis2dtw12_write_reg>
 80039fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a00:	68fb      	ldr	r3, [r7, #12]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <lis2dtw12_pin_int1_route_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_pin_int1_route_get(stmdev_ctx_t *ctx,
                                     lis2dtw12_ctrl4_int1_pad_ctrl_t *val)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL4_INT1_PAD_CTRL,
 8003a14:	2301      	movs	r3, #1
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	2123      	movs	r1, #35	; 0x23
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fcec 	bl	80033f8 <lis2dtw12_read_reg>
 8003a20:	60f8      	str	r0, [r7, #12]
                           (uint8_t *) val, 1);

  return ret;
 8003a22:	68fb      	ldr	r3, [r7, #12]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <lis2dtw12_wkup_threshold_set>:
  * @param  val      change the values of wk_ths in reg WAKE_UP_THS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_wake_up_ths_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_WAKE_UP_THS, (uint8_t *) &reg, 1);
 8003a38:	f107 0208 	add.w	r2, r7, #8
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	2134      	movs	r1, #52	; 0x34
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fcd9 	bl	80033f8 <lis2dtw12_read_reg>
 8003a46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <lis2dtw12_wkup_threshold_set+0x42>
  {
    reg.wk_ths = val;
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	7a3b      	ldrb	r3, [r7, #8]
 8003a58:	f362 0305 	bfi	r3, r2, #0, #6
 8003a5c:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_WAKE_UP_THS,
 8003a5e:	f107 0208 	add.w	r2, r7, #8
 8003a62:	2301      	movs	r3, #1
 8003a64:	2134      	movs	r1, #52	; 0x34
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fcde 	bl	8003428 <lis2dtw12_write_reg>
 8003a6c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *) &reg, 1);
  }

  return ret;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <lis2dtw12_wkup_dur_set>:
  * @param  val      change the values of wake_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8003a84:	f107 0208 	add.w	r2, r7, #8
 8003a88:	2301      	movs	r3, #1
 8003a8a:	2135      	movs	r1, #53	; 0x35
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fcb3 	bl	80033f8 <lis2dtw12_read_reg>
 8003a92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <lis2dtw12_wkup_dur_set+0x42>
  {
    reg.wake_dur = val;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	7a3b      	ldrb	r3, [r7, #8]
 8003aa4:	f362 1346 	bfi	r3, r2, #5, #2
 8003aa8:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_WAKE_UP_DUR,
 8003aaa:	f107 0208 	add.w	r2, r7, #8
 8003aae:	2301      	movs	r3, #1
 8003ab0:	2135      	movs	r1, #53	; 0x35
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fcb8 	bl	8003428 <lis2dtw12_write_reg>
 8003ab8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *) &reg, 1);
  }

  return ret;
 8003aba:	68fb      	ldr	r3, [r7, #12]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <lis2dtw12_wkup_feed_data_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_wkup_feed_data_set(stmdev_ctx_t *ctx,
                                     lis2dtw12_usr_off_on_wu_t val)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_ctrl_reg7_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8003ad0:	f107 0208 	add.w	r2, r7, #8
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	213f      	movs	r1, #63	; 0x3f
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fc8d 	bl	80033f8 <lis2dtw12_read_reg>
 8003ade:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10f      	bne.n	8003b06 <lis2dtw12_wkup_feed_data_set+0x42>
  {
    reg.usr_off_on_wu = (uint8_t) val;
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	7a3b      	ldrb	r3, [r7, #8]
 8003af0:	f362 03c3 	bfi	r3, r2, #3, #1
 8003af4:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_CTRL_REG7, (uint8_t *) &reg, 1);
 8003af6:	f107 0208 	add.w	r2, r7, #8
 8003afa:	2301      	movs	r3, #1
 8003afc:	213f      	movs	r1, #63	; 0x3f
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fc92 	bl	8003428 <lis2dtw12_write_reg>
 8003b04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <lis2dtw12_act_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_act_mode_set(stmdev_ctx_t *ctx,
                               lis2dtw12_sleep_on_t val)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_wake_up_ths_t wake_up_ths;
  lis2dtw12_wake_up_dur_t wake_up_dur;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_WAKE_UP_THS,
 8003b1c:	f107 0210 	add.w	r2, r7, #16
 8003b20:	2301      	movs	r3, #1
 8003b22:	2134      	movs	r1, #52	; 0x34
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fc67 	bl	80033f8 <lis2dtw12_read_reg>
 8003b2a:	6178      	str	r0, [r7, #20]
                           (uint8_t *) &wake_up_ths, 1);

  if (ret == 0)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <lis2dtw12_act_mode_set+0x32>
  {
    ret = lis2dtw12_read_reg(ctx, LIS2DTW12_WAKE_UP_DUR,
 8003b32:	f107 020c 	add.w	r2, r7, #12
 8003b36:	2301      	movs	r3, #1
 8003b38:	2135      	movs	r1, #53	; 0x35
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fc5c 	bl	80033f8 <lis2dtw12_read_reg>
 8003b40:	6178      	str	r0, [r7, #20]
                             (uint8_t *) &wake_up_dur, 1);
  }

  if (ret == 0)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <lis2dtw12_act_mode_set+0x58>
  {
    wake_up_ths.sleep_on = (uint8_t) val & 0x01U;
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	7c3b      	ldrb	r3, [r7, #16]
 8003b52:	f362 1386 	bfi	r3, r2, #6, #1
 8003b56:	743b      	strb	r3, [r7, #16]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_WAKE_UP_THS,
 8003b58:	f107 0210 	add.w	r2, r7, #16
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	2134      	movs	r1, #52	; 0x34
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fc61 	bl	8003428 <lis2dtw12_write_reg>
 8003b66:	6178      	str	r0, [r7, #20]
                              (uint8_t *) &wake_up_ths, 1);
  }

  if (ret == 0)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d110      	bne.n	8003b90 <lis2dtw12_act_mode_set+0x80>
  {
    wake_up_dur.stationary = ((uint8_t)val & 0x02U) >> 1;
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	7b3b      	ldrb	r3, [r7, #12]
 8003b7a:	f362 1304 	bfi	r3, r2, #4, #1
 8003b7e:	733b      	strb	r3, [r7, #12]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_WAKE_UP_DUR,
 8003b80:	f107 020c 	add.w	r2, r7, #12
 8003b84:	2301      	movs	r3, #1
 8003b86:	2135      	movs	r1, #53	; 0x35
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fc4d 	bl	8003428 <lis2dtw12_write_reg>
 8003b8e:	6178      	str	r0, [r7, #20]
                              (uint8_t *) &wake_up_dur, 1);
  }

  return ret;
 8003b90:	697b      	ldr	r3, [r7, #20]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <lis2dtw12_act_sleep_dur_set>:
  * @param  val      change the values of sleep_dur in reg WAKE_UP_DUR
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_act_sleep_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_wake_up_dur_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_WAKE_UP_DUR, (uint8_t *) &reg, 1);
 8003ba6:	f107 0208 	add.w	r2, r7, #8
 8003baa:	2301      	movs	r3, #1
 8003bac:	2135      	movs	r1, #53	; 0x35
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fc22 	bl	80033f8 <lis2dtw12_read_reg>
 8003bb4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <lis2dtw12_act_sleep_dur_set+0x42>
  {
    reg.sleep_dur = val;
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	7a3b      	ldrb	r3, [r7, #8]
 8003bc6:	f362 0303 	bfi	r3, r2, #0, #4
 8003bca:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_WAKE_UP_DUR,
 8003bcc:	f107 0208 	add.w	r2, r7, #8
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	2135      	movs	r1, #53	; 0x35
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fc27 	bl	8003428 <lis2dtw12_write_reg>
 8003bda:	60f8      	str	r0, [r7, #12]
                              (uint8_t *) &reg, 1);
  }

  return ret;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <lis2dtw12_fifo_watermark_set>:
  * @param  val      change the values of fth in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003bf2:	f107 0208 	add.w	r2, r7, #8
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	212e      	movs	r1, #46	; 0x2e
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff fbfc 	bl	80033f8 <lis2dtw12_read_reg>
 8003c00:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <lis2dtw12_fifo_watermark_set+0x42>
  {
    reg.fth = val;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	7a3b      	ldrb	r3, [r7, #8]
 8003c12:	f362 0304 	bfi	r3, r2, #0, #5
 8003c16:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003c18:	f107 0208 	add.w	r2, r7, #8
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	212e      	movs	r1, #46	; 0x2e
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fc01 	bl	8003428 <lis2dtw12_write_reg>
 8003c26:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c28:	68fb      	ldr	r3, [r7, #12]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <lis2dtw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_fifo_mode_set(stmdev_ctx_t *ctx,
                                lis2dtw12_fmode_t val)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	70fb      	strb	r3, [r7, #3]
  lis2dtw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003c3e:	f107 0208 	add.w	r2, r7, #8
 8003c42:	2301      	movs	r3, #1
 8003c44:	212e      	movs	r1, #46	; 0x2e
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fbd6 	bl	80033f8 <lis2dtw12_read_reg>
 8003c4c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10f      	bne.n	8003c74 <lis2dtw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	7a3b      	ldrb	r3, [r7, #8]
 8003c5e:	f362 1347 	bfi	r3, r2, #5, #3
 8003c62:	723b      	strb	r3, [r7, #8]
    ret = lis2dtw12_write_reg(ctx, LIS2DTW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003c64:	f107 0208 	add.w	r2, r7, #8
 8003c68:	2301      	movs	r3, #1
 8003c6a:	212e      	movs	r1, #46	; 0x2e
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fbdb 	bl	8003428 <lis2dtw12_write_reg>
 8003c72:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c74:	68fb      	ldr	r3, [r7, #12]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <lis2dtw12_fifo_data_level_get>:
  * @param  val      change the values of diff in reg FIFO_SAMPLES
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dtw12_fifo_data_level_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  lis2dtw12_fifo_samples_t reg;
  int32_t ret;

  ret = lis2dtw12_read_reg(ctx, LIS2DTW12_FIFO_SAMPLES,
 8003c88:	f107 0208 	add.w	r2, r7, #8
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	212f      	movs	r1, #47	; 0x2f
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fbb1 	bl	80033f8 <lis2dtw12_read_reg>
 8003c96:	60f8      	str	r0, [r7, #12]
                           (uint8_t *) &reg, 1);
  *val = reg.diff;
 8003c98:	7a3b      	ldrb	r3, [r7, #8]
 8003c9a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	701a      	strb	r2, [r3, #0]

  return ret;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cb4:	f3bf 8f4f 	dsb	sy
}
 8003cb8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <__NVIC_SystemReset+0x24>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003cc2:	4904      	ldr	r1, [pc, #16]	; (8003cd4 <__NVIC_SystemReset+0x24>)
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <__NVIC_SystemReset+0x28>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cca:	f3bf 8f4f 	dsb	sy
}
 8003cce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003cd0:	bf00      	nop
 8003cd2:	e7fd      	b.n	8003cd0 <__NVIC_SystemReset+0x20>
 8003cd4:	e000ed00 	.word	0xe000ed00
 8003cd8:	05fa0004 	.word	0x05fa0004

08003cdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003ce4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ce8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d013      	beq.n	8003d1c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003cf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cf8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003cfc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003d04:	e000      	b.n	8003d08 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003d06:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003d08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f9      	beq.n	8003d06 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003d12:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003d1c:	687b      	ldr	r3, [r7, #4]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// SWO trace
int _write(int file, char *ptr, int len) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
	int i = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++) {
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e009      	b.n	8003d52 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	60ba      	str	r2, [r7, #8]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ffc8 	bl	8003cdc <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	dbf1      	blt.n	8003d3e <_write+0x16>
	}
	return len;
 8003d5a:	687b      	ldr	r3, [r7, #4]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	0000      	movs	r0, r0
	...

08003d68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003d68:	b5b0      	push	{r4, r5, r7, lr}
 8003d6a:	b094      	sub	sp, #80	; 0x50
 8003d6c:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003d6e:	f001 fb91 	bl	8005494 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003d72:	f000 fbc1 	bl	80044f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003d76:	f7fd ff61 	bl	8001c3c <MX_GPIO_Init>
	MX_DMA_Init();
 8003d7a:	f7fd ff29 	bl	8001bd0 <MX_DMA_Init>
	MX_I2C1_Init();
 8003d7e:	f7ff f9d5 	bl	800312c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8003d82:	f001 fae3 	bl	800534c <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8003d86:	f000 fd13 	bl	80047b0 <MX_SPI1_Init>
	MX_TIM2_Init();
 8003d8a:	f001 fa03 	bl	8005194 <MX_TIM2_Init>
	MX_ADC1_Init();
 8003d8e:	f7fd f9fb 	bl	8001188 <MX_ADC1_Init>
	MX_TIM3_Init();
 8003d92:	f001 fa4d 	bl	8005230 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8003d96:	48a4      	ldr	r0, [pc, #656]	; (8004028 <main+0x2c0>)
 8003d98:	f007 fc8e 	bl	800b6b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8003d9c:	48a3      	ldr	r0, [pc, #652]	; (800402c <main+0x2c4>)
 8003d9e:	f007 fc8b 	bl	800b6b8 <HAL_TIM_Base_Start_IT>

	/* AFE INIT START*/
	// Enable power for 4.2V
	TPS_on();
 8003da2:	f000 fc63 	bl	800466c <TPS_on>
	AFE_status = SET;
 8003da6:	4ba2      	ldr	r3, [pc, #648]	; (8004030 <main+0x2c8>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	701a      	strb	r2, [r3, #0]
	// Initialize AFE4420
	AFE_INIT(&hspi1);
 8003dac:	48a1      	ldr	r0, [pc, #644]	; (8004034 <main+0x2cc>)
 8003dae:	f7fd fab3 	bl	8001318 <AFE_INIT>
	// Set voltage on LEDs
	AFE_LED_STRENGTH(0, 30, 30, 30);
 8003db2:	231e      	movs	r3, #30
 8003db4:	221e      	movs	r2, #30
 8003db6:	211e      	movs	r1, #30
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7fd fbc5 	bl	8001548 <AFE_LED_STRENGTH>
	AFE_ILED_UPDATE();
 8003dbe:	f7fd fbed 	bl	800159c <AFE_ILED_UPDATE>
	/* AFE INIT END */

	/* LED INIT START*/
	LED_on();
 8003dc2:	f000 fc27 	bl	8004614 <LED_on>
	LED_pribor();
 8003dc6:	f7ff faff 	bl	80033c8 <LED_pribor>
	/* LED INIT END */

	/* LIS INIT START */
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = platform_write;
 8003dca:	4b9b      	ldr	r3, [pc, #620]	; (8004038 <main+0x2d0>)
 8003dcc:	60fb      	str	r3, [r7, #12]
	dev_ctx.read_reg = platform_read;
 8003dce:	4b9b      	ldr	r3, [pc, #620]	; (800403c <main+0x2d4>)
 8003dd0:	613b      	str	r3, [r7, #16]
	dev_ctx.handle = &SENSOR_BUS;
 8003dd2:	4b9b      	ldr	r3, [pc, #620]	; (8004040 <main+0x2d8>)
 8003dd4:	61bb      	str	r3, [r7, #24]
	// Initialize platform specific hardware
	platform_init();
 8003dd6:	f000 fcd7 	bl	8004788 <platform_init>
	// Wait sensor boot time
	platform_delay(BOOT_TIME);
 8003dda:	2064      	movs	r0, #100	; 0x64
 8003ddc:	f000 fcc9 	bl	8004772 <platform_delay>
	// Check device ID
	lis2dtw12_device_id_get(&dev_ctx, &whoamI);
 8003de0:	f107 030c 	add.w	r3, r7, #12
 8003de4:	4997      	ldr	r1, [pc, #604]	; (8004044 <main+0x2dc>)
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fcb5 	bl	8003756 <lis2dtw12_device_id_get>

	if (whoamI != LIS2DTW12_ID)
 8003dec:	4b95      	ldr	r3, [pc, #596]	; (8004044 <main+0x2dc>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b44      	cmp	r3, #68	; 0x44
 8003df2:	d000      	beq.n	8003df6 <main+0x8e>
		while (1) {
 8003df4:	e7fe      	b.n	8003df4 <main+0x8c>
			// Device not found
		}

	// Restore default configuration
	lis2dtw12_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8003df6:	f107 030c 	add.w	r3, r7, #12
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fcbb 	bl	8003778 <lis2dtw12_reset_set>

	do {
		lis2dtw12_reset_get(&dev_ctx, &rst);
 8003e02:	f107 030c 	add.w	r3, r7, #12
 8003e06:	4990      	ldr	r1, [pc, #576]	; (8004048 <main+0x2e0>)
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fcdb 	bl	80037c4 <lis2dtw12_reset_get>
	} while (rst);
 8003e0e:	4b8e      	ldr	r3, [pc, #568]	; (8004048 <main+0x2e0>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f5      	bne.n	8003e02 <main+0x9a>

	//  Enable Block Data Update
	lis2dtw12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8003e16:	f107 030c 	add.w	r3, r7, #12
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fbe0 	bl	80035e2 <lis2dtw12_block_data_update_set>
	// interrupt
	lis2dtw12_int_notification_set(&dev_ctx, LIS2DTW12_INT_LATCHED);
 8003e22:	f107 030c 	add.w	r3, r7, #12
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fd75 	bl	8003918 <lis2dtw12_int_notification_set>
	lis2dtw12_pin_polarity_set(&dev_ctx, LIS2DTW12_ACTIVE_HIGH);
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fd49 	bl	80038cc <lis2dtw12_pin_polarity_set>
	lis2dtw12_pin_int1_route_get(&dev_ctx, &ctrl4_int1_pad);
 8003e3a:	f107 030c 	add.w	r3, r7, #12
 8003e3e:	4983      	ldr	r1, [pc, #524]	; (800404c <main+0x2e4>)
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fde2 	bl	8003a0a <lis2dtw12_pin_int1_route_get>
	ctrl4_int1_pad.int1_wu = PROPERTY_ENABLE;
 8003e46:	4a81      	ldr	r2, [pc, #516]	; (800404c <main+0x2e4>)
 8003e48:	7813      	ldrb	r3, [r2, #0]
 8003e4a:	f043 0320 	orr.w	r3, r3, #32
 8003e4e:	7013      	strb	r3, [r2, #0]
	lis2dtw12_pin_int1_route_set(&dev_ctx, &ctrl4_int1_pad);
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	497d      	ldr	r1, [pc, #500]	; (800404c <main+0x2e4>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fd84 	bl	8003964 <lis2dtw12_pin_int1_route_set>

	// sleep
	lis2dtw12_wkup_dur_set(&dev_ctx, 0x2);
 8003e5c:	f107 030c 	add.w	r3, r7, #12
 8003e60:	2102      	movs	r1, #2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fe08 	bl	8003a78 <lis2dtw12_wkup_dur_set>
	lis2dtw12_act_sleep_dur_set(&dev_ctx, 0x2);
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fe93 	bl	8003b9a <lis2dtw12_act_sleep_dur_set>
	lis2dtw12_wkup_threshold_set(&dev_ctx, 0x2);
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	2102      	movs	r1, #2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fdd6 	bl	8003a2c <lis2dtw12_wkup_threshold_set>
	/* Data sent to wake-up interrupt function */
	lis2dtw12_wkup_feed_data_set(&dev_ctx, LIS2DTW12_HP_FEED);
 8003e80:	f107 030c 	add.w	r3, r7, #12
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fe1c 	bl	8003ac4 <lis2dtw12_wkup_feed_data_set>
	/* Config activity / inactivity or stationary / motion detection */
	lis2dtw12_act_mode_set(&dev_ctx, LIS2DTW12_DETECT_ACT_INACT);
 8003e8c:	f107 030c 	add.w	r3, r7, #12
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fe3c 	bl	8003b10 <lis2dtw12_act_mode_set>

	// Set full scale
	lis2dtw12_full_scale_set(&dev_ctx, LIS2DTW12_8g);
 8003e98:	f107 030c 	add.w	r3, r7, #12
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fbc5 	bl	800362e <lis2dtw12_full_scale_set>
	// Configure filtering chain
	// Accelerometer - filter path / bandwidth
	lis2dtw12_filter_path_set(&dev_ctx, LIS2DTW12_LPF_ON_OUT);
 8003ea4:	f107 030c 	add.w	r3, r7, #12
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fca3 	bl	80037f6 <lis2dtw12_filter_path_set>
	lis2dtw12_filter_bandwidth_set(&dev_ctx, LIS2DTW12_ODR_DIV_4);
 8003eb0:	f107 030c 	add.w	r3, r7, #12
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fce2 	bl	8003880 <lis2dtw12_filter_bandwidth_set>
	// Configure FIFO
	lis2dtw12_fifo_watermark_set(&dev_ctx, ACC_DEPTH);
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	2119      	movs	r1, #25
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff fe8f 	bl	8003be6 <lis2dtw12_fifo_watermark_set>
	lis2dtw12_fifo_mode_set(&dev_ctx, LIS2DTW12_STREAM_MODE);
 8003ec8:	f107 030c 	add.w	r3, r7, #12
 8003ecc:	2106      	movs	r1, #6
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff feaf 	bl	8003c32 <lis2dtw12_fifo_mode_set>
	// Configure power mode
	lis2dtw12_power_mode_set(&dev_ctx, LIS2DTW12_HIGH_PERFORMANCE);
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	2104      	movs	r1, #4
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff faee 	bl	80034bc <lis2dtw12_power_mode_set>
	//lis2dtw12_power_mode_set(&dev_ctx, LIS2DTW12_CONT_LOW_PWR_LOW_NOISE_12bit);
	// Set Output Data Rate */
	lis2dtw12_data_rate_set(&dev_ctx, LIS2DTW12_XL_ODR_25Hz);
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	2103      	movs	r1, #3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fb36 	bl	8003558 <lis2dtw12_data_rate_set>
	/* LIS INIT END */

	/* BEE INIT START */
	// ENABLE SWARM PA0 (MOD_EN) -> MOD_EN
	HAL_GPIO_WritePin(MOD_EN_GPIO_Port, MOD_EN_Pin, GPIO_PIN_SET);
 8003eec:	2201      	movs	r2, #1
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4857      	ldr	r0, [pc, #348]	; (8004050 <main+0x2e8>)
 8003ef2:	f002 fdf3 	bl	8006adc <HAL_GPIO_WritePin>

	// Set swarm into external control mode PA1 -> A_MODE
	HAL_GPIO_WritePin(A_MODE_GPIO_Port, A_MODE_Pin, GPIO_PIN_RESET);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4855      	ldr	r0, [pc, #340]	; (8004050 <main+0x2e8>)
 8003efc:	f002 fdee 	bl	8006adc <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8003f00:	2064      	movs	r0, #100	; 0x64
 8003f02:	f001 fb29 	bl	8005558 <HAL_Delay>

	// First msg = SWARM RADIO. Must be read!
	HAL_UART_Receive(&huart1, (uint8_t*) bee_response, 128, 100);
 8003f06:	2364      	movs	r3, #100	; 0x64
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	4952      	ldr	r1, [pc, #328]	; (8004054 <main+0x2ec>)
 8003f0c:	4852      	ldr	r0, [pc, #328]	; (8004058 <main+0x2f0>)
 8003f0e:	f008 fa75 	bl	800c3fc <HAL_UART_Receive>
	HAL_Delay(1000);
 8003f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f16:	f001 fb1f 	bl	8005558 <HAL_Delay>

	// Set uart handler for bee
	BEE_init(&huart1);
 8003f1a:	484f      	ldr	r0, [pc, #316]	; (8004058 <main+0x2f0>)
 8003f1c:	f7fd fcbc 	bl	8001898 <BEE_init>
	BEE_set_binary();
 8003f20:	f7fd fd72 	bl	8001a08 <BEE_set_binary>
	HAL_Delay(100);
 8003f24:	2064      	movs	r0, #100	; 0x64
 8003f26:	f001 fb17 	bl	8005558 <HAL_Delay>
	// Switch bee in binary mode (from ASCII)

	// Set interval between messages from bee
	BEE_b_sbiv(BEE_rate);
 8003f2a:	4b4c      	ldr	r3, [pc, #304]	; (800405c <main+0x2f4>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd fd7a 	bl	8001a28 <BEE_b_sbiv>
	HAL_Delay(100);
 8003f34:	2064      	movs	r0, #100	; 0x64
 8003f36:	f001 fb0f 	bl	8005558 <HAL_Delay>
	/* BEE INIT END */

	HR_HeartMonitor *HR_heartMonitor = HR_heartMonitor_new(SAMPLING_RATE,
 8003f3a:	2305      	movs	r3, #5
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	2305      	movs	r3, #5
 8003f40:	9303      	str	r3, [sp, #12]
 8003f42:	2309      	movs	r3, #9
 8003f44:	9302      	str	r3, [sp, #8]
 8003f46:	4b46      	ldr	r3, [pc, #280]	; (8004060 <main+0x2f8>)
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	4b46      	ldr	r3, [pc, #280]	; (8004064 <main+0x2fc>)
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2304      	movs	r3, #4
 8003f50:	4a45      	ldr	r2, [pc, #276]	; (8004068 <main+0x300>)
 8003f52:	2164      	movs	r1, #100	; 0x64
 8003f54:	4845      	ldr	r0, [pc, #276]	; (800406c <main+0x304>)
 8003f56:	f7fd ff9d 	bl	8001e94 <HR_heartMonitor_new>
 8003f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	HR_MON_SIZE,
	HR_THRESHOLD, HR_BPF_ORDER, HR_BPF_LOW, HR_BPF_HIGH, HR_SSF_SIZE,
	HR_MA_GREEN_SIZE,
	HR_MA_REDIR_SIZE);

	MA_filter *ma_red = MA_new(7);
 8003f5c:	2007      	movs	r0, #7
 8003f5e:	f7fe fc6e 	bl	800283e <MA_new>
 8003f62:	62b8      	str	r0, [r7, #40]	; 0x28
	MA_filter *ma_ir = MA_new(7);
 8003f64:	2007      	movs	r0, #7
 8003f66:	f7fe fc6a 	bl	800283e <MA_new>
 8003f6a:	6278      	str	r0, [r7, #36]	; 0x24

#ifdef HR_DEBUG
	// Debug
	printf("Starting debug cycle!\r\n");
 8003f6c:	4840      	ldr	r0, [pc, #256]	; (8004070 <main+0x308>)
 8003f6e:	f009 fe8d 	bl	800dc8c <puts>
	while (1) {
		while (HAL_GPIO_ReadPin(AFE_ADC_RDY_GPIO_Port, AFE_ADC_RDY_Pin)
 8003f72:	bf00      	nop
 8003f74:	2101      	movs	r1, #1
 8003f76:	483f      	ldr	r0, [pc, #252]	; (8004074 <main+0x30c>)
 8003f78:	f002 fd8a 	bl	8006a90 <HAL_GPIO_ReadPin>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d1f8      	bne.n	8003f74 <main+0x20c>
				!= GPIO_PIN_SET)
			;
		AFE_FIFO_READ(LED_DEPTH * 4);
 8003f82:	2064      	movs	r0, #100	; 0x64
 8003f84:	f7fd fb2a 	bl	80015dc <AFE_FIFO_READ>
		for (uint16_t i = 0; i < LED_DEPTH; i++) {
 8003f88:	2300      	movs	r3, #0
 8003f8a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f8c:	e027      	b.n	8003fde <main+0x276>
			AFE_RED[i] = AFE_FLOAT[i * 4];
 8003f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f94:	4938      	ldr	r1, [pc, #224]	; (8004078 <main+0x310>)
 8003f96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f9a:	4938      	ldr	r1, [pc, #224]	; (800407c <main+0x314>)
 8003f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			AFE_IR[i] = AFE_FLOAT[1 + i * 4];
 8003fa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fa8:	4933      	ldr	r1, [pc, #204]	; (8004078 <main+0x310>)
 8003faa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003fae:	4934      	ldr	r1, [pc, #208]	; (8004080 <main+0x318>)
 8003fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			AFE_GREEN[i] = AFE_FLOAT[2 + i * 4];
 8003fb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	1c9a      	adds	r2, r3, #2
 8003fba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fbc:	492e      	ldr	r1, [pc, #184]	; (8004078 <main+0x310>)
 8003fbe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003fc2:	4930      	ldr	r1, [pc, #192]	; (8004084 <main+0x31c>)
 8003fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			AFE_GREEN_COPY[i] = AFE_GREEN[i];
 8003fc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003fca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fcc:	492d      	ldr	r1, [pc, #180]	; (8004084 <main+0x31c>)
 8003fce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003fd2:	492d      	ldr	r1, [pc, #180]	; (8004088 <main+0x320>)
 8003fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint16_t i = 0; i < LED_DEPTH; i++) {
 8003fd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fda:	3301      	adds	r3, #1
 8003fdc:	847b      	strh	r3, [r7, #34]	; 0x22
 8003fde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fe0:	2b18      	cmp	r3, #24
 8003fe2:	d9d4      	bls.n	8003f8e <main+0x226>
		}

		MA_process(ma_red, AFE_RED, 25);
 8003fe4:	2219      	movs	r2, #25
 8003fe6:	4925      	ldr	r1, [pc, #148]	; (800407c <main+0x314>)
 8003fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fea:	f7fe fc43 	bl	8002874 <MA_process>
		MA_process(ma_ir, AFE_IR, 25);
 8003fee:	2219      	movs	r2, #25
 8003ff0:	4923      	ldr	r1, [pc, #140]	; (8004080 <main+0x318>)
 8003ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff4:	f7fe fc3e 	bl	8002874 <MA_process>

		// Read data from LIS2
		uint8_t val;
		lis2dtw12_fifo_data_level_get(&dev_ctx, &val);
 8003ff8:	f107 020b 	add.w	r2, r7, #11
 8003ffc:	f107 030c 	add.w	r3, r7, #12
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fe3b 	bl	8003c7e <lis2dtw12_fifo_data_level_get>

		if (val >= 25) {
 8004008:	7afb      	ldrb	r3, [r7, #11]
 800400a:	2b18      	cmp	r3, #24
 800400c:	f240 8090 	bls.w	8004130 <main+0x3c8>
			lis2dtw12_fifo_data_level_get(&dev_ctx, &val);
 8004010:	f107 020b 	add.w	r2, r7, #11
 8004014:	f107 030c 	add.w	r3, r7, #12
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fe2f 	bl	8003c7e <lis2dtw12_fifo_data_level_get>
			for (int i = ACC_DEPTH - 1; i >= 0; i--) {
 8004020:	2318      	movs	r3, #24
 8004022:	633b      	str	r3, [r7, #48]	; 0x30
 8004024:	e081      	b.n	800412a <main+0x3c2>
 8004026:	bf00      	nop
 8004028:	20000fec 	.word	0x20000fec
 800402c:	20001034 	.word	0x20001034
 8004030:	20000004 	.word	0x20000004
 8004034:	20000b00 	.word	0x20000b00
 8004038:	080046e9 	.word	0x080046e9
 800403c:	0800472b 	.word	0x0800472b
 8004040:	200006a4 	.word	0x200006a4
 8004044:	20000928 	.word	0x20000928
 8004048:	20000929 	.word	0x20000929
 800404c:	2000092c 	.word	0x2000092c
 8004050:	40010800 	.word	0x40010800
 8004054:	20000454 	.word	0x20000454
 8004058:	2000107c 	.word	0x2000107c
 800405c:	20000002 	.word	0x20000002
 8004060:	41080000 	.word	0x41080000
 8004064:	3f4ccccd 	.word	0x3f4ccccd
 8004068:	3eb33333 	.word	0x3eb33333
 800406c:	41c80000 	.word	0x41c80000
 8004070:	08010e5c 	.word	0x08010e5c
 8004074:	40010c00 	.word	0x40010c00
 8004078:	20000250 	.word	0x20000250
 800407c:	20000994 	.word	0x20000994
 8004080:	200009f8 	.word	0x200009f8
 8004084:	20000930 	.word	0x20000930
 8004088:	20000a74 	.word	0x20000a74
				memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800408c:	2206      	movs	r2, #6
 800408e:	2100      	movs	r1, #0
 8004090:	489d      	ldr	r0, [pc, #628]	; (8004308 <main+0x5a0>)
 8004092:	f009 f81d 	bl	800d0d0 <memset>
				lis2dtw12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8004096:	f107 030c 	add.w	r3, r7, #12
 800409a:	499b      	ldr	r1, [pc, #620]	; (8004308 <main+0x5a0>)
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fb0f 	bl	80036c0 <lis2dtw12_acceleration_raw_get>
				data_acceleration[i][0] = lis2dtw12_from_fs8_lp1_to_mg(
 80040a2:	4b99      	ldr	r3, [pc, #612]	; (8004308 <main+0x5a0>)
 80040a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff f9d5 	bl	8003458 <lis2dtw12_from_fs8_lp1_to_mg>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fd f823 	bl	80010fc <__aeabi_f2iz>
 80040b6:	4603      	mov	r3, r0
 80040b8:	b218      	sxth	r0, r3
 80040ba:	4994      	ldr	r1, [pc, #592]	; (800430c <main+0x5a4>)
 80040bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	440b      	add	r3, r1
 80040c8:	4602      	mov	r2, r0
 80040ca:	801a      	strh	r2, [r3, #0]
						data_raw_acceleration[0]);
				data_acceleration[i][1] = lis2dtw12_from_fs8_lp1_to_mg(
 80040cc:	4b8e      	ldr	r3, [pc, #568]	; (8004308 <main+0x5a0>)
 80040ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff f9c0 	bl	8003458 <lis2dtw12_from_fs8_lp1_to_mg>
 80040d8:	4603      	mov	r3, r0
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd f80e 	bl	80010fc <__aeabi_f2iz>
 80040e0:	4603      	mov	r3, r0
 80040e2:	b218      	sxth	r0, r3
 80040e4:	4989      	ldr	r1, [pc, #548]	; (800430c <main+0x5a4>)
 80040e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	440b      	add	r3, r1
 80040f2:	3302      	adds	r3, #2
 80040f4:	4602      	mov	r2, r0
 80040f6:	801a      	strh	r2, [r3, #0]
						data_raw_acceleration[1]);
				data_acceleration[i][2] = lis2dtw12_from_fs8_lp1_to_mg(
 80040f8:	4b83      	ldr	r3, [pc, #524]	; (8004308 <main+0x5a0>)
 80040fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff f9aa 	bl	8003458 <lis2dtw12_from_fs8_lp1_to_mg>
 8004104:	4603      	mov	r3, r0
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc fff8 	bl	80010fc <__aeabi_f2iz>
 800410c:	4603      	mov	r3, r0
 800410e:	b218      	sxth	r0, r3
 8004110:	497e      	ldr	r1, [pc, #504]	; (800430c <main+0x5a4>)
 8004112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004114:	4613      	mov	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4413      	add	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	440b      	add	r3, r1
 800411e:	3304      	adds	r3, #4
 8004120:	4602      	mov	r2, r0
 8004122:	801a      	strh	r2, [r3, #0]
			for (int i = ACC_DEPTH - 1; i >= 0; i--) {
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	3b01      	subs	r3, #1
 8004128:	633b      	str	r3, [r7, #48]	; 0x30
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	2b00      	cmp	r3, #0
 800412e:	daad      	bge.n	800408c <main+0x324>

		} else {

		}

		lis2dtw12_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8004130:	f107 030c 	add.w	r3, r7, #12
 8004134:	4976      	ldr	r1, [pc, #472]	; (8004310 <main+0x5a8>)
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fa9f 	bl	800367a <lis2dtw12_temperature_raw_get>
		temperature = lis2dtw12_from_lsb_to_celsius(data_raw_temperature);
 800413c:	4b74      	ldr	r3, [pc, #464]	; (8004310 <main+0x5a8>)
 800413e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff f99e 	bl	8003484 <lis2dtw12_from_lsb_to_celsius>
 8004148:	4603      	mov	r3, r0
 800414a:	4a72      	ldr	r2, [pc, #456]	; (8004314 <main+0x5ac>)
 800414c:	6013      	str	r3, [r2, #0]

		// Control green voltage
		float led_green_average = getAverageFloat(AFE_GREEN, LED_DEPTH);
 800414e:	2119      	movs	r1, #25
 8004150:	4871      	ldr	r0, [pc, #452]	; (8004318 <main+0x5b0>)
 8004152:	f000 fa9d 	bl	8004690 <getAverageFloat>
 8004156:	6378      	str	r0, [r7, #52]	; 0x34

		if (led_green_average > 0.9 && AFE_ILED_2 > 11) {
 8004158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800415a:	f7fc f965 	bl	8000428 <__aeabi_f2d>
 800415e:	a366      	add	r3, pc, #408	; (adr r3, 80042f8 <main+0x590>)
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f7fc fc48 	bl	80009f8 <__aeabi_dcmpgt>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <main+0x424>
 800416e:	4b6b      	ldr	r3, [pc, #428]	; (800431c <main+0x5b4>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b0b      	cmp	r3, #11
 8004174:	d90a      	bls.n	800418c <main+0x424>
			AFE_ILED_2 -= 10;
 8004176:	4b69      	ldr	r3, [pc, #420]	; (800431c <main+0x5b4>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	3b0a      	subs	r3, #10
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4b67      	ldr	r3, [pc, #412]	; (800431c <main+0x5b4>)
 8004180:	701a      	strb	r2, [r3, #0]
			AFE_ILED_UPDATE();
 8004182:	f7fd fa0b 	bl	800159c <AFE_ILED_UPDATE>
			HR_COUNT = 0;
 8004186:	4b66      	ldr	r3, [pc, #408]	; (8004320 <main+0x5b8>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

		}
		if (led_green_average < 0.4 && AFE_ILED_2 < 91) {
 800418c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800418e:	f7fc f94b 	bl	8000428 <__aeabi_f2d>
 8004192:	a35b      	add	r3, pc, #364	; (adr r3, 8004300 <main+0x598>)
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f7fc fc10 	bl	80009bc <__aeabi_dcmplt>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00e      	beq.n	80041c0 <main+0x458>
 80041a2:	4b5e      	ldr	r3, [pc, #376]	; (800431c <main+0x5b4>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b5a      	cmp	r3, #90	; 0x5a
 80041a8:	d80a      	bhi.n	80041c0 <main+0x458>
			AFE_ILED_2 += 10;
 80041aa:	4b5c      	ldr	r3, [pc, #368]	; (800431c <main+0x5b4>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	330a      	adds	r3, #10
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	4b5a      	ldr	r3, [pc, #360]	; (800431c <main+0x5b4>)
 80041b4:	701a      	strb	r2, [r3, #0]
			AFE_ILED_UPDATE();
 80041b6:	f7fd f9f1 	bl	800159c <AFE_ILED_UPDATE>
			HR_COUNT = 0;
 80041ba:	4b59      	ldr	r3, [pc, #356]	; (8004320 <main+0x5b8>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
		}

		// Add samples

		HR_heartMonitor_addGreen(HR_heartMonitor, AFE_GREEN, LED_DEPTH);
 80041c0:	2219      	movs	r2, #25
 80041c2:	4955      	ldr	r1, [pc, #340]	; (8004318 <main+0x5b0>)
 80041c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041c6:	f7fd feaf 	bl	8001f28 <HR_heartMonitor_addGreen>
		HR_heartMonitor_addRedIr(HR_heartMonitor, AFE_RED, AFE_IR, LED_DEPTH);
 80041ca:	2319      	movs	r3, #25
 80041cc:	4a55      	ldr	r2, [pc, #340]	; (8004324 <main+0x5bc>)
 80041ce:	4956      	ldr	r1, [pc, #344]	; (8004328 <main+0x5c0>)
 80041d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041d2:	f7fd feec 	bl	8001fae <HR_heartMonitor_addRedIr>

		// If okay - calculate HR

		HR_heartMonitor_peaksFromGreen(HR_heartMonitor);
 80041d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041d8:	f7fd ff52 	bl	8002080 <HR_heartMonitor_peaksFromGreen>
		HR = HR_heartMonitor_heartRateFromPeaks(HR_heartMonitor);
 80041dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041de:	f7fd ff6a 	bl	80020b6 <HR_heartMonitor_heartRateFromPeaks>
 80041e2:	4603      	mov	r3, r0
 80041e4:	4a51      	ldr	r2, [pc, #324]	; (800432c <main+0x5c4>)
 80041e6:	6013      	str	r3, [r2, #0]
		if (!isnanf(HR)) {
 80041e8:	4b50      	ldr	r3, [pc, #320]	; (800432c <main+0x5c4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fc ff6e 	bl	80010d0 <__aeabi_fcmpun>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d12f      	bne.n	800425a <main+0x4f2>
			HR_DISP = 2.0 * HR_DISP / 3.0 + HR / 3.0;
 80041fa:	4b4d      	ldr	r3, [pc, #308]	; (8004330 <main+0x5c8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc f912 	bl	8000428 <__aeabi_f2d>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	f7fb ffb0 	bl	800016c <__adddf3>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	4b46      	ldr	r3, [pc, #280]	; (8004334 <main+0x5cc>)
 800421a:	f7fc fa87 	bl	800072c <__aeabi_ddiv>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4614      	mov	r4, r2
 8004224:	461d      	mov	r5, r3
 8004226:	4b41      	ldr	r3, [pc, #260]	; (800432c <main+0x5c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fc f8fc 	bl	8000428 <__aeabi_f2d>
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <main+0x5cc>)
 8004236:	f7fc fa79 	bl	800072c <__aeabi_ddiv>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4620      	mov	r0, r4
 8004240:	4629      	mov	r1, r5
 8004242:	f7fb ff93 	bl	800016c <__adddf3>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f7fc fc1b 	bl	8000a88 <__aeabi_d2f>
 8004252:	4603      	mov	r3, r0
 8004254:	4a36      	ldr	r2, [pc, #216]	; (8004330 <main+0x5c8>)
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	e003      	b.n	8004262 <main+0x4fa>
		} else {
			HR = 0.0;
 800425a:	4b34      	ldr	r3, [pc, #208]	; (800432c <main+0x5c4>)
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
		}
		SP_R = HR_heartMonitor_ratioFromPeaks(HR_heartMonitor);
 8004262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004264:	f7fe f914 	bl	8002490 <HR_heartMonitor_ratioFromPeaks>
 8004268:	4603      	mov	r3, r0
 800426a:	4a33      	ldr	r2, [pc, #204]	; (8004338 <main+0x5d0>)
 800426c:	6013      	str	r3, [r2, #0]
		if (isnanf(SP_R)) {
 800426e:	4b32      	ldr	r3, [pc, #200]	; (8004338 <main+0x5d0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4619      	mov	r1, r3
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc ff2b 	bl	80010d0 <__aeabi_fcmpun>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <main+0x520>
			SP_R = 0.0;
 8004280:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <main+0x5d0>)
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
		}
		SP_DISP = 110.0 - 25.0 * SP_R;
 8004288:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <main+0x5d0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fc f8cb 	bl	8000428 <__aeabi_f2d>
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	4b29      	ldr	r3, [pc, #164]	; (800433c <main+0x5d4>)
 8004298:	f7fc f91e 	bl	80004d8 <__aeabi_dmul>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	f04f 0000 	mov.w	r0, #0
 80042a4:	4926      	ldr	r1, [pc, #152]	; (8004340 <main+0x5d8>)
 80042a6:	f7fb ff5f 	bl	8000168 <__aeabi_dsub>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	f7fc fbc1 	bl	8000a38 <__aeabi_d2iz>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4a22      	ldr	r2, [pc, #136]	; (8004344 <main+0x5dc>)
 80042ba:	6013      	str	r3, [r2, #0]

		HR_COUNT++;
 80042bc:	4b18      	ldr	r3, [pc, #96]	; (8004320 <main+0x5b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <main+0x5b8>)
 80042c4:	6013      	str	r3, [r2, #0]

		// Check finger on sensor
		if (led_green_average < 0.5 && AFE_ILED_2 >= 91) {
 80042c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80042ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042cc:	f7fc fed8 	bl	8001080 <__aeabi_fcmplt>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <main+0x580>
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <main+0x5b4>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b5a      	cmp	r3, #90	; 0x5a
 80042dc:	d904      	bls.n	80042e8 <main+0x580>
			HR_FIN = 0;
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <main+0x5e0>)
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e003      	b.n	80042f0 <main+0x588>
		} else {
			HR_FIN = HR_DISP;
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <main+0x5c8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a16      	ldr	r2, [pc, #88]	; (8004348 <main+0x5e0>)
 80042ee:	6013      	str	r3, [r2, #0]
		}

		// Monitor displaying
		for (int i = 0; i < LED_DEPTH; i++) {
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	e096      	b.n	8004424 <main+0x6bc>
 80042f6:	bf00      	nop
 80042f8:	cccccccd 	.word	0xcccccccd
 80042fc:	3feccccc 	.word	0x3feccccc
 8004300:	9999999a 	.word	0x9999999a
 8004304:	3fd99999 	.word	0x3fd99999
 8004308:	2000091c 	.word	0x2000091c
 800430c:	20000884 	.word	0x20000884
 8004310:	20000922 	.word	0x20000922
 8004314:	20000924 	.word	0x20000924
 8004318:	20000930 	.word	0x20000930
 800431c:	20000451 	.word	0x20000451
 8004320:	20000a68 	.word	0x20000a68
 8004324:	200009f8 	.word	0x200009f8
 8004328:	20000994 	.word	0x20000994
 800432c:	20000010 	.word	0x20000010
 8004330:	2000000c 	.word	0x2000000c
 8004334:	40080000 	.word	0x40080000
 8004338:	20000a5c 	.word	0x20000a5c
 800433c:	40390000 	.word	0x40390000
 8004340:	405b8000 	.word	0x405b8000
 8004344:	20000a60 	.word	0x20000a60
 8004348:	20000008 	.word	0x20000008
			HR_G = AFE_GREEN_COPY[i];
 800434c:	4a56      	ldr	r2, [pc, #344]	; (80044a8 <main+0x740>)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004354:	4a55      	ldr	r2, [pc, #340]	; (80044ac <main+0x744>)
 8004356:	6013      	str	r3, [r2, #0]
			HR_B = d1[i];
 8004358:	4a55      	ldr	r2, [pc, #340]	; (80044b0 <main+0x748>)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004360:	4a54      	ldr	r2, [pc, #336]	; (80044b4 <main+0x74c>)
 8004362:	6013      	str	r3, [r2, #0]
			HR_S = d2[i];
 8004364:	4a54      	ldr	r2, [pc, #336]	; (80044b8 <main+0x750>)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436c:	4a53      	ldr	r2, [pc, #332]	; (80044bc <main+0x754>)
 800436e:	6013      	str	r3, [r2, #0]
			HR_P = HR_heartMonitor->peaks[HR_heartMonitor->size - LED_DEPTH + i]
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f1a3 0119 	sub.w	r1, r3, #25
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	440b      	add	r3, r1
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	681b      	ldr	r3, [r3, #0]
					* HR_G;
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc fc88 	bl	8000c9c <__aeabi_i2f>
 800438c:	4602      	mov	r2, r0
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <main+0x744>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7fc fcd5 	bl	8000d44 <__aeabi_fmul>
 800439a:	4603      	mov	r3, r0
 800439c:	461a      	mov	r2, r3
			HR_P = HR_heartMonitor->peaks[HR_heartMonitor->size - LED_DEPTH + i]
 800439e:	4b48      	ldr	r3, [pc, #288]	; (80044c0 <main+0x758>)
 80043a0:	601a      	str	r2, [r3, #0]

			acceleration_mg[0] = data_acceleration[i][0];
 80043a2:	4948      	ldr	r1, [pc, #288]	; (80044c4 <main+0x75c>)
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	4613      	mov	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	440b      	add	r3, r1
 80043b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fc71 	bl	8000c9c <__aeabi_i2f>
 80043ba:	4603      	mov	r3, r0
 80043bc:	4a42      	ldr	r2, [pc, #264]	; (80044c8 <main+0x760>)
 80043be:	6013      	str	r3, [r2, #0]
			acceleration_mg[1] = data_acceleration[i][1];
 80043c0:	4940      	ldr	r1, [pc, #256]	; (80044c4 <main+0x75c>)
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	4613      	mov	r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4413      	add	r3, r2
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	440b      	add	r3, r1
 80043ce:	3302      	adds	r3, #2
 80043d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fc fc61 	bl	8000c9c <__aeabi_i2f>
 80043da:	4603      	mov	r3, r0
 80043dc:	4a3a      	ldr	r2, [pc, #232]	; (80044c8 <main+0x760>)
 80043de:	6053      	str	r3, [r2, #4]
			acceleration_mg[2] = data_acceleration[i][2];
 80043e0:	4938      	ldr	r1, [pc, #224]	; (80044c4 <main+0x75c>)
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	4613      	mov	r3, r2
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	4413      	add	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	440b      	add	r3, r1
 80043ee:	3304      	adds	r3, #4
 80043f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fc51 	bl	8000c9c <__aeabi_i2f>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4a32      	ldr	r2, [pc, #200]	; (80044c8 <main+0x760>)
 80043fe:	6093      	str	r3, [r2, #8]

			SP_RED = AFE_RED[i];
 8004400:	4a32      	ldr	r2, [pc, #200]	; (80044cc <main+0x764>)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004408:	4a31      	ldr	r2, [pc, #196]	; (80044d0 <main+0x768>)
 800440a:	6013      	str	r3, [r2, #0]
			SP_IR = AFE_IR[i];
 800440c:	4a31      	ldr	r2, [pc, #196]	; (80044d4 <main+0x76c>)
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004414:	4a30      	ldr	r2, [pc, #192]	; (80044d8 <main+0x770>)
 8004416:	6013      	str	r3, [r2, #0]
			HAL_Delay(30); // for monitor alignment
 8004418:	201e      	movs	r0, #30
 800441a:	f001 f89d 	bl	8005558 <HAL_Delay>
		for (int i = 0; i < LED_DEPTH; i++) {
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3301      	adds	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b18      	cmp	r3, #24
 8004428:	dd90      	ble.n	800434c <main+0x5e4>
		}

		counter++;
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <main+0x774>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <main+0x774>)
 8004432:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004434:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <main+0x778>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2200      	movs	r2, #0
 800443a:	625a      	str	r2, [r3, #36]	; 0x24
		LED_OFF_tim = 0;
 800443c:	4b29      	ldr	r3, [pc, #164]	; (80044e4 <main+0x77c>)
 800443e:	2200      	movs	r2, #0
 8004440:	801a      	strh	r2, [r3, #0]
		LED_update(temperature, HR_DISP, SP_DISP);
 8004442:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <main+0x780>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc fe7e 	bl	8001148 <__aeabi_f2uiz>
 800444c:	4603      	mov	r3, r0
 800444e:	b2dc      	uxtb	r4, r3
 8004450:	4b26      	ldr	r3, [pc, #152]	; (80044ec <main+0x784>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc fe77 	bl	8001148 <__aeabi_f2uiz>
 800445a:	4603      	mov	r3, r0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	4a24      	ldr	r2, [pc, #144]	; (80044f0 <main+0x788>)
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	4619      	mov	r1, r3
 8004466:	4620      	mov	r0, r4
 8004468:	f7fe ff40 	bl	80032ec <LED_update>
		printf_bee_response();
 800446c:	f7fd fb3c 	bl	8001ae8 <printf_bee_response>

		// fuzz
		// uint8_t tmp[3] = { counter % 128, counter + 5, counter - 10 };
		// BEE_b_fnin((uint8_t*) tmp, 3);

		tx_buff[0] = (uint8_t) HR_DISP;
 8004470:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <main+0x784>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fc fe67 	bl	8001148 <__aeabi_f2uiz>
 800447a:	4603      	mov	r3, r0
 800447c:	b2da      	uxtb	r2, r3
 800447e:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <main+0x78c>)
 8004480:	701a      	strb	r2, [r3, #0]
		tx_buff[1] = (uint8_t) temperature;
 8004482:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <main+0x780>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc fe5e 	bl	8001148 <__aeabi_f2uiz>
 800448c:	4603      	mov	r3, r0
 800448e:	b2da      	uxtb	r2, r3
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <main+0x78c>)
 8004492:	705a      	strb	r2, [r3, #1]
		tx_buff[2] = (uint8_t) SP_DISP;
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <main+0x788>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <main+0x78c>)
 800449c:	709a      	strb	r2, [r3, #2]

		BEE_b_fnin((uint8_t*) tx_buff, 3);
 800449e:	2103      	movs	r1, #3
 80044a0:	4814      	ldr	r0, [pc, #80]	; (80044f4 <main+0x78c>)
 80044a2:	f7fd faef 	bl	8001a84 <BEE_b_fnin>
	while (1) {
 80044a6:	e564      	b.n	8003f72 <main+0x20a>
 80044a8:	20000a74 	.word	0x20000a74
 80044ac:	20000ae4 	.word	0x20000ae4
 80044b0:	200005dc 	.word	0x200005dc
 80044b4:	20000ad8 	.word	0x20000ad8
 80044b8:	20000640 	.word	0x20000640
 80044bc:	20000adc 	.word	0x20000adc
 80044c0:	20000ae0 	.word	0x20000ae0
 80044c4:	20000884 	.word	0x20000884
 80044c8:	20000ae8 	.word	0x20000ae8
 80044cc:	20000994 	.word	0x20000994
 80044d0:	20000af4 	.word	0x20000af4
 80044d4:	200009f8 	.word	0x200009f8
 80044d8:	20000af8 	.word	0x20000af8
 80044dc:	20000afc 	.word	0x20000afc
 80044e0:	20000fec 	.word	0x20000fec
 80044e4:	20000880 	.word	0x20000880
 80044e8:	20000924 	.word	0x20000924
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	20000a60 	.word	0x20000a60
 80044f4:	20000a70 	.word	0x20000a70

080044f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b094      	sub	sp, #80	; 0x50
 80044fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80044fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004502:	2228      	movs	r2, #40	; 0x28
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f008 fde2 	bl	800d0d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800451c:	1d3b      	adds	r3, r7, #4
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	609a      	str	r2, [r3, #8]
 8004526:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004528:	2302      	movs	r3, #2
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800452c:	2301      	movs	r3, #1
 800452e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004530:	2310      	movs	r3, #16
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004534:	2302      	movs	r3, #2
 8004536:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004538:	2300      	movs	r3, #0
 800453a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800453c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004540:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004546:	4618      	mov	r0, r3
 8004548:	f005 f996 	bl	8009878 <HAL_RCC_OscConfig>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <SystemClock_Config+0x5e>
		Error_Handler();
 8004552:	f000 f91f 	bl	8004794 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004556:	230f      	movs	r3, #15
 8004558:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800455a:	2302      	movs	r3, #2
 800455c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004566:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004568:	2300      	movs	r3, #0
 800456a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800456c:	f107 0314 	add.w	r3, r7, #20
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f005 fcee 	bl	8009f54 <HAL_RCC_ClockConfig>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <SystemClock_Config+0x8a>
		Error_Handler();
 800457e:	f000 f909 	bl	8004794 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004582:	2302      	movs	r3, #2
 8004584:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8004586:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800458a:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	4618      	mov	r0, r3
 8004590:	f005 ff1e 	bl	800a3d0 <HAL_RCCEx_PeriphCLKConfig>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <SystemClock_Config+0xa6>
		Error_Handler();
 800459a:	f000 f8fb 	bl	8004794 <Error_Handler>
	}
}
 800459e:	bf00      	nop
 80045a0:	3750      	adds	r7, #80	; 0x50
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// tim2 = control led
// tim3 = control AFE power supply
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b8:	d110      	bne.n	80045dc <HAL_TIM_PeriodElapsedCallback+0x34>
		if (LED_OFF_tim++ > LED_ON_TIME && LED_ON) {
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	b291      	uxth	r1, r2
 80045c2:	4a0f      	ldr	r2, [pc, #60]	; (8004600 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80045c4:	8011      	strh	r1, [r2, #0]
 80045c6:	2b3c      	cmp	r3, #60	; 0x3c
 80045c8:	d908      	bls.n	80045dc <HAL_TIM_PeriodElapsedCallback+0x34>
 80045ca:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_TIM_PeriodElapsedCallback+0x34>
			LED_off();
 80045d2:	f000 f839 	bl	8004648 <LED_off>
			LED_ON = RESET;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
		}
	}
	if (htim->Instance == TIM3) {
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d108      	bne.n	80045f8 <HAL_TIM_PeriodElapsedCallback+0x50>
		if (!IDLE) {
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_TIM_PeriodElapsedCallback+0x50>
			TPS_on();
 80045ee:	f000 f83d 	bl	800466c <TPS_on>
			AFE_status = SET;
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
		}

	}

}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000880 	.word	0x20000880
 8004604:	20000000 	.word	0x20000000
 8004608:	40000400 	.word	0x40000400
 800460c:	20000a64 	.word	0x20000a64
 8004610:	20000004 	.word	0x20000004

08004614 <LED_on>:

// Switch on LEd and init it
void LED_on() {
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
	// RESET = 0
	HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 8004618:	2201      	movs	r2, #1
 800461a:	2102      	movs	r1, #2
 800461c:	4808      	ldr	r0, [pc, #32]	; (8004640 <LED_on+0x2c>)
 800461e:	f002 fa5d 	bl	8006adc <HAL_GPIO_WritePin>
	// LED_ON = 1
	HAL_GPIO_WritePin(OLED_ON_GPIO_Port, OLED_ON_Pin, GPIO_PIN_SET);
 8004622:	2201      	movs	r2, #1
 8004624:	2120      	movs	r1, #32
 8004626:	4807      	ldr	r0, [pc, #28]	; (8004644 <LED_on+0x30>)
 8004628:	f002 fa58 	bl	8006adc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800462c:	200a      	movs	r0, #10
 800462e:	f000 ff93 	bl	8005558 <HAL_Delay>
	// INIT
	LED_init();
 8004632:	f7fe fe4f 	bl	80032d4 <LED_init>
	// Show logo
	HAL_Delay(10);
 8004636:	200a      	movs	r0, #10
 8004638:	f000 ff8e 	bl	8005558 <HAL_Delay>
}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40011400 	.word	0x40011400
 8004644:	40010c00 	.word	0x40010c00

08004648 <LED_off>:

// Switch off LED
void LED_off() {
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
	// RESET = 1
	HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 800464c:	2200      	movs	r2, #0
 800464e:	2102      	movs	r1, #2
 8004650:	4804      	ldr	r0, [pc, #16]	; (8004664 <LED_off+0x1c>)
 8004652:	f002 fa43 	bl	8006adc <HAL_GPIO_WritePin>
	// LED_ON = 0
	HAL_GPIO_WritePin(OLED_ON_GPIO_Port, OLED_ON_Pin, GPIO_PIN_RESET);
 8004656:	2200      	movs	r2, #0
 8004658:	2120      	movs	r1, #32
 800465a:	4803      	ldr	r0, [pc, #12]	; (8004668 <LED_off+0x20>)
 800465c:	f002 fa3e 	bl	8006adc <HAL_GPIO_WritePin>
}
 8004660:	bf00      	nop
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40011400 	.word	0x40011400
 8004668:	40010c00 	.word	0x40010c00

0800466c <TPS_on>:

// Switch on AFE LED supply
void TPS_on() {
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
	HR_OK = 0;
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <TPS_on+0x1c>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(TPS61099_EN_GPIO_Port, TPS61099_EN_Pin, GPIO_PIN_SET);
 8004676:	2201      	movs	r2, #1
 8004678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800467c:	4803      	ldr	r0, [pc, #12]	; (800468c <TPS_on+0x20>)
 800467e:	f002 fa2d 	bl	8006adc <HAL_GPIO_WritePin>
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000a6c 	.word	0x20000a6c
 800468c:	40010800 	.word	0x40010800

08004690 <getAverageFloat>:
// Switch off AFE LED supply
void TPS_off() {
	HAL_GPIO_WritePin(TPS61099_EN_GPIO_Port, TPS61099_EN_Pin, GPIO_PIN_RESET);
}

float getAverageFloat(float *array, uint16_t size) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
	float sum = 0.0;
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < size; i++) {
 80046a2:	2300      	movs	r3, #0
 80046a4:	817b      	strh	r3, [r7, #10]
 80046a6:	e00d      	b.n	80046c4 <getAverageFloat+0x34>
		sum += array[i];
 80046a8:	897b      	ldrh	r3, [r7, #10]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4413      	add	r3, r2
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4619      	mov	r1, r3
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7fc fa3d 	bl	8000b34 <__addsf3>
 80046ba:	4603      	mov	r3, r0
 80046bc:	60fb      	str	r3, [r7, #12]
	for (uint16_t i = 0; i < size; i++) {
 80046be:	897b      	ldrh	r3, [r7, #10]
 80046c0:	3301      	adds	r3, #1
 80046c2:	817b      	strh	r3, [r7, #10]
 80046c4:	897a      	ldrh	r2, [r7, #10]
 80046c6:	887b      	ldrh	r3, [r7, #2]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d3ed      	bcc.n	80046a8 <getAverageFloat+0x18>
	}
	return sum / size;
 80046cc:	887b      	ldrh	r3, [r7, #2]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fae4 	bl	8000c9c <__aeabi_i2f>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4619      	mov	r1, r3
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7fc fbe7 	bl	8000eac <__aeabi_fdiv>
 80046de:	4603      	mov	r3, r0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <platform_write>:
	}
	return result;
}

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	461a      	mov	r2, r3
 80046f4:	460b      	mov	r3, r1
 80046f6:	72fb      	strb	r3, [r7, #11]
 80046f8:	4613      	mov	r3, r2
 80046fa:	813b      	strh	r3, [r7, #8]
	while (HAL_I2C_GetState(handle) != HAL_I2C_STATE_READY)
 80046fc:	bf00      	nop
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f003 fa30 	bl	8007b64 <HAL_I2C_GetState>
 8004704:	4603      	mov	r3, r0
 8004706:	2b20      	cmp	r3, #32
 8004708:	d1f9      	bne.n	80046fe <platform_write+0x16>
		;
	HAL_I2C_Mem_Write_DMA(handle, LIS2DTW12_I2C_ADD_L, reg,
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	b29a      	uxth	r2, r3
 800470e:	893b      	ldrh	r3, [r7, #8]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2301      	movs	r3, #1
 8004718:	2131      	movs	r1, #49	; 0x31
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f002 fe48 	bl	80073b0 <HAL_I2C_Mem_Write_DMA>
	I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len);
	return 0;
 8004720:	2300      	movs	r3, #0

}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 800472a:	b580      	push	{r7, lr}
 800472c:	b088      	sub	sp, #32
 800472e:	af04      	add	r7, sp, #16
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	461a      	mov	r2, r3
 8004736:	460b      	mov	r3, r1
 8004738:	72fb      	strb	r3, [r7, #11]
 800473a:	4613      	mov	r3, r2
 800473c:	813b      	strh	r3, [r7, #8]
	while (HAL_I2C_GetState(handle) != HAL_I2C_STATE_READY)
 800473e:	bf00      	nop
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f003 fa0f 	bl	8007b64 <HAL_I2C_GetState>
 8004746:	4603      	mov	r3, r0
 8004748:	2b20      	cmp	r3, #32
 800474a:	d1f9      	bne.n	8004740 <platform_read+0x16>
		;
	HAL_I2C_Mem_Read(handle, LIS2DTW12_I2C_ADD_L, reg,
 800474c:	7afb      	ldrb	r3, [r7, #11]
 800474e:	b29a      	uxth	r2, r3
 8004750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004754:	9302      	str	r3, [sp, #8]
 8004756:	893b      	ldrh	r3, [r7, #8]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2301      	movs	r3, #1
 8004760:	2131      	movs	r1, #49	; 0x31
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f002 fbb0 	bl	8006ec8 <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	return 0;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <platform_delay>:
		float weight = index - lower_index;
		dist[i] = src[lower_index] * (1 - weight) + src[upper_index] * weight;
	}
}

static void platform_delay(uint32_t ms) {
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 feec 	bl	8005558 <HAL_Delay>
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <platform_init>:

static void platform_init(void) {
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
	return;
 800478c:	bf00      	nop
}
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	NVIC_SystemReset();
 8004798:	f7ff fa8a 	bl	8003cb0 <__NVIC_SystemReset>

0800479c <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param Har line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <MX_SPI1_Init+0x64>)
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <MX_SPI1_Init+0x68>)
 80047b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80047ba:	4b16      	ldr	r3, [pc, #88]	; (8004814 <MX_SPI1_Init+0x64>)
 80047bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80047c2:	4b14      	ldr	r3, [pc, #80]	; (8004814 <MX_SPI1_Init+0x64>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <MX_SPI1_Init+0x64>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <MX_SPI1_Init+0x64>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <MX_SPI1_Init+0x64>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80047da:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <MX_SPI1_Init+0x64>)
 80047dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <MX_SPI1_Init+0x64>)
 80047e4:	2218      	movs	r2, #24
 80047e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047e8:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <MX_SPI1_Init+0x64>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <MX_SPI1_Init+0x64>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <MX_SPI1_Init+0x64>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <MX_SPI1_Init+0x64>)
 80047fc:	220a      	movs	r2, #10
 80047fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004800:	4804      	ldr	r0, [pc, #16]	; (8004814 <MX_SPI1_Init+0x64>)
 8004802:	f005 feef 	bl	800a5e4 <HAL_SPI_Init>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800480c:	f7ff ffc2 	bl	8004794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000b00 	.word	0x20000b00
 8004818:	40013000 	.word	0x40013000

0800481c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004824:	f107 0310 	add.w	r3, r7, #16
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a47      	ldr	r2, [pc, #284]	; (8004954 <HAL_SPI_MspInit+0x138>)
 8004838:	4293      	cmp	r3, r2
 800483a:	f040 8086 	bne.w	800494a <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800483e:	4b46      	ldr	r3, [pc, #280]	; (8004958 <HAL_SPI_MspInit+0x13c>)
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	4a45      	ldr	r2, [pc, #276]	; (8004958 <HAL_SPI_MspInit+0x13c>)
 8004844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004848:	6193      	str	r3, [r2, #24]
 800484a:	4b43      	ldr	r3, [pc, #268]	; (8004958 <HAL_SPI_MspInit+0x13c>)
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004856:	4b40      	ldr	r3, [pc, #256]	; (8004958 <HAL_SPI_MspInit+0x13c>)
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <HAL_SPI_MspInit+0x13c>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6193      	str	r3, [r2, #24]
 8004862:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <HAL_SPI_MspInit+0x13c>)
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800486e:	23a0      	movs	r3, #160	; 0xa0
 8004870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004872:	2302      	movs	r3, #2
 8004874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004876:	2303      	movs	r3, #3
 8004878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800487a:	f107 0310 	add.w	r3, r7, #16
 800487e:	4619      	mov	r1, r3
 8004880:	4836      	ldr	r0, [pc, #216]	; (800495c <HAL_SPI_MspInit+0x140>)
 8004882:	f001 fe97 	bl	80065b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004886:	2340      	movs	r3, #64	; 0x40
 8004888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004892:	f107 0310 	add.w	r3, r7, #16
 8004896:	4619      	mov	r1, r3
 8004898:	4830      	ldr	r0, [pc, #192]	; (800495c <HAL_SPI_MspInit+0x140>)
 800489a:	f001 fe8b 	bl	80065b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048a0:	4a30      	ldr	r2, [pc, #192]	; (8004964 <HAL_SPI_MspInit+0x148>)
 80048a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048a4:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048a6:	2210      	movs	r2, #16
 80048a8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048aa:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048b2:	2280      	movs	r2, #128	; 0x80
 80048b4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048bc:	4b28      	ldr	r3, [pc, #160]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048be:	2200      	movs	r2, #0
 80048c0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80048c2:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048c8:	4b25      	ldr	r3, [pc, #148]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048ca:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80048ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80048d0:	4823      	ldr	r0, [pc, #140]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048d2:	f001 fb11 	bl	8005ef8 <HAL_DMA_Init>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 80048dc:	f7ff ff5a 	bl	8004794 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048e4:	649a      	str	r2, [r3, #72]	; 0x48
 80048e6:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <HAL_SPI_MspInit+0x144>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80048ec:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 80048ee:	4a1f      	ldr	r2, [pc, #124]	; (800496c <HAL_SPI_MspInit+0x150>)
 80048f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048f8:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004904:	4b18      	ldr	r3, [pc, #96]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800490a:	4b17      	ldr	r3, [pc, #92]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 800490c:	2200      	movs	r2, #0
 800490e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004910:	4b15      	ldr	r3, [pc, #84]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 8004912:	2200      	movs	r2, #0
 8004914:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 8004918:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800491c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800491e:	4812      	ldr	r0, [pc, #72]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 8004920:	f001 faea 	bl	8005ef8 <HAL_DMA_Init>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 800492a:	f7ff ff33 	bl	8004794 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a0d      	ldr	r2, [pc, #52]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 8004932:	64da      	str	r2, [r3, #76]	; 0x4c
 8004934:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <HAL_SPI_MspInit+0x14c>)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800493a:	2200      	movs	r2, #0
 800493c:	2100      	movs	r1, #0
 800493e:	2023      	movs	r0, #35	; 0x23
 8004940:	f001 fa8a 	bl	8005e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004944:	2023      	movs	r0, #35	; 0x23
 8004946:	f001 fab3 	bl	8005eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800494a:	bf00      	nop
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40013000 	.word	0x40013000
 8004958:	40021000 	.word	0x40021000
 800495c:	40010800 	.word	0x40010800
 8004960:	20000b58 	.word	0x20000b58
 8004964:	40020030 	.word	0x40020030
 8004968:	20000b9c 	.word	0x20000b9c
 800496c:	4002001c 	.word	0x4002001c

08004970 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af02      	add	r7, sp, #8
 8004982:	4603      	mov	r3, r0
 8004984:	71fb      	strb	r3, [r7, #7]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8004986:	bf00      	nop
 8004988:	4809      	ldr	r0, [pc, #36]	; (80049b0 <ssd1306_WriteCommand+0x34>)
 800498a:	f003 f8eb 	bl	8007b64 <HAL_I2C_GetState>
 800498e:	4603      	mov	r3, r0
 8004990:	2b20      	cmp	r3, #32
 8004992:	d1f9      	bne.n	8004988 <ssd1306_WriteCommand+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
 8004994:	2301      	movs	r3, #1
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	1dfb      	adds	r3, r7, #7
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2301      	movs	r3, #1
 800499e:	2200      	movs	r2, #0
 80049a0:	2178      	movs	r1, #120	; 0x78
 80049a2:	4803      	ldr	r0, [pc, #12]	; (80049b0 <ssd1306_WriteCommand+0x34>)
 80049a4:	f002 fd04 	bl	80073b0 <HAL_I2C_Mem_Write_DMA>
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	200006a4 	.word	0x200006a4

080049b4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 80049be:	bf00      	nop
 80049c0:	480a      	ldr	r0, [pc, #40]	; (80049ec <ssd1306_WriteData+0x38>)
 80049c2:	f003 f8cf 	bl	8007b64 <HAL_I2C_GetState>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d1f9      	bne.n	80049c0 <ssd1306_WriteData+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	2301      	movs	r3, #1
 80049d8:	2240      	movs	r2, #64	; 0x40
 80049da:	2178      	movs	r1, #120	; 0x78
 80049dc:	4803      	ldr	r0, [pc, #12]	; (80049ec <ssd1306_WriteData+0x38>)
 80049de:	f002 fce7 	bl	80073b0 <HAL_I2C_Mem_Write_DMA>
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200006a4 	.word	0x200006a4

080049f0 <ssd1306_Init>:
	}
	return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80049f4:	f7ff ffbc 	bl	8004970 <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 80049f8:	2064      	movs	r0, #100	; 0x64
 80049fa:	f000 fdad 	bl	8005558 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 80049fe:	2000      	movs	r0, #0
 8004a00:	f000 fa30 	bl	8004e64 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004a04:	2020      	movs	r0, #32
 8004a06:	f7ff ffb9 	bl	800497c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	f7ff ffb6 	bl	800497c <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004a10:	20b0      	movs	r0, #176	; 0xb0
 8004a12:	f7ff ffb3 	bl	800497c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
	ssd1306_WriteCommand(0xC0); // Mirror vertically
 8004a16:	20c0      	movs	r0, #192	; 0xc0
 8004a18:	f7ff ffb0 	bl	800497c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7ff ffad 	bl	800497c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8004a22:	2010      	movs	r0, #16
 8004a24:	f7ff ffaa 	bl	800497c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004a28:	2040      	movs	r0, #64	; 0x40
 8004a2a:	f7ff ffa7 	bl	800497c <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 8004a2e:	20ff      	movs	r0, #255	; 0xff
 8004a30:	f000 fa05 	bl	8004e3e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
	ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8004a34:	20a0      	movs	r0, #160	; 0xa0
 8004a36:	f7ff ffa1 	bl	800497c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 8004a3a:	20a6      	movs	r0, #166	; 0xa6
 8004a3c:	f7ff ff9e 	bl	800497c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004a40:	20a8      	movs	r0, #168	; 0xa8
 8004a42:	f7ff ff9b 	bl	800497c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 8004a46:	203f      	movs	r0, #63	; 0x3f
 8004a48:	f7ff ff98 	bl	800497c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004a4c:	20a4      	movs	r0, #164	; 0xa4
 8004a4e:	f7ff ff95 	bl	800497c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004a52:	20d3      	movs	r0, #211	; 0xd3
 8004a54:	f7ff ff92 	bl	800497c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f7ff ff8f 	bl	800497c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004a5e:	20d5      	movs	r0, #213	; 0xd5
 8004a60:	f7ff ff8c 	bl	800497c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004a64:	20f0      	movs	r0, #240	; 0xf0
 8004a66:	f7ff ff89 	bl	800497c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004a6a:	20d9      	movs	r0, #217	; 0xd9
 8004a6c:	f7ff ff86 	bl	800497c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8004a70:	2022      	movs	r0, #34	; 0x22
 8004a72:	f7ff ff83 	bl	800497c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004a76:	20da      	movs	r0, #218	; 0xda
 8004a78:	f7ff ff80 	bl	800497c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 8004a7c:	2012      	movs	r0, #18
 8004a7e:	f7ff ff7d 	bl	800497c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 8004a82:	20db      	movs	r0, #219	; 0xdb
 8004a84:	f7ff ff7a 	bl	800497c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004a88:	2020      	movs	r0, #32
 8004a8a:	f7ff ff77 	bl	800497c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004a8e:	208d      	movs	r0, #141	; 0x8d
 8004a90:	f7ff ff74 	bl	800497c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8004a94:	2014      	movs	r0, #20
 8004a96:	f7ff ff71 	bl	800497c <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	f000 f9e2 	bl	8004e64 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f000 f80f 	bl	8004ac4 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8004aa6:	f000 f82f 	bl	8004b08 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <ssd1306_Init+0xd0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <ssd1306_Init+0xd0>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8004ab6:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <ssd1306_Init+0xd0>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	711a      	strb	r2, [r3, #4]
}
 8004abc:	bf00      	nop
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000fe0 	.word	0x20000fe0

08004ac4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	e00d      	b.n	8004af0 <ssd1306_Fill+0x2c>
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <ssd1306_Fill+0x1a>
 8004ada:	2100      	movs	r1, #0
 8004adc:	e000      	b.n	8004ae0 <ssd1306_Fill+0x1c>
 8004ade:	21ff      	movs	r1, #255	; 0xff
 8004ae0:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <ssd1306_Fill+0x40>)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	460a      	mov	r2, r1
 8004ae8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3301      	adds	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af6:	d3ed      	bcc.n	8004ad4 <ssd1306_Fill+0x10>
	}
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr
 8004b04:	20000be0 	.word	0x20000be0

08004b08 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8004b0e:	2300      	movs	r3, #0
 8004b10:	71fb      	strb	r3, [r7, #7]
 8004b12:	e016      	b.n	8004b42 <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	3b50      	subs	r3, #80	; 0x50
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff ff2e 	bl	800497c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004b20:	2008      	movs	r0, #8
 8004b22:	f7ff ff2b 	bl	800497c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004b26:	2012      	movs	r0, #18
 8004b28:	f7ff ff28 	bl	800497c <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	01db      	lsls	r3, r3, #7
 8004b30:	4a08      	ldr	r2, [pc, #32]	; (8004b54 <ssd1306_UpdateScreen+0x4c>)
 8004b32:	4413      	add	r3, r2
 8004b34:	2180      	movs	r1, #128	; 0x80
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ff3c 	bl	80049b4 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	71fb      	strb	r3, [r7, #7]
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	2b07      	cmp	r3, #7
 8004b46:	d9e5      	bls.n	8004b14 <ssd1306_UpdateScreen+0xc>
	}
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000be0 	.word	0x20000be0

08004b58 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
 8004b62:	460b      	mov	r3, r1
 8004b64:	71bb      	strb	r3, [r7, #6]
 8004b66:	4613      	mov	r3, r2
 8004b68:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	db3d      	blt.n	8004bee <ssd1306_DrawPixel+0x96>
 8004b72:	79bb      	ldrb	r3, [r7, #6]
 8004b74:	2b3f      	cmp	r3, #63	; 0x3f
 8004b76:	d83a      	bhi.n	8004bee <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 8004b78:	797b      	ldrb	r3, [r7, #5]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d11a      	bne.n	8004bb4 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004b7e:	79fa      	ldrb	r2, [r7, #7]
 8004b80:	79bb      	ldrb	r3, [r7, #6]
 8004b82:	08db      	lsrs	r3, r3, #3
 8004b84:	b2d8      	uxtb	r0, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	01db      	lsls	r3, r3, #7
 8004b8a:	4413      	add	r3, r2
 8004b8c:	4a1a      	ldr	r2, [pc, #104]	; (8004bf8 <ssd1306_DrawPixel+0xa0>)
 8004b8e:	5cd3      	ldrb	r3, [r2, r3]
 8004b90:	b25a      	sxtb	r2, r3
 8004b92:	79bb      	ldrb	r3, [r7, #6]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	b25b      	sxtb	r3, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b259      	sxtb	r1, r3
 8004ba4:	79fa      	ldrb	r2, [r7, #7]
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	01db      	lsls	r3, r3, #7
 8004baa:	4413      	add	r3, r2
 8004bac:	b2c9      	uxtb	r1, r1
 8004bae:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <ssd1306_DrawPixel+0xa0>)
 8004bb0:	54d1      	strb	r1, [r2, r3]
 8004bb2:	e01d      	b.n	8004bf0 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004bb4:	79fa      	ldrb	r2, [r7, #7]
 8004bb6:	79bb      	ldrb	r3, [r7, #6]
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	b2d8      	uxtb	r0, r3
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	01db      	lsls	r3, r3, #7
 8004bc0:	4413      	add	r3, r2
 8004bc2:	4a0d      	ldr	r2, [pc, #52]	; (8004bf8 <ssd1306_DrawPixel+0xa0>)
 8004bc4:	5cd3      	ldrb	r3, [r2, r3]
 8004bc6:	b25a      	sxtb	r2, r3
 8004bc8:	79bb      	ldrb	r3, [r7, #6]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	2101      	movs	r1, #1
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	b25b      	sxtb	r3, r3
 8004bda:	4013      	ands	r3, r2
 8004bdc:	b259      	sxtb	r1, r3
 8004bde:	79fa      	ldrb	r2, [r7, #7]
 8004be0:	4603      	mov	r3, r0
 8004be2:	01db      	lsls	r3, r3, #7
 8004be4:	4413      	add	r3, r2
 8004be6:	b2c9      	uxtb	r1, r1
 8004be8:	4a03      	ldr	r2, [pc, #12]	; (8004bf8 <ssd1306_DrawPixel+0xa0>)
 8004bea:	54d1      	strb	r1, [r2, r3]
 8004bec:	e000      	b.n	8004bf0 <ssd1306_DrawPixel+0x98>
		return;
 8004bee:	bf00      	nop
	}
}
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr
 8004bf8:	20000be0 	.word	0x20000be0

08004bfc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b089      	sub	sp, #36	; 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	1d38      	adds	r0, r7, #4
 8004c06:	e880 0006 	stmia.w	r0, {r1, r2}
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4623      	mov	r3, r4
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	4613      	mov	r3, r2
 8004c12:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b1f      	cmp	r3, #31
 8004c18:	d902      	bls.n	8004c20 <ssd1306_WriteChar+0x24>
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b7e      	cmp	r3, #126	; 0x7e
 8004c1e:	d901      	bls.n	8004c24 <ssd1306_WriteChar+0x28>
		return 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e06d      	b.n	8004d00 <ssd1306_WriteChar+0x104>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004c24:	4b38      	ldr	r3, [pc, #224]	; (8004d08 <ssd1306_WriteChar+0x10c>)
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	793b      	ldrb	r3, [r7, #4]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	2b80      	cmp	r3, #128	; 0x80
 8004c30:	dc06      	bgt.n	8004c40 <ssd1306_WriteChar+0x44>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight)) {
 8004c32:	4b35      	ldr	r3, [pc, #212]	; (8004d08 <ssd1306_WriteChar+0x10c>)
 8004c34:	885b      	ldrh	r3, [r3, #2]
 8004c36:	461a      	mov	r2, r3
 8004c38:	797b      	ldrb	r3, [r7, #5]
 8004c3a:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	dd01      	ble.n	8004c44 <ssd1306_WriteChar+0x48>
		// Not enough space on current line
		return 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e05d      	b.n	8004d00 <ssd1306_WriteChar+0x104>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++) {
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	e04c      	b.n	8004ce4 <ssd1306_WriteChar+0xe8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	3b20      	subs	r3, #32
 8004c50:	7979      	ldrb	r1, [r7, #5]
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4619      	mov	r1, r3
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	440b      	add	r3, r1
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	e034      	b.n	8004cd4 <ssd1306_WriteChar+0xd8>
			if ((b << j) & 0x8000) {
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d012      	beq.n	8004ca0 <ssd1306_WriteChar+0xa4>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8004c7a:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <ssd1306_WriteChar+0x10c>)
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4413      	add	r3, r2
 8004c86:	b2d8      	uxtb	r0, r3
 8004c88:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <ssd1306_WriteChar+0x10c>)
 8004c8a:	885b      	ldrh	r3, [r3, #2]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	7bba      	ldrb	r2, [r7, #14]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f7ff ff5d 	bl	8004b58 <ssd1306_DrawPixel>
 8004c9e:	e016      	b.n	8004cce <ssd1306_WriteChar+0xd2>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <ssd1306_WriteChar+0x10c>)
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	b2d8      	uxtb	r0, r3
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <ssd1306_WriteChar+0x10c>)
 8004cb0:	885b      	ldrh	r3, [r3, #2]
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	b2d9      	uxtb	r1, r3
 8004cbc:	7bbb      	ldrb	r3, [r7, #14]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f7ff ff45 	bl	8004b58 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	793b      	ldrb	r3, [r7, #4]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d3c5      	bcc.n	8004c6a <ssd1306_WriteChar+0x6e>
	for (i = 0; i < Font.FontHeight; i++) {
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	797b      	ldrb	r3, [r7, #5]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d3ad      	bcc.n	8004c4a <ssd1306_WriteChar+0x4e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <ssd1306_WriteChar+0x10c>)
 8004cf0:	881a      	ldrh	r2, [r3, #0]
 8004cf2:	793b      	ldrb	r3, [r7, #4]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <ssd1306_WriteChar+0x10c>)
 8004cfc:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3724      	adds	r7, #36	; 0x24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd90      	pop	{r4, r7, pc}
 8004d08:	20000fe0 	.word	0x20000fe0

08004d0c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	1d38      	adds	r0, r7, #4
 8004d16:	e880 0006 	stmia.w	r0, {r1, r2}
 8004d1a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) {
 8004d1c:	e012      	b.n	8004d44 <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	7818      	ldrb	r0, [r3, #0]
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	1d3a      	adds	r2, r7, #4
 8004d26:	ca06      	ldmia	r2, {r1, r2}
 8004d28:	f7ff ff68 	bl	8004bfc <ssd1306_WriteChar>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d002      	beq.n	8004d3e <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	e008      	b.n	8004d50 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e8      	bne.n	8004d1e <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	460a      	mov	r2, r1
 8004d62:	71fb      	strb	r3, [r7, #7]
 8004d64:	4613      	mov	r3, r2
 8004d66:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <ssd1306_SetCursor+0x2c>)
 8004d6e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8004d70:	79bb      	ldrb	r3, [r7, #6]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <ssd1306_SetCursor+0x2c>)
 8004d76:	805a      	strh	r2, [r3, #2]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000fe0 	.word	0x20000fe0

08004d88 <ssd1306_DrawBitmap>:
}

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char *bitmap,
		uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	603a      	str	r2, [r7, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
 8004d96:	460b      	mov	r3, r1
 8004d98:	71bb      	strb	r3, [r7, #6]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	717b      	strb	r3, [r7, #5]
	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004d9e:	797b      	ldrb	r3, [r7, #5]
 8004da0:	3307      	adds	r3, #7
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da00      	bge.n	8004da8 <ssd1306_DrawBitmap+0x20>
 8004da6:	3307      	adds	r3, #7
 8004da8:	10db      	asrs	r3, r3, #3
 8004daa:	817b      	strh	r3, [r7, #10]
	uint8_t byte = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]

	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	db3e      	blt.n	8004e36 <ssd1306_DrawBitmap+0xae>
 8004db8:	79bb      	ldrb	r3, [r7, #6]
 8004dba:	2b3f      	cmp	r3, #63	; 0x3f
 8004dbc:	d83b      	bhi.n	8004e36 <ssd1306_DrawBitmap+0xae>
		return;
	}

	for (uint8_t j = 0; j < h; j++, y++) {
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73bb      	strb	r3, [r7, #14]
 8004dc2:	e033      	b.n	8004e2c <ssd1306_DrawBitmap+0xa4>
		for (uint8_t i = 0; i < w; i++) {
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	737b      	strb	r3, [r7, #13]
 8004dc8:	e026      	b.n	8004e18 <ssd1306_DrawBitmap+0x90>
			if (i & 7)
 8004dca:	7b7b      	ldrb	r3, [r7, #13]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <ssd1306_DrawBitmap+0x54>
				byte <<= 1;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
 8004dda:	e00d      	b.n	8004df8 <ssd1306_DrawBitmap+0x70>
			else
				byte =
						(*(const unsigned char*) (&bitmap[j * byteWidth + i / 8]));
 8004ddc:	7bbb      	ldrb	r3, [r7, #14]
 8004dde:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004de2:	fb02 f303 	mul.w	r3, r2, r3
 8004de6:	7b7a      	ldrb	r2, [r7, #13]
 8004de8:	08d2      	lsrs	r2, r2, #3
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	4413      	add	r3, r2
 8004dee:	461a      	mov	r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4413      	add	r3, r2
				byte =
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	73fb      	strb	r3, [r7, #15]
			if (byte & 0x80)
 8004df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	da08      	bge.n	8004e12 <ssd1306_DrawBitmap+0x8a>
				ssd1306_DrawPixel(x + i, y, color);
 8004e00:	79fa      	ldrb	r2, [r7, #7]
 8004e02:	7b7b      	ldrb	r3, [r7, #13]
 8004e04:	4413      	add	r3, r2
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	7f3a      	ldrb	r2, [r7, #28]
 8004e0a:	79b9      	ldrb	r1, [r7, #6]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fea3 	bl	8004b58 <ssd1306_DrawPixel>
		for (uint8_t i = 0; i < w; i++) {
 8004e12:	7b7b      	ldrb	r3, [r7, #13]
 8004e14:	3301      	adds	r3, #1
 8004e16:	737b      	strb	r3, [r7, #13]
 8004e18:	7b7a      	ldrb	r2, [r7, #13]
 8004e1a:	797b      	ldrb	r3, [r7, #5]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d3d4      	bcc.n	8004dca <ssd1306_DrawBitmap+0x42>
	for (uint8_t j = 0; j < h; j++, y++) {
 8004e20:	7bbb      	ldrb	r3, [r7, #14]
 8004e22:	3301      	adds	r3, #1
 8004e24:	73bb      	strb	r3, [r7, #14]
 8004e26:	79bb      	ldrb	r3, [r7, #6]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	71bb      	strb	r3, [r7, #6]
 8004e2c:	7bba      	ldrb	r2, [r7, #14]
 8004e2e:	7e3b      	ldrb	r3, [r7, #24]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d3c7      	bcc.n	8004dc4 <ssd1306_DrawBitmap+0x3c>
		}
	}
	return;
 8004e34:	e000      	b.n	8004e38 <ssd1306_DrawBitmap+0xb0>
		return;
 8004e36:	bf00      	nop
}
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	4603      	mov	r3, r0
 8004e46:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 8004e48:	2381      	movs	r3, #129	; 0x81
 8004e4a:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fd94 	bl	800497c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fd90 	bl	800497c <ssd1306_WriteCommand>
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 8004e74:	23af      	movs	r3, #175	; 0xaf
 8004e76:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <ssd1306_SetDisplayOn+0x38>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	715a      	strb	r2, [r3, #5]
 8004e7e:	e004      	b.n	8004e8a <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 8004e80:	23ae      	movs	r3, #174	; 0xae
 8004e82:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <ssd1306_SetDisplayOn+0x38>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fd75 	bl	800497c <ssd1306_WriteCommand>
}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000fe0 	.word	0x20000fe0

08004ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004ea6:	4b13      	ldr	r3, [pc, #76]	; (8004ef4 <HAL_MspInit+0x54>)
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	4a12      	ldr	r2, [pc, #72]	; (8004ef4 <HAL_MspInit+0x54>)
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	6193      	str	r3, [r2, #24]
 8004eb2:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <HAL_MspInit+0x54>)
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <HAL_MspInit+0x54>)
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <HAL_MspInit+0x54>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	61d3      	str	r3, [r2, #28]
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <HAL_MspInit+0x54>)
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <HAL_MspInit+0x58>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <HAL_MspInit+0x58>)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40010000 	.word	0x40010000

08004efc <__NVIC_SystemReset>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004f00:	f3bf 8f4f 	dsb	sy
}
 8004f04:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <__NVIC_SystemReset+0x24>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f0e:	4904      	ldr	r1, [pc, #16]	; (8004f20 <__NVIC_SystemReset+0x24>)
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <__NVIC_SystemReset+0x28>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f16:	f3bf 8f4f 	dsb	sy
}
 8004f1a:	bf00      	nop
    __NOP();
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <__NVIC_SystemReset+0x20>
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	05fa0004 	.word	0x05fa0004

08004f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f2c:	e7fe      	b.n	8004f2c <NMI_Handler+0x4>

08004f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8004f32:	f7ff ffe3 	bl	8004efc <__NVIC_SystemReset>

08004f36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f3a:	e7fe      	b.n	8004f3a <MemManage_Handler+0x4>

08004f3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f40:	e7fe      	b.n	8004f40 <BusFault_Handler+0x4>

08004f42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f46:	e7fe      	b.n	8004f46 <UsageFault_Handler+0x4>

08004f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f4c:	bf00      	nop
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f70:	f000 fad6 	bl	8005520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004f7c:	4802      	ldr	r0, [pc, #8]	; (8004f88 <DMA1_Channel2_IRQHandler+0x10>)
 8004f7e:	f001 f9d9 	bl	8006334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000b9c 	.word	0x20000b9c

08004f8c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004f90:	4802      	ldr	r0, [pc, #8]	; (8004f9c <DMA1_Channel3_IRQHandler+0x10>)
 8004f92:	f001 f9cf 	bl	8006334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004f96:	bf00      	nop
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000b58 	.word	0x20000b58

08004fa0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004fa4:	4802      	ldr	r0, [pc, #8]	; (8004fb0 <DMA1_Channel6_IRQHandler+0x10>)
 8004fa6:	f001 f9c5 	bl	8006334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200006f8 	.word	0x200006f8

08004fb4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004fb8:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <DMA1_Channel7_IRQHandler+0x10>)
 8004fba:	f001 f9bb 	bl	8006334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004fbe:	bf00      	nop
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	2000073c 	.word	0x2000073c

08004fc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fcc:	4802      	ldr	r0, [pc, #8]	; (8004fd8 <TIM2_IRQHandler+0x10>)
 8004fce:	f006 fbdf 	bl	800b790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000fec 	.word	0x20000fec

08004fdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004fe0:	4802      	ldr	r0, [pc, #8]	; (8004fec <TIM3_IRQHandler+0x10>)
 8004fe2:	f006 fbd5 	bl	800b790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20001034 	.word	0x20001034

08004ff0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004ff4:	4802      	ldr	r0, [pc, #8]	; (8005000 <I2C1_EV_IRQHandler+0x10>)
 8004ff6:	f002 fb37 	bl	8007668 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200006a4 	.word	0x200006a4

08005004 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005008:	4802      	ldr	r0, [pc, #8]	; (8005014 <I2C1_ER_IRQHandler+0x10>)
 800500a:	f002 fc9e 	bl	800794a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	200006a4 	.word	0x200006a4

08005018 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800501c:	4802      	ldr	r0, [pc, #8]	; (8005028 <SPI1_IRQHandler+0x10>)
 800501e:	f005 ff2b 	bl	800ae78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000b00 	.word	0x20000b00

0800502c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005030:	4802      	ldr	r0, [pc, #8]	; (800503c <USART1_IRQHandler+0x10>)
 8005032:	f007 fb63 	bl	800c6fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	2000107c 	.word	0x2000107c

08005040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
	return 1;
 8005044:	2301      	movs	r3, #1
}
 8005046:	4618      	mov	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr

0800504e <_kill>:

int _kill(int pid, int sig)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005058:	f007 ffd8 	bl	800d00c <__errno>
 800505c:	4603      	mov	r3, r0
 800505e:	2216      	movs	r2, #22
 8005060:	601a      	str	r2, [r3, #0]
	return -1;
 8005062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <_exit>:

void _exit (int status)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005076:	f04f 31ff 	mov.w	r1, #4294967295
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff ffe7 	bl	800504e <_kill>
	while (1) {}		/* Make sure we hang here */
 8005080:	e7fe      	b.n	8005080 <_exit+0x12>

08005082 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e00a      	b.n	80050aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005094:	f3af 8000 	nop.w
 8005098:	4601      	mov	r1, r0
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	60ba      	str	r2, [r7, #8]
 80050a0:	b2ca      	uxtb	r2, r1
 80050a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3301      	adds	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	dbf0      	blt.n	8005094 <_read+0x12>
	}

return len;
 80050b2:	687b      	ldr	r3, [r7, #4]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <_close>:
	}
	return len;
}

int _close(int file)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	return -1;
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr

080050d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050e2:	605a      	str	r2, [r3, #4]
	return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <_isatty>:

int _isatty(int file)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	return 1;
 80050f8:	2301      	movs	r3, #1
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
	return 0;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005124:	4a14      	ldr	r2, [pc, #80]	; (8005178 <_sbrk+0x5c>)
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <_sbrk+0x60>)
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005130:	4b13      	ldr	r3, [pc, #76]	; (8005180 <_sbrk+0x64>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <_sbrk+0x64>)
 800513a:	4a12      	ldr	r2, [pc, #72]	; (8005184 <_sbrk+0x68>)
 800513c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800513e:	4b10      	ldr	r3, [pc, #64]	; (8005180 <_sbrk+0x64>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	429a      	cmp	r2, r3
 800514a:	d207      	bcs.n	800515c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800514c:	f007 ff5e 	bl	800d00c <__errno>
 8005150:	4603      	mov	r3, r0
 8005152:	220c      	movs	r2, #12
 8005154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005156:	f04f 33ff 	mov.w	r3, #4294967295
 800515a:	e009      	b.n	8005170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <_sbrk+0x64>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <_sbrk+0x64>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4413      	add	r3, r2
 800516a:	4a05      	ldr	r2, [pc, #20]	; (8005180 <_sbrk+0x64>)
 800516c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800516e:	68fb      	ldr	r3, [r7, #12]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20005000 	.word	0x20005000
 800517c:	00000400 	.word	0x00000400
 8005180:	20000fe8 	.word	0x20000fe8
 8005184:	200010d8 	.word	0x200010d8

08005188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800519a:	f107 0308 	add.w	r3, r7, #8
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	609a      	str	r2, [r3, #8]
 80051a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a8:	463b      	mov	r3, r7
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80051b0:	4b1e      	ldr	r3, [pc, #120]	; (800522c <MX_TIM2_Init+0x98>)
 80051b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1280;
 80051b8:	4b1c      	ldr	r3, [pc, #112]	; (800522c <MX_TIM2_Init+0x98>)
 80051ba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80051be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <MX_TIM2_Init+0x98>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 80051c6:	4b19      	ldr	r3, [pc, #100]	; (800522c <MX_TIM2_Init+0x98>)
 80051c8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80051cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <MX_TIM2_Init+0x98>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051d4:	4b15      	ldr	r3, [pc, #84]	; (800522c <MX_TIM2_Init+0x98>)
 80051d6:	2280      	movs	r2, #128	; 0x80
 80051d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051da:	4814      	ldr	r0, [pc, #80]	; (800522c <MX_TIM2_Init+0x98>)
 80051dc:	f006 f9c2 	bl	800b564 <HAL_TIM_Base_Init>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80051e6:	f7ff fad5 	bl	8004794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	4619      	mov	r1, r3
 80051f6:	480d      	ldr	r0, [pc, #52]	; (800522c <MX_TIM2_Init+0x98>)
 80051f8:	f006 fbd2 	bl	800b9a0 <HAL_TIM_ConfigClockSource>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005202:	f7ff fac7 	bl	8004794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005206:	2300      	movs	r3, #0
 8005208:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800520e:	463b      	mov	r3, r7
 8005210:	4619      	mov	r1, r3
 8005212:	4806      	ldr	r0, [pc, #24]	; (800522c <MX_TIM2_Init+0x98>)
 8005214:	f006 ff8e 	bl	800c134 <HAL_TIMEx_MasterConfigSynchronization>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800521e:	f7ff fab9 	bl	8004794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005222:	bf00      	nop
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000fec 	.word	0x20000fec

08005230 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	605a      	str	r2, [r3, #4]
 8005240:	609a      	str	r2, [r3, #8]
 8005242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005244:	463b      	mov	r3, r7
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800524c:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <MX_TIM3_Init+0x94>)
 800524e:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <MX_TIM3_Init+0x98>)
 8005250:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8005252:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005254:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8005258:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800525a:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <MX_TIM3_Init+0x94>)
 800525c:	2200      	movs	r2, #0
 800525e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8005260:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005262:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005266:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005268:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <MX_TIM3_Init+0x94>)
 800526a:	2200      	movs	r2, #0
 800526c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005270:	2280      	movs	r2, #128	; 0x80
 8005272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005274:	4813      	ldr	r0, [pc, #76]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005276:	f006 f975 	bl	800b564 <HAL_TIM_Base_Init>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005280:	f7ff fa88 	bl	8004794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800528a:	f107 0308 	add.w	r3, r7, #8
 800528e:	4619      	mov	r1, r3
 8005290:	480c      	ldr	r0, [pc, #48]	; (80052c4 <MX_TIM3_Init+0x94>)
 8005292:	f006 fb85 	bl	800b9a0 <HAL_TIM_ConfigClockSource>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800529c:	f7ff fa7a 	bl	8004794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052a0:	2300      	movs	r3, #0
 80052a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80052a8:	463b      	mov	r3, r7
 80052aa:	4619      	mov	r1, r3
 80052ac:	4805      	ldr	r0, [pc, #20]	; (80052c4 <MX_TIM3_Init+0x94>)
 80052ae:	f006 ff41 	bl	800c134 <HAL_TIMEx_MasterConfigSynchronization>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80052b8:	f7ff fa6c 	bl	8004794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80052bc:	bf00      	nop
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20001034 	.word	0x20001034
 80052c8:	40000400 	.word	0x40000400

080052cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052dc:	d114      	bne.n	8005308 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80052de:	4b19      	ldr	r3, [pc, #100]	; (8005344 <HAL_TIM_Base_MspInit+0x78>)
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	4a18      	ldr	r2, [pc, #96]	; (8005344 <HAL_TIM_Base_MspInit+0x78>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	61d3      	str	r3, [r2, #28]
 80052ea:	4b16      	ldr	r3, [pc, #88]	; (8005344 <HAL_TIM_Base_MspInit+0x78>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80052f6:	2200      	movs	r2, #0
 80052f8:	2100      	movs	r1, #0
 80052fa:	201c      	movs	r0, #28
 80052fc:	f000 fdac 	bl	8005e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005300:	201c      	movs	r0, #28
 8005302:	f000 fdd5 	bl	8005eb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005306:	e018      	b.n	800533a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0e      	ldr	r2, [pc, #56]	; (8005348 <HAL_TIM_Base_MspInit+0x7c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d113      	bne.n	800533a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <HAL_TIM_Base_MspInit+0x78>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <HAL_TIM_Base_MspInit+0x78>)
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	61d3      	str	r3, [r2, #28]
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_TIM_Base_MspInit+0x78>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800532a:	2200      	movs	r2, #0
 800532c:	2100      	movs	r1, #0
 800532e:	201d      	movs	r0, #29
 8005330:	f000 fd92 	bl	8005e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005334:	201d      	movs	r0, #29
 8005336:	f000 fdbb 	bl	8005eb0 <HAL_NVIC_EnableIRQ>
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	40000400 	.word	0x40000400

0800534c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <MX_USART1_UART_Init+0x4c>)
 8005352:	4a12      	ldr	r2, [pc, #72]	; (800539c <MX_USART1_UART_Init+0x50>)
 8005354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <MX_USART1_UART_Init+0x4c>)
 8005358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800535c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800535e:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <MX_USART1_UART_Init+0x4c>)
 8005360:	2200      	movs	r2, #0
 8005362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <MX_USART1_UART_Init+0x4c>)
 8005366:	2200      	movs	r2, #0
 8005368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <MX_USART1_UART_Init+0x4c>)
 800536c:	2200      	movs	r2, #0
 800536e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <MX_USART1_UART_Init+0x4c>)
 8005372:	220c      	movs	r2, #12
 8005374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005376:	4b08      	ldr	r3, [pc, #32]	; (8005398 <MX_USART1_UART_Init+0x4c>)
 8005378:	2200      	movs	r2, #0
 800537a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <MX_USART1_UART_Init+0x4c>)
 800537e:	2200      	movs	r2, #0
 8005380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005382:	4805      	ldr	r0, [pc, #20]	; (8005398 <MX_USART1_UART_Init+0x4c>)
 8005384:	f006 ff92 	bl	800c2ac <HAL_UART_Init>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800538e:	f7ff fa01 	bl	8004794 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	2000107c 	.word	0x2000107c
 800539c:	40013800 	.word	0x40013800

080053a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a8:	f107 0310 	add.w	r3, r7, #16
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a20      	ldr	r2, [pc, #128]	; (800543c <HAL_UART_MspInit+0x9c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d139      	bne.n	8005434 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80053c0:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <HAL_UART_MspInit+0xa0>)
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <HAL_UART_MspInit+0xa0>)
 80053c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ca:	6193      	str	r3, [r2, #24]
 80053cc:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <HAL_UART_MspInit+0xa0>)
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d8:	4b19      	ldr	r3, [pc, #100]	; (8005440 <HAL_UART_MspInit+0xa0>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	4a18      	ldr	r2, [pc, #96]	; (8005440 <HAL_UART_MspInit+0xa0>)
 80053de:	f043 0304 	orr.w	r3, r3, #4
 80053e2:	6193      	str	r3, [r2, #24]
 80053e4:	4b16      	ldr	r3, [pc, #88]	; (8005440 <HAL_UART_MspInit+0xa0>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f6:	2302      	movs	r3, #2
 80053f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053fa:	2303      	movs	r3, #3
 80053fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fe:	f107 0310 	add.w	r3, r7, #16
 8005402:	4619      	mov	r1, r3
 8005404:	480f      	ldr	r0, [pc, #60]	; (8005444 <HAL_UART_MspInit+0xa4>)
 8005406:	f001 f8d5 	bl	80065b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800540a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800540e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005414:	2300      	movs	r3, #0
 8005416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005418:	f107 0310 	add.w	r3, r7, #16
 800541c:	4619      	mov	r1, r3
 800541e:	4809      	ldr	r0, [pc, #36]	; (8005444 <HAL_UART_MspInit+0xa4>)
 8005420:	f001 f8c8 	bl	80065b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005424:	2200      	movs	r2, #0
 8005426:	2100      	movs	r1, #0
 8005428:	2025      	movs	r0, #37	; 0x25
 800542a:	f000 fd15 	bl	8005e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800542e:	2025      	movs	r0, #37	; 0x25
 8005430:	f000 fd3e 	bl	8005eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005434:	bf00      	nop
 8005436:	3720      	adds	r7, #32
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40013800 	.word	0x40013800
 8005440:	40021000 	.word	0x40021000
 8005444:	40010800 	.word	0x40010800

08005448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005448:	480c      	ldr	r0, [pc, #48]	; (800547c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800544a:	490d      	ldr	r1, [pc, #52]	; (8005480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800544c:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800544e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005450:	e002      	b.n	8005458 <LoopCopyDataInit>

08005452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005456:	3304      	adds	r3, #4

08005458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800545a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800545c:	d3f9      	bcc.n	8005452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800545e:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005460:	4c0a      	ldr	r4, [pc, #40]	; (800548c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005464:	e001      	b.n	800546a <LoopFillZerobss>

08005466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005468:	3204      	adds	r2, #4

0800546a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800546a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800546c:	d3fb      	bcc.n	8005466 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800546e:	f7ff fe8b 	bl	8005188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005472:	f007 fdd1 	bl	800d018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005476:	f7fe fc77 	bl	8003d68 <main>
  bx lr
 800547a:	4770      	bx	lr
  ldr r0, =_sdata
 800547c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005480:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005484:	08012a34 	.word	0x08012a34
  ldr r2, =_sbss
 8005488:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800548c:	200010d4 	.word	0x200010d4

08005490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005490:	e7fe      	b.n	8005490 <ADC1_2_IRQHandler>
	...

08005494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005498:	4b08      	ldr	r3, [pc, #32]	; (80054bc <HAL_Init+0x28>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a07      	ldr	r2, [pc, #28]	; (80054bc <HAL_Init+0x28>)
 800549e:	f043 0310 	orr.w	r3, r3, #16
 80054a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054a4:	2003      	movs	r0, #3
 80054a6:	f000 fcb7 	bl	8005e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054aa:	200f      	movs	r0, #15
 80054ac:	f000 f808 	bl	80054c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054b0:	f7ff fcf6 	bl	8004ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40022000 	.word	0x40022000

080054c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054c8:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_InitTick+0x54>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_InitTick+0x58>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	4619      	mov	r1, r3
 80054d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fcfe 	bl	8005ee0 <HAL_SYSTICK_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e00e      	b.n	800550c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b0f      	cmp	r3, #15
 80054f2:	d80a      	bhi.n	800550a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054f4:	2200      	movs	r2, #0
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	f000 fcac 	bl	8005e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005500:	4a06      	ldr	r2, [pc, #24]	; (800551c <HAL_InitTick+0x5c>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20000024 	.word	0x20000024
 8005518:	2000002c 	.word	0x2000002c
 800551c:	20000028 	.word	0x20000028

08005520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <HAL_IncTick+0x1c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_IncTick+0x20>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4413      	add	r3, r2
 8005530:	4a03      	ldr	r2, [pc, #12]	; (8005540 <HAL_IncTick+0x20>)
 8005532:	6013      	str	r3, [r2, #0]
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	2000002c 	.word	0x2000002c
 8005540:	200010c0 	.word	0x200010c0

08005544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return uwTick;
 8005548:	4b02      	ldr	r3, [pc, #8]	; (8005554 <HAL_GetTick+0x10>)
 800554a:	681b      	ldr	r3, [r3, #0]
}
 800554c:	4618      	mov	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr
 8005554:	200010c0 	.word	0x200010c0

08005558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005560:	f7ff fff0 	bl	8005544 <HAL_GetTick>
 8005564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d005      	beq.n	800557e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_Delay+0x44>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800557e:	bf00      	nop
 8005580:	f7ff ffe0 	bl	8005544 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	429a      	cmp	r2, r3
 800558e:	d8f7      	bhi.n	8005580 <HAL_Delay+0x28>
  {
  }
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	2000002c 	.word	0x2000002c

080055a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e154      	b.n	800586c <HAL_ADC_Init+0x2cc>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a97      	ldr	r2, [pc, #604]	; (8005824 <HAL_ADC_Init+0x284>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d009      	beq.n	80055e0 <HAL_ADC_Init+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a95      	ldr	r2, [pc, #596]	; (8005828 <HAL_ADC_Init+0x288>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <HAL_ADC_Init+0x40>
 80055d6:	f240 11b3 	movw	r1, #435	; 0x1b3
 80055da:	4894      	ldr	r0, [pc, #592]	; (800582c <HAL_ADC_Init+0x28c>)
 80055dc:	f7ff f8de 	bl	800479c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <HAL_ADC_Init+0x5c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f0:	d004      	beq.n	80055fc <HAL_ADC_Init+0x5c>
 80055f2:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80055f6:	488d      	ldr	r0, [pc, #564]	; (800582c <HAL_ADC_Init+0x28c>)
 80055f8:	f7ff f8d0 	bl	800479c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d009      	beq.n	8005618 <HAL_ADC_Init+0x78>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560c:	d004      	beq.n	8005618 <HAL_ADC_Init+0x78>
 800560e:	f240 11b5 	movw	r1, #437	; 0x1b5
 8005612:	4886      	ldr	r0, [pc, #536]	; (800582c <HAL_ADC_Init+0x28c>)
 8005614:	f7ff f8c2 	bl	800479c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	7b1b      	ldrb	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_ADC_Init+0x92>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	7b1b      	ldrb	r3, [r3, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d004      	beq.n	8005632 <HAL_ADC_Init+0x92>
 8005628:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800562c:	487f      	ldr	r0, [pc, #508]	; (800582c <HAL_ADC_Init+0x28c>)
 800562e:	f7ff f8b5 	bl	800479c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d022      	beq.n	8005680 <HAL_ADC_Init+0xe0>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005642:	d01d      	beq.n	8005680 <HAL_ADC_Init+0xe0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800564c:	d018      	beq.n	8005680 <HAL_ADC_Init+0xe0>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005656:	d013      	beq.n	8005680 <HAL_ADC_Init+0xe0>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8005660:	d00e      	beq.n	8005680 <HAL_ADC_Init+0xe0>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800566a:	d009      	beq.n	8005680 <HAL_ADC_Init+0xe0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005674:	d004      	beq.n	8005680 <HAL_ADC_Init+0xe0>
 8005676:	f240 11b7 	movw	r1, #439	; 0x1b7
 800567a:	486c      	ldr	r0, [pc, #432]	; (800582c <HAL_ADC_Init+0x28c>)
 800567c:	f7ff f88e 	bl	800479c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d02a      	beq.n	80056de <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_ADC_Init+0xf8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b10      	cmp	r3, #16
 8005696:	d904      	bls.n	80056a2 <HAL_ADC_Init+0x102>
 8005698:	f240 11bb 	movw	r1, #443	; 0x1bb
 800569c:	4863      	ldr	r0, [pc, #396]	; (800582c <HAL_ADC_Init+0x28c>)
 800569e:	f7ff f87d 	bl	800479c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	7d1b      	ldrb	r3, [r3, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <HAL_ADC_Init+0x11c>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7d1b      	ldrb	r3, [r3, #20]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d004      	beq.n	80056bc <HAL_ADC_Init+0x11c>
 80056b2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80056b6:	485d      	ldr	r0, [pc, #372]	; (800582c <HAL_ADC_Init+0x28c>)
 80056b8:	f7ff f870 	bl	800479c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7d1b      	ldrb	r3, [r3, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_ADC_Init+0x134>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d904      	bls.n	80056de <HAL_ADC_Init+0x13e>
 80056d4:	f240 11bf 	movw	r1, #447	; 0x1bf
 80056d8:	4854      	ldr	r0, [pc, #336]	; (800582c <HAL_ADC_Init+0x28c>)
 80056da:	f7ff f85f 	bl	800479c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fb fd93 	bl	8001220 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa7e 	bl	8005bfc <ADC_ConversionStop_Disable>
 8005700:	4603      	mov	r3, r0
 8005702:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 80a4 	bne.w	800585a <HAL_ADC_Init+0x2ba>
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f040 80a0 	bne.w	800585a <HAL_ADC_Init+0x2ba>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005722:	f023 0302 	bic.w	r3, r3, #2
 8005726:	f043 0202 	orr.w	r2, r3, #2
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005736:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	7b1b      	ldrb	r3, [r3, #12]
 800573c:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800573e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574e:	d003      	beq.n	8005758 <HAL_ADC_Init+0x1b8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d102      	bne.n	800575e <HAL_ADC_Init+0x1be>
 8005758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800575c:	e000      	b.n	8005760 <HAL_ADC_Init+0x1c0>
 800575e:	2300      	movs	r3, #0
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7d1b      	ldrb	r3, [r3, #20]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d119      	bne.n	80057a2 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	7b1b      	ldrb	r3, [r3, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	3b01      	subs	r3, #1
 800577c:	035a      	lsls	r2, r3, #13
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	e00b      	b.n	80057a2 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	f043 0201 	orr.w	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	4b1c      	ldr	r3, [pc, #112]	; (8005830 <HAL_ADC_Init+0x290>)
 80057be:	4013      	ands	r3, r2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	430b      	orrs	r3, r1
 80057c8:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d2:	d003      	beq.n	80057dc <HAL_ADC_Init+0x23c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d104      	bne.n	80057e6 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	051b      	lsls	r3, r3, #20
 80057e4:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <HAL_ADC_Init+0x294>)
 8005802:	4013      	ands	r3, r2
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	429a      	cmp	r2, r3
 8005808:	d116      	bne.n	8005838 <HAL_ADC_Init+0x298>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	f023 0303 	bic.w	r3, r3, #3
 8005818:	f043 0201 	orr.w	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005820:	e023      	b.n	800586a <HAL_ADC_Init+0x2ca>
 8005822:	bf00      	nop
 8005824:	40012400 	.word	0x40012400
 8005828:	40012800 	.word	0x40012800
 800582c:	08010e74 	.word	0x08010e74
 8005830:	ffe1f7fd 	.word	0xffe1f7fd
 8005834:	ff1f0efe 	.word	0xff1f0efe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	f023 0312 	bic.w	r3, r3, #18
 8005840:	f043 0210 	orr.w	r2, r3, #16
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	f043 0201 	orr.w	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005858:	e007      	b.n	800586a <HAL_ADC_Init+0x2ca>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	f043 0210 	orr.w	r2, r3, #16
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a88      	ldr	r2, [pc, #544]	; (8005aac <HAL_ADC_ConfigChannel+0x238>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_ADC_ConfigChannel+0x30>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a86      	ldr	r2, [pc, #536]	; (8005ab0 <HAL_ADC_ConfigChannel+0x23c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_ADC_ConfigChannel+0x30>
 800589a:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800589e:	4885      	ldr	r0, [pc, #532]	; (8005ab4 <HAL_ADC_ConfigChannel+0x240>)
 80058a0:	f7fe ff7c 	bl	800479c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d048      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d044      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d040      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d03c      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d038      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b05      	cmp	r3, #5
 80058d2:	d034      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b06      	cmp	r3, #6
 80058da:	d030      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b07      	cmp	r3, #7
 80058e2:	d02c      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d028      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b09      	cmp	r3, #9
 80058f2:	d024      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b0a      	cmp	r3, #10
 80058fa:	d020      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b0b      	cmp	r3, #11
 8005902:	d01c      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b0c      	cmp	r3, #12
 800590a:	d018      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b0d      	cmp	r3, #13
 8005912:	d014      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b0e      	cmp	r3, #14
 800591a:	d010      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b0f      	cmp	r3, #15
 8005922:	d00c      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b10      	cmp	r3, #16
 800592a:	d008      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b11      	cmp	r3, #17
 8005932:	d004      	beq.n	800593e <HAL_ADC_ConfigChannel+0xca>
 8005934:	f240 71de 	movw	r1, #2014	; 0x7de
 8005938:	485e      	ldr	r0, [pc, #376]	; (8005ab4 <HAL_ADC_ConfigChannel+0x240>)
 800593a:	f7fe ff2f 	bl	800479c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d040      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d03c      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b03      	cmp	r3, #3
 8005954:	d038      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b04      	cmp	r3, #4
 800595c:	d034      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b05      	cmp	r3, #5
 8005964:	d030      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b06      	cmp	r3, #6
 800596c:	d02c      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b07      	cmp	r3, #7
 8005974:	d028      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b08      	cmp	r3, #8
 800597c:	d024      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b09      	cmp	r3, #9
 8005984:	d020      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b0a      	cmp	r3, #10
 800598c:	d01c      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b0b      	cmp	r3, #11
 8005994:	d018      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b0c      	cmp	r3, #12
 800599c:	d014      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b0d      	cmp	r3, #13
 80059a4:	d010      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b0e      	cmp	r3, #14
 80059ac:	d00c      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b0f      	cmp	r3, #15
 80059b4:	d008      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d004      	beq.n	80059c8 <HAL_ADC_ConfigChannel+0x154>
 80059be:	f240 71df 	movw	r1, #2015	; 0x7df
 80059c2:	483c      	ldr	r0, [pc, #240]	; (8005ab4 <HAL_ADC_ConfigChannel+0x240>)
 80059c4:	f7fe feea 	bl	800479c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d020      	beq.n	8005a12 <HAL_ADC_ConfigChannel+0x19e>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d01c      	beq.n	8005a12 <HAL_ADC_ConfigChannel+0x19e>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d018      	beq.n	8005a12 <HAL_ADC_ConfigChannel+0x19e>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d014      	beq.n	8005a12 <HAL_ADC_ConfigChannel+0x19e>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d010      	beq.n	8005a12 <HAL_ADC_ConfigChannel+0x19e>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	d00c      	beq.n	8005a12 <HAL_ADC_ConfigChannel+0x19e>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b06      	cmp	r3, #6
 80059fe:	d008      	beq.n	8005a12 <HAL_ADC_ConfigChannel+0x19e>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b07      	cmp	r3, #7
 8005a06:	d004      	beq.n	8005a12 <HAL_ADC_ConfigChannel+0x19e>
 8005a08:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8005a0c:	4829      	ldr	r0, [pc, #164]	; (8005ab4 <HAL_ADC_ConfigChannel+0x240>)
 8005a0e:	f7fe fec5 	bl	800479c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_ADC_ConfigChannel+0x1ac>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e0e2      	b.n	8005be6 <HAL_ADC_ConfigChannel+0x372>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b06      	cmp	r3, #6
 8005a2e:	d81c      	bhi.n	8005a6a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	3b05      	subs	r3, #5
 8005a42:	221f      	movs	r2, #31
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	4019      	ands	r1, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	3b05      	subs	r3, #5
 8005a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	635a      	str	r2, [r3, #52]	; 0x34
 8005a68:	e042      	b.n	8005af0 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d822      	bhi.n	8005ab8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	3b23      	subs	r3, #35	; 0x23
 8005a84:	221f      	movs	r2, #31
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	4019      	ands	r1, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3b23      	subs	r3, #35	; 0x23
 8005a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8005aaa:	e021      	b.n	8005af0 <HAL_ADC_ConfigChannel+0x27c>
 8005aac:	40012400 	.word	0x40012400
 8005ab0:	40012800 	.word	0x40012800
 8005ab4:	08010e74 	.word	0x08010e74
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3b41      	subs	r3, #65	; 0x41
 8005aca:	221f      	movs	r2, #31
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	4019      	ands	r1, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3b41      	subs	r3, #65	; 0x41
 8005ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b09      	cmp	r3, #9
 8005af6:	d91c      	bls.n	8005b32 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68d9      	ldr	r1, [r3, #12]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	3b1e      	subs	r3, #30
 8005b0a:	2207      	movs	r2, #7
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	4019      	ands	r1, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	6898      	ldr	r0, [r3, #8]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	4413      	add	r3, r2
 8005b22:	3b1e      	subs	r3, #30
 8005b24:	fa00 f203 	lsl.w	r2, r0, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	60da      	str	r2, [r3, #12]
 8005b30:	e019      	b.n	8005b66 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6919      	ldr	r1, [r3, #16]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4413      	add	r3, r2
 8005b42:	2207      	movs	r2, #7
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	4019      	ands	r1, r3
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6898      	ldr	r0, [r3, #8]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	4413      	add	r3, r2
 8005b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d003      	beq.n	8005b76 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005b72:	2b11      	cmp	r3, #17
 8005b74:	d132      	bne.n	8005bdc <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1d      	ldr	r2, [pc, #116]	; (8005bf0 <HAL_ADC_ConfigChannel+0x37c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d125      	bne.n	8005bcc <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d126      	bne.n	8005bdc <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d11a      	bne.n	8005bdc <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <HAL_ADC_ConfigChannel+0x380>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <HAL_ADC_ConfigChannel+0x384>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	0c9a      	lsrs	r2, r3, #18
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005bbc:	e002      	b.n	8005bc4 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f9      	bne.n	8005bbe <HAL_ADC_ConfigChannel+0x34a>
 8005bca:	e007      	b.n	8005bdc <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f043 0220 	orr.w	r2, r3, #32
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40012400 	.word	0x40012400
 8005bf4:	20000024 	.word	0x20000024
 8005bf8:	431bde83 	.word	0x431bde83

08005bfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d12e      	bne.n	8005c74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c26:	f7ff fc8d 	bl	8005544 <HAL_GetTick>
 8005c2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005c2c:	e01b      	b.n	8005c66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c2e:	f7ff fc89 	bl	8005544 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d914      	bls.n	8005c66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10d      	bne.n	8005c66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	f043 0210 	orr.w	r2, r3, #16
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	f043 0201 	orr.w	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e007      	b.n	8005c76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d0dc      	beq.n	8005c2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <__NVIC_SetPriorityGrouping>:
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c90:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cb2:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	60d3      	str	r3, [r2, #12]
}
 8005cb8:	bf00      	nop
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	e000ed00 	.word	0xe000ed00

08005cc8 <__NVIC_GetPriorityGrouping>:
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ccc:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 0307 	and.w	r3, r3, #7
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	e000ed00 	.word	0xe000ed00

08005ce4 <__NVIC_EnableIRQ>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	db0b      	blt.n	8005d0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	f003 021f 	and.w	r2, r3, #31
 8005cfc:	4906      	ldr	r1, [pc, #24]	; (8005d18 <__NVIC_EnableIRQ+0x34>)
 8005cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	2001      	movs	r0, #1
 8005d06:	fa00 f202 	lsl.w	r2, r0, r2
 8005d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr
 8005d18:	e000e100 	.word	0xe000e100

08005d1c <__NVIC_SetPriority>:
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	6039      	str	r1, [r7, #0]
 8005d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	db0a      	blt.n	8005d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	490c      	ldr	r1, [pc, #48]	; (8005d68 <__NVIC_SetPriority+0x4c>)
 8005d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3a:	0112      	lsls	r2, r2, #4
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	440b      	add	r3, r1
 8005d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d44:	e00a      	b.n	8005d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	4908      	ldr	r1, [pc, #32]	; (8005d6c <__NVIC_SetPriority+0x50>)
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	3b04      	subs	r3, #4
 8005d54:	0112      	lsls	r2, r2, #4
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	440b      	add	r3, r1
 8005d5a:	761a      	strb	r2, [r3, #24]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	e000e100 	.word	0xe000e100
 8005d6c:	e000ed00 	.word	0xe000ed00

08005d70 <NVIC_EncodePriority>:
{
 8005d70:	b480      	push	{r7}
 8005d72:	b089      	sub	sp, #36	; 0x24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f1c3 0307 	rsb	r3, r3, #7
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	bf28      	it	cs
 8005d8e:	2304      	movcs	r3, #4
 8005d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3304      	adds	r3, #4
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d902      	bls.n	8005da0 <NVIC_EncodePriority+0x30>
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	3b03      	subs	r3, #3
 8005d9e:	e000      	b.n	8005da2 <NVIC_EncodePriority+0x32>
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	43da      	mvns	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	401a      	ands	r2, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005db8:	f04f 31ff 	mov.w	r1, #4294967295
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc2:	43d9      	mvns	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc8:	4313      	orrs	r3, r2
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3724      	adds	r7, #36	; 0x24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <SysTick_Config>:
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005de4:	d301      	bcc.n	8005dea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005de6:	2301      	movs	r3, #1
 8005de8:	e00f      	b.n	8005e0a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dea:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <SysTick_Config+0x40>)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005df2:	210f      	movs	r1, #15
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	f7ff ff90 	bl	8005d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <SysTick_Config+0x40>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e02:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <SysTick_Config+0x40>)
 8005e04:	2207      	movs	r2, #7
 8005e06:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	e000e010 	.word	0xe000e010

08005e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b07      	cmp	r3, #7
 8005e24:	d00f      	beq.n	8005e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b06      	cmp	r3, #6
 8005e2a:	d00c      	beq.n	8005e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d009      	beq.n	8005e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d006      	beq.n	8005e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d003      	beq.n	8005e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005e3e:	2192      	movs	r1, #146	; 0x92
 8005e40:	4804      	ldr	r0, [pc, #16]	; (8005e54 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005e42:	f7fe fcab 	bl	800479c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff ff1a 	bl	8005c80 <__NVIC_SetPriorityGrouping>
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	08010eac 	.word	0x08010eac

08005e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b0f      	cmp	r3, #15
 8005e6e:	d903      	bls.n	8005e78 <HAL_NVIC_SetPriority+0x20>
 8005e70:	21aa      	movs	r1, #170	; 0xaa
 8005e72:	480e      	ldr	r0, [pc, #56]	; (8005eac <HAL_NVIC_SetPriority+0x54>)
 8005e74:	f7fe fc92 	bl	800479c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b0f      	cmp	r3, #15
 8005e7c:	d903      	bls.n	8005e86 <HAL_NVIC_SetPriority+0x2e>
 8005e7e:	21ab      	movs	r1, #171	; 0xab
 8005e80:	480a      	ldr	r0, [pc, #40]	; (8005eac <HAL_NVIC_SetPriority+0x54>)
 8005e82:	f7fe fc8b 	bl	800479c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e86:	f7ff ff1f 	bl	8005cc8 <__NVIC_GetPriorityGrouping>
 8005e8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	6978      	ldr	r0, [r7, #20]
 8005e92:	f7ff ff6d 	bl	8005d70 <NVIC_EncodePriority>
 8005e96:	4602      	mov	r2, r0
 8005e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff ff3c 	bl	8005d1c <__NVIC_SetPriority>
}
 8005ea4:	bf00      	nop
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08010eac 	.word	0x08010eac

08005eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da03      	bge.n	8005eca <HAL_NVIC_EnableIRQ+0x1a>
 8005ec2:	21be      	movs	r1, #190	; 0xbe
 8005ec4:	4805      	ldr	r0, [pc, #20]	; (8005edc <HAL_NVIC_EnableIRQ+0x2c>)
 8005ec6:	f7fe fc69 	bl	800479c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff ff08 	bl	8005ce4 <__NVIC_EnableIRQ>
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	08010eac 	.word	0x08010eac

08005ee0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff ff73 	bl	8005dd4 <SysTick_Config>
 8005eee:	4603      	mov	r3, r0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e0da      	b.n	80060c4 <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6e      	ldr	r2, [pc, #440]	; (80060cc <HAL_DMA_Init+0x1d4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d021      	beq.n	8005f5c <HAL_DMA_Init+0x64>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6c      	ldr	r2, [pc, #432]	; (80060d0 <HAL_DMA_Init+0x1d8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d01c      	beq.n	8005f5c <HAL_DMA_Init+0x64>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6b      	ldr	r2, [pc, #428]	; (80060d4 <HAL_DMA_Init+0x1dc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d017      	beq.n	8005f5c <HAL_DMA_Init+0x64>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a69      	ldr	r2, [pc, #420]	; (80060d8 <HAL_DMA_Init+0x1e0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d012      	beq.n	8005f5c <HAL_DMA_Init+0x64>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a68      	ldr	r2, [pc, #416]	; (80060dc <HAL_DMA_Init+0x1e4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00d      	beq.n	8005f5c <HAL_DMA_Init+0x64>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a66      	ldr	r2, [pc, #408]	; (80060e0 <HAL_DMA_Init+0x1e8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d008      	beq.n	8005f5c <HAL_DMA_Init+0x64>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a65      	ldr	r2, [pc, #404]	; (80060e4 <HAL_DMA_Init+0x1ec>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <HAL_DMA_Init+0x64>
 8005f54:	219a      	movs	r1, #154	; 0x9a
 8005f56:	4864      	ldr	r0, [pc, #400]	; (80060e8 <HAL_DMA_Init+0x1f0>)
 8005f58:	f7fe fc20 	bl	800479c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00c      	beq.n	8005f7e <HAL_DMA_Init+0x86>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d008      	beq.n	8005f7e <HAL_DMA_Init+0x86>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f74:	d003      	beq.n	8005f7e <HAL_DMA_Init+0x86>
 8005f76:	219b      	movs	r1, #155	; 0x9b
 8005f78:	485b      	ldr	r0, [pc, #364]	; (80060e8 <HAL_DMA_Init+0x1f0>)
 8005f7a:	f7fe fc0f 	bl	800479c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d007      	beq.n	8005f96 <HAL_DMA_Init+0x9e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_DMA_Init+0x9e>
 8005f8e:	219c      	movs	r1, #156	; 0x9c
 8005f90:	4855      	ldr	r0, [pc, #340]	; (80060e8 <HAL_DMA_Init+0x1f0>)
 8005f92:	f7fe fc03 	bl	800479c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d007      	beq.n	8005fae <HAL_DMA_Init+0xb6>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_DMA_Init+0xb6>
 8005fa6:	219d      	movs	r1, #157	; 0x9d
 8005fa8:	484f      	ldr	r0, [pc, #316]	; (80060e8 <HAL_DMA_Init+0x1f0>)
 8005faa:	f7fe fbf7 	bl	800479c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <HAL_DMA_Init+0xda>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbe:	d008      	beq.n	8005fd2 <HAL_DMA_Init+0xda>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc8:	d003      	beq.n	8005fd2 <HAL_DMA_Init+0xda>
 8005fca:	219e      	movs	r1, #158	; 0x9e
 8005fcc:	4846      	ldr	r0, [pc, #280]	; (80060e8 <HAL_DMA_Init+0x1f0>)
 8005fce:	f7fe fbe5 	bl	800479c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00d      	beq.n	8005ff6 <HAL_DMA_Init+0xfe>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe2:	d008      	beq.n	8005ff6 <HAL_DMA_Init+0xfe>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fec:	d003      	beq.n	8005ff6 <HAL_DMA_Init+0xfe>
 8005fee:	219f      	movs	r1, #159	; 0x9f
 8005ff0:	483d      	ldr	r0, [pc, #244]	; (80060e8 <HAL_DMA_Init+0x1f0>)
 8005ff2:	f7fe fbd3 	bl	800479c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <HAL_DMA_Init+0x116>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2b20      	cmp	r3, #32
 8006004:	d003      	beq.n	800600e <HAL_DMA_Init+0x116>
 8006006:	21a0      	movs	r1, #160	; 0xa0
 8006008:	4837      	ldr	r0, [pc, #220]	; (80060e8 <HAL_DMA_Init+0x1f0>)
 800600a:	f7fe fbc7 	bl	800479c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d012      	beq.n	800603c <HAL_DMA_Init+0x144>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601e:	d00d      	beq.n	800603c <HAL_DMA_Init+0x144>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006028:	d008      	beq.n	800603c <HAL_DMA_Init+0x144>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006032:	d003      	beq.n	800603c <HAL_DMA_Init+0x144>
 8006034:	21a1      	movs	r1, #161	; 0xa1
 8006036:	482c      	ldr	r0, [pc, #176]	; (80060e8 <HAL_DMA_Init+0x1f0>)
 8006038:	f7fe fbb0 	bl	800479c <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	4b2a      	ldr	r3, [pc, #168]	; (80060ec <HAL_DMA_Init+0x1f4>)
 8006044:	4413      	add	r3, r2
 8006046:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <HAL_DMA_Init+0x1f8>)
 8006048:	fba2 2303 	umull	r2, r3, r2, r3
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	009a      	lsls	r2, r3, #2
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <HAL_DMA_Init+0x1fc>)
 8006058:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006070:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006074:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800607e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800608a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40020008 	.word	0x40020008
 80060d0:	4002001c 	.word	0x4002001c
 80060d4:	40020030 	.word	0x40020030
 80060d8:	40020044 	.word	0x40020044
 80060dc:	40020058 	.word	0x40020058
 80060e0:	4002006c 	.word	0x4002006c
 80060e4:	40020080 	.word	0x40020080
 80060e8:	08010ee8 	.word	0x08010ee8
 80060ec:	bffdfff8 	.word	0xbffdfff8
 80060f0:	cccccccd 	.word	0xcccccccd
 80060f4:	40020000 	.word	0x40020000

080060f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_DMA_Start_IT+0x20>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006116:	d304      	bcc.n	8006122 <HAL_DMA_Start_IT+0x2a>
 8006118:	f240 116f 	movw	r1, #367	; 0x16f
 800611c:	482c      	ldr	r0, [pc, #176]	; (80061d0 <HAL_DMA_Start_IT+0xd8>)
 800611e:	f7fe fb3d 	bl	800479c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_DMA_Start_IT+0x38>
 800612c:	2302      	movs	r3, #2
 800612e:	e04a      	b.n	80061c6 <HAL_DMA_Start_IT+0xce>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800613e:	2b01      	cmp	r3, #1
 8006140:	d13a      	bne.n	80061b8 <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2202      	movs	r2, #2
 8006146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 f9f6 	bl	8006558 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 020e 	orr.w	r2, r2, #14
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e00f      	b.n	80061a6 <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0204 	bic.w	r2, r2, #4
 8006194:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 020a 	orr.w	r2, r2, #10
 80061a4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e005      	b.n	80061c4 <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80061c0:	2302      	movs	r3, #2
 80061c2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	08010ee8 	.word	0x08010ee8

080061d4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d008      	beq.n	80061fc <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2204      	movs	r2, #4
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e020      	b.n	800623e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 020e 	bic.w	r2, r2, #14
 800620a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006224:	2101      	movs	r1, #1
 8006226:	fa01 f202 	lsl.w	r2, r1, r2
 800622a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800625a:	2b02      	cmp	r3, #2
 800625c:	d005      	beq.n	800626a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2204      	movs	r2, #4
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	e051      	b.n	800630e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 020e 	bic.w	r2, r2, #14
 8006278:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0201 	bic.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a22      	ldr	r2, [pc, #136]	; (8006318 <HAL_DMA_Abort_IT+0xd0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d029      	beq.n	80062e8 <HAL_DMA_Abort_IT+0xa0>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a20      	ldr	r2, [pc, #128]	; (800631c <HAL_DMA_Abort_IT+0xd4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d022      	beq.n	80062e4 <HAL_DMA_Abort_IT+0x9c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <HAL_DMA_Abort_IT+0xd8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d01a      	beq.n	80062de <HAL_DMA_Abort_IT+0x96>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <HAL_DMA_Abort_IT+0xdc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d012      	beq.n	80062d8 <HAL_DMA_Abort_IT+0x90>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <HAL_DMA_Abort_IT+0xe0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00a      	beq.n	80062d2 <HAL_DMA_Abort_IT+0x8a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1a      	ldr	r2, [pc, #104]	; (800632c <HAL_DMA_Abort_IT+0xe4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d102      	bne.n	80062cc <HAL_DMA_Abort_IT+0x84>
 80062c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80062ca:	e00e      	b.n	80062ea <HAL_DMA_Abort_IT+0xa2>
 80062cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062d0:	e00b      	b.n	80062ea <HAL_DMA_Abort_IT+0xa2>
 80062d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062d6:	e008      	b.n	80062ea <HAL_DMA_Abort_IT+0xa2>
 80062d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062dc:	e005      	b.n	80062ea <HAL_DMA_Abort_IT+0xa2>
 80062de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062e2:	e002      	b.n	80062ea <HAL_DMA_Abort_IT+0xa2>
 80062e4:	2310      	movs	r3, #16
 80062e6:	e000      	b.n	80062ea <HAL_DMA_Abort_IT+0xa2>
 80062e8:	2301      	movs	r3, #1
 80062ea:	4a11      	ldr	r2, [pc, #68]	; (8006330 <HAL_DMA_Abort_IT+0xe8>)
 80062ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
    } 
  }
  return status;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40020008 	.word	0x40020008
 800631c:	4002001c 	.word	0x4002001c
 8006320:	40020030 	.word	0x40020030
 8006324:	40020044 	.word	0x40020044
 8006328:	40020058 	.word	0x40020058
 800632c:	4002006c 	.word	0x4002006c
 8006330:	40020000 	.word	0x40020000

08006334 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	2204      	movs	r2, #4
 8006352:	409a      	lsls	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d04f      	beq.n	80063fc <HAL_DMA_IRQHandler+0xc8>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d04a      	beq.n	80063fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b00      	cmp	r3, #0
 8006372:	d107      	bne.n	8006384 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0204 	bic.w	r2, r2, #4
 8006382:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a66      	ldr	r2, [pc, #408]	; (8006524 <HAL_DMA_IRQHandler+0x1f0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d029      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xae>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a65      	ldr	r2, [pc, #404]	; (8006528 <HAL_DMA_IRQHandler+0x1f4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d022      	beq.n	80063de <HAL_DMA_IRQHandler+0xaa>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a63      	ldr	r2, [pc, #396]	; (800652c <HAL_DMA_IRQHandler+0x1f8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01a      	beq.n	80063d8 <HAL_DMA_IRQHandler+0xa4>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a62      	ldr	r2, [pc, #392]	; (8006530 <HAL_DMA_IRQHandler+0x1fc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d012      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x9e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a60      	ldr	r2, [pc, #384]	; (8006534 <HAL_DMA_IRQHandler+0x200>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00a      	beq.n	80063cc <HAL_DMA_IRQHandler+0x98>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a5f      	ldr	r2, [pc, #380]	; (8006538 <HAL_DMA_IRQHandler+0x204>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d102      	bne.n	80063c6 <HAL_DMA_IRQHandler+0x92>
 80063c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063c4:	e00e      	b.n	80063e4 <HAL_DMA_IRQHandler+0xb0>
 80063c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063ca:	e00b      	b.n	80063e4 <HAL_DMA_IRQHandler+0xb0>
 80063cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80063d0:	e008      	b.n	80063e4 <HAL_DMA_IRQHandler+0xb0>
 80063d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063d6:	e005      	b.n	80063e4 <HAL_DMA_IRQHandler+0xb0>
 80063d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063dc:	e002      	b.n	80063e4 <HAL_DMA_IRQHandler+0xb0>
 80063de:	2340      	movs	r3, #64	; 0x40
 80063e0:	e000      	b.n	80063e4 <HAL_DMA_IRQHandler+0xb0>
 80063e2:	2304      	movs	r3, #4
 80063e4:	4a55      	ldr	r2, [pc, #340]	; (800653c <HAL_DMA_IRQHandler+0x208>)
 80063e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8094 	beq.w	800651a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80063fa:	e08e      	b.n	800651a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	2202      	movs	r2, #2
 8006402:	409a      	lsls	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4013      	ands	r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d056      	beq.n	80064ba <HAL_DMA_IRQHandler+0x186>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d051      	beq.n	80064ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 020a 	bic.w	r2, r2, #10
 8006432:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a38      	ldr	r2, [pc, #224]	; (8006524 <HAL_DMA_IRQHandler+0x1f0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d029      	beq.n	800649a <HAL_DMA_IRQHandler+0x166>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a37      	ldr	r2, [pc, #220]	; (8006528 <HAL_DMA_IRQHandler+0x1f4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_DMA_IRQHandler+0x162>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a35      	ldr	r2, [pc, #212]	; (800652c <HAL_DMA_IRQHandler+0x1f8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01a      	beq.n	8006490 <HAL_DMA_IRQHandler+0x15c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a34      	ldr	r2, [pc, #208]	; (8006530 <HAL_DMA_IRQHandler+0x1fc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d012      	beq.n	800648a <HAL_DMA_IRQHandler+0x156>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a32      	ldr	r2, [pc, #200]	; (8006534 <HAL_DMA_IRQHandler+0x200>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00a      	beq.n	8006484 <HAL_DMA_IRQHandler+0x150>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a31      	ldr	r2, [pc, #196]	; (8006538 <HAL_DMA_IRQHandler+0x204>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d102      	bne.n	800647e <HAL_DMA_IRQHandler+0x14a>
 8006478:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800647c:	e00e      	b.n	800649c <HAL_DMA_IRQHandler+0x168>
 800647e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006482:	e00b      	b.n	800649c <HAL_DMA_IRQHandler+0x168>
 8006484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006488:	e008      	b.n	800649c <HAL_DMA_IRQHandler+0x168>
 800648a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800648e:	e005      	b.n	800649c <HAL_DMA_IRQHandler+0x168>
 8006490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006494:	e002      	b.n	800649c <HAL_DMA_IRQHandler+0x168>
 8006496:	2320      	movs	r3, #32
 8006498:	e000      	b.n	800649c <HAL_DMA_IRQHandler+0x168>
 800649a:	2302      	movs	r3, #2
 800649c:	4a27      	ldr	r2, [pc, #156]	; (800653c <HAL_DMA_IRQHandler+0x208>)
 800649e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d034      	beq.n	800651a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80064b8:	e02f      	b.n	800651a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	2208      	movs	r2, #8
 80064c0:	409a      	lsls	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d028      	beq.n	800651c <HAL_DMA_IRQHandler+0x1e8>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d023      	beq.n	800651c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 020e 	bic.w	r2, r2, #14
 80064e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ec:	2101      	movs	r1, #1
 80064ee:	fa01 f202 	lsl.w	r2, r1, r2
 80064f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
    }
  }
  return;
 800651a:	bf00      	nop
 800651c:	bf00      	nop
}
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40020008 	.word	0x40020008
 8006528:	4002001c 	.word	0x4002001c
 800652c:	40020030 	.word	0x40020030
 8006530:	40020044 	.word	0x40020044
 8006534:	40020058 	.word	0x40020058
 8006538:	4002006c 	.word	0x4002006c
 800653c:	40020000 	.word	0x40020000

08006540 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr

08006558 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656e:	2101      	movs	r1, #1
 8006570:	fa01 f202 	lsl.w	r2, r1, r2
 8006574:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b10      	cmp	r3, #16
 8006584:	d108      	bne.n	8006598 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006596:	e007      	b.n	80065a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	60da      	str	r2, [r3, #12]
}
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	; 0x28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065be:	2300      	movs	r3, #0
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80065c2:	2300      	movs	r3, #0
 80065c4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a96      	ldr	r2, [pc, #600]	; (8006824 <HAL_GPIO_Init+0x270>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <HAL_GPIO_Init+0x42>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a95      	ldr	r2, [pc, #596]	; (8006828 <HAL_GPIO_Init+0x274>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00f      	beq.n	80065f6 <HAL_GPIO_Init+0x42>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a94      	ldr	r2, [pc, #592]	; (800682c <HAL_GPIO_Init+0x278>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00b      	beq.n	80065f6 <HAL_GPIO_Init+0x42>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a93      	ldr	r2, [pc, #588]	; (8006830 <HAL_GPIO_Init+0x27c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d007      	beq.n	80065f6 <HAL_GPIO_Init+0x42>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a92      	ldr	r2, [pc, #584]	; (8006834 <HAL_GPIO_Init+0x280>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <HAL_GPIO_Init+0x42>
 80065ee:	21bd      	movs	r1, #189	; 0xbd
 80065f0:	4891      	ldr	r0, [pc, #580]	; (8006838 <HAL_GPIO_Init+0x284>)
 80065f2:	f7fe f8d3 	bl	800479c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_GPIO_Init+0x58>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <HAL_GPIO_Init+0x60>
 800660c:	21be      	movs	r1, #190	; 0xbe
 800660e:	488a      	ldr	r0, [pc, #552]	; (8006838 <HAL_GPIO_Init+0x284>)
 8006610:	f7fe f8c4 	bl	800479c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 821c 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	2b01      	cmp	r3, #1
 8006624:	f000 8217 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b11      	cmp	r3, #17
 800662e:	f000 8212 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2b02      	cmp	r3, #2
 8006638:	f000 820d 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b12      	cmp	r3, #18
 8006642:	f000 8208 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	4a7c      	ldr	r2, [pc, #496]	; (800683c <HAL_GPIO_Init+0x288>)
 800664c:	4293      	cmp	r3, r2
 800664e:	f000 8202 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4a7a      	ldr	r2, [pc, #488]	; (8006840 <HAL_GPIO_Init+0x28c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	f000 81fc 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4a78      	ldr	r2, [pc, #480]	; (8006844 <HAL_GPIO_Init+0x290>)
 8006664:	4293      	cmp	r3, r2
 8006666:	f000 81f6 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4a76      	ldr	r2, [pc, #472]	; (8006848 <HAL_GPIO_Init+0x294>)
 8006670:	4293      	cmp	r3, r2
 8006672:	f000 81f0 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4a74      	ldr	r2, [pc, #464]	; (800684c <HAL_GPIO_Init+0x298>)
 800667c:	4293      	cmp	r3, r2
 800667e:	f000 81ea 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4a72      	ldr	r2, [pc, #456]	; (8006850 <HAL_GPIO_Init+0x29c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	f000 81e4 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b03      	cmp	r3, #3
 8006694:	f000 81df 	beq.w	8006a56 <HAL_GPIO_Init+0x4a2>
 8006698:	21bf      	movs	r1, #191	; 0xbf
 800669a:	4867      	ldr	r0, [pc, #412]	; (8006838 <HAL_GPIO_Init+0x284>)
 800669c:	f7fe f87e 	bl	800479c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066a0:	e1d9      	b.n	8006a56 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80066a2:	2201      	movs	r2, #1
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	4013      	ands	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f040 81c8 	bne.w	8006a50 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a58      	ldr	r2, [pc, #352]	; (8006824 <HAL_GPIO_Init+0x270>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d013      	beq.n	80066f0 <HAL_GPIO_Init+0x13c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a57      	ldr	r2, [pc, #348]	; (8006828 <HAL_GPIO_Init+0x274>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00f      	beq.n	80066f0 <HAL_GPIO_Init+0x13c>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a56      	ldr	r2, [pc, #344]	; (800682c <HAL_GPIO_Init+0x278>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00b      	beq.n	80066f0 <HAL_GPIO_Init+0x13c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a55      	ldr	r2, [pc, #340]	; (8006830 <HAL_GPIO_Init+0x27c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d007      	beq.n	80066f0 <HAL_GPIO_Init+0x13c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a54      	ldr	r2, [pc, #336]	; (8006834 <HAL_GPIO_Init+0x280>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <HAL_GPIO_Init+0x13c>
 80066e8:	21cd      	movs	r1, #205	; 0xcd
 80066ea:	4853      	ldr	r0, [pc, #332]	; (8006838 <HAL_GPIO_Init+0x284>)
 80066ec:	f7fe f856 	bl	800479c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	4a56      	ldr	r2, [pc, #344]	; (8006850 <HAL_GPIO_Init+0x29c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f000 80c1 	beq.w	800687e <HAL_GPIO_Init+0x2ca>
 80066fc:	4a54      	ldr	r2, [pc, #336]	; (8006850 <HAL_GPIO_Init+0x29c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	f200 80e7 	bhi.w	80068d2 <HAL_GPIO_Init+0x31e>
 8006704:	4a4f      	ldr	r2, [pc, #316]	; (8006844 <HAL_GPIO_Init+0x290>)
 8006706:	4293      	cmp	r3, r2
 8006708:	f000 80b9 	beq.w	800687e <HAL_GPIO_Init+0x2ca>
 800670c:	4a4d      	ldr	r2, [pc, #308]	; (8006844 <HAL_GPIO_Init+0x290>)
 800670e:	4293      	cmp	r3, r2
 8006710:	f200 80df 	bhi.w	80068d2 <HAL_GPIO_Init+0x31e>
 8006714:	4a4d      	ldr	r2, [pc, #308]	; (800684c <HAL_GPIO_Init+0x298>)
 8006716:	4293      	cmp	r3, r2
 8006718:	f000 80b1 	beq.w	800687e <HAL_GPIO_Init+0x2ca>
 800671c:	4a4b      	ldr	r2, [pc, #300]	; (800684c <HAL_GPIO_Init+0x298>)
 800671e:	4293      	cmp	r3, r2
 8006720:	f200 80d7 	bhi.w	80068d2 <HAL_GPIO_Init+0x31e>
 8006724:	4a46      	ldr	r2, [pc, #280]	; (8006840 <HAL_GPIO_Init+0x28c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	f000 80a9 	beq.w	800687e <HAL_GPIO_Init+0x2ca>
 800672c:	4a44      	ldr	r2, [pc, #272]	; (8006840 <HAL_GPIO_Init+0x28c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	f200 80cf 	bhi.w	80068d2 <HAL_GPIO_Init+0x31e>
 8006734:	4a44      	ldr	r2, [pc, #272]	; (8006848 <HAL_GPIO_Init+0x294>)
 8006736:	4293      	cmp	r3, r2
 8006738:	f000 80a1 	beq.w	800687e <HAL_GPIO_Init+0x2ca>
 800673c:	4a42      	ldr	r2, [pc, #264]	; (8006848 <HAL_GPIO_Init+0x294>)
 800673e:	4293      	cmp	r3, r2
 8006740:	f200 80c7 	bhi.w	80068d2 <HAL_GPIO_Init+0x31e>
 8006744:	2b12      	cmp	r3, #18
 8006746:	d82b      	bhi.n	80067a0 <HAL_GPIO_Init+0x1ec>
 8006748:	2b12      	cmp	r3, #18
 800674a:	f200 80c2 	bhi.w	80068d2 <HAL_GPIO_Init+0x31e>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <HAL_GPIO_Init+0x1a0>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	0800687f 	.word	0x0800687f
 8006758:	080067a9 	.word	0x080067a9
 800675c:	080067fb 	.word	0x080067fb
 8006760:	080068cd 	.word	0x080068cd
 8006764:	080068d3 	.word	0x080068d3
 8006768:	080068d3 	.word	0x080068d3
 800676c:	080068d3 	.word	0x080068d3
 8006770:	080068d3 	.word	0x080068d3
 8006774:	080068d3 	.word	0x080068d3
 8006778:	080068d3 	.word	0x080068d3
 800677c:	080068d3 	.word	0x080068d3
 8006780:	080068d3 	.word	0x080068d3
 8006784:	080068d3 	.word	0x080068d3
 8006788:	080068d3 	.word	0x080068d3
 800678c:	080068d3 	.word	0x080068d3
 8006790:	080068d3 	.word	0x080068d3
 8006794:	080068d3 	.word	0x080068d3
 8006798:	080067d1 	.word	0x080067d1
 800679c:	08006855 	.word	0x08006855
 80067a0:	4a26      	ldr	r2, [pc, #152]	; (800683c <HAL_GPIO_Init+0x288>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d06b      	beq.n	800687e <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80067a6:	e094      	b.n	80068d2 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d00b      	beq.n	80067c8 <HAL_GPIO_Init+0x214>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d007      	beq.n	80067c8 <HAL_GPIO_Init+0x214>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d003      	beq.n	80067c8 <HAL_GPIO_Init+0x214>
 80067c0:	21d5      	movs	r1, #213	; 0xd5
 80067c2:	481d      	ldr	r0, [pc, #116]	; (8006838 <HAL_GPIO_Init+0x284>)
 80067c4:	f7fd ffea 	bl	800479c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	623b      	str	r3, [r7, #32]
          break;
 80067ce:	e081      	b.n	80068d4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d00b      	beq.n	80067f0 <HAL_GPIO_Init+0x23c>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d007      	beq.n	80067f0 <HAL_GPIO_Init+0x23c>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d003      	beq.n	80067f0 <HAL_GPIO_Init+0x23c>
 80067e8:	21dc      	movs	r1, #220	; 0xdc
 80067ea:	4813      	ldr	r0, [pc, #76]	; (8006838 <HAL_GPIO_Init+0x284>)
 80067ec:	f7fd ffd6 	bl	800479c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	3304      	adds	r3, #4
 80067f6:	623b      	str	r3, [r7, #32]
          break;
 80067f8:	e06c      	b.n	80068d4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d00b      	beq.n	800681a <HAL_GPIO_Init+0x266>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d007      	beq.n	800681a <HAL_GPIO_Init+0x266>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	2b03      	cmp	r3, #3
 8006810:	d003      	beq.n	800681a <HAL_GPIO_Init+0x266>
 8006812:	21e3      	movs	r1, #227	; 0xe3
 8006814:	4808      	ldr	r0, [pc, #32]	; (8006838 <HAL_GPIO_Init+0x284>)
 8006816:	f7fd ffc1 	bl	800479c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	3308      	adds	r3, #8
 8006820:	623b      	str	r3, [r7, #32]
          break;
 8006822:	e057      	b.n	80068d4 <HAL_GPIO_Init+0x320>
 8006824:	40010800 	.word	0x40010800
 8006828:	40010c00 	.word	0x40010c00
 800682c:	40011000 	.word	0x40011000
 8006830:	40011400 	.word	0x40011400
 8006834:	40011800 	.word	0x40011800
 8006838:	08010f20 	.word	0x08010f20
 800683c:	10110000 	.word	0x10110000
 8006840:	10210000 	.word	0x10210000
 8006844:	10310000 	.word	0x10310000
 8006848:	10120000 	.word	0x10120000
 800684c:	10220000 	.word	0x10220000
 8006850:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d00b      	beq.n	8006874 <HAL_GPIO_Init+0x2c0>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d007      	beq.n	8006874 <HAL_GPIO_Init+0x2c0>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	2b03      	cmp	r3, #3
 800686a:	d003      	beq.n	8006874 <HAL_GPIO_Init+0x2c0>
 800686c:	21ea      	movs	r1, #234	; 0xea
 800686e:	4880      	ldr	r0, [pc, #512]	; (8006a70 <HAL_GPIO_Init+0x4bc>)
 8006870:	f7fd ff94 	bl	800479c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	330c      	adds	r3, #12
 800687a:	623b      	str	r3, [r7, #32]
          break;
 800687c:	e02a      	b.n	80068d4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00b      	beq.n	800689e <HAL_GPIO_Init+0x2ea>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d007      	beq.n	800689e <HAL_GPIO_Init+0x2ea>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d003      	beq.n	800689e <HAL_GPIO_Init+0x2ea>
 8006896:	21f7      	movs	r1, #247	; 0xf7
 8006898:	4875      	ldr	r0, [pc, #468]	; (8006a70 <HAL_GPIO_Init+0x4bc>)
 800689a:	f7fd ff7f 	bl	800479c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80068a6:	2304      	movs	r3, #4
 80068a8:	623b      	str	r3, [r7, #32]
          break;
 80068aa:	e013      	b.n	80068d4 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d105      	bne.n	80068c0 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80068b4:	2308      	movs	r3, #8
 80068b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	611a      	str	r2, [r3, #16]
          break;
 80068be:	e009      	b.n	80068d4 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80068c0:	2308      	movs	r3, #8
 80068c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	615a      	str	r2, [r3, #20]
          break;
 80068ca:	e003      	b.n	80068d4 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80068cc:	2300      	movs	r3, #0
 80068ce:	623b      	str	r3, [r7, #32]
          break;
 80068d0:	e000      	b.n	80068d4 <HAL_GPIO_Init+0x320>
          break;
 80068d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2bff      	cmp	r3, #255	; 0xff
 80068d8:	d801      	bhi.n	80068de <HAL_GPIO_Init+0x32a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	e001      	b.n	80068e2 <HAL_GPIO_Init+0x32e>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3304      	adds	r3, #4
 80068e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2bff      	cmp	r3, #255	; 0xff
 80068e8:	d802      	bhi.n	80068f0 <HAL_GPIO_Init+0x33c>
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	e002      	b.n	80068f6 <HAL_GPIO_Init+0x342>
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	3b08      	subs	r3, #8
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	210f      	movs	r1, #15
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	43db      	mvns	r3, r3
 8006906:	401a      	ands	r2, r3
 8006908:	6a39      	ldr	r1, [r7, #32]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	fa01 f303 	lsl.w	r3, r1, r3
 8006910:	431a      	orrs	r2, r3
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8096 	beq.w	8006a50 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006924:	4b53      	ldr	r3, [pc, #332]	; (8006a74 <HAL_GPIO_Init+0x4c0>)
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	4a52      	ldr	r2, [pc, #328]	; (8006a74 <HAL_GPIO_Init+0x4c0>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6193      	str	r3, [r2, #24]
 8006930:	4b50      	ldr	r3, [pc, #320]	; (8006a74 <HAL_GPIO_Init+0x4c0>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800693c:	4a4e      	ldr	r2, [pc, #312]	; (8006a78 <HAL_GPIO_Init+0x4c4>)
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	089b      	lsrs	r3, r3, #2
 8006942:	3302      	adds	r3, #2
 8006944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006948:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	f003 0303 	and.w	r3, r3, #3
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	220f      	movs	r2, #15
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4013      	ands	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a46      	ldr	r2, [pc, #280]	; (8006a7c <HAL_GPIO_Init+0x4c8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d013      	beq.n	8006990 <HAL_GPIO_Init+0x3dc>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a45      	ldr	r2, [pc, #276]	; (8006a80 <HAL_GPIO_Init+0x4cc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00d      	beq.n	800698c <HAL_GPIO_Init+0x3d8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a44      	ldr	r2, [pc, #272]	; (8006a84 <HAL_GPIO_Init+0x4d0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d007      	beq.n	8006988 <HAL_GPIO_Init+0x3d4>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a43      	ldr	r2, [pc, #268]	; (8006a88 <HAL_GPIO_Init+0x4d4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d101      	bne.n	8006984 <HAL_GPIO_Init+0x3d0>
 8006980:	2303      	movs	r3, #3
 8006982:	e006      	b.n	8006992 <HAL_GPIO_Init+0x3de>
 8006984:	2304      	movs	r3, #4
 8006986:	e004      	b.n	8006992 <HAL_GPIO_Init+0x3de>
 8006988:	2302      	movs	r3, #2
 800698a:	e002      	b.n	8006992 <HAL_GPIO_Init+0x3de>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <HAL_GPIO_Init+0x3de>
 8006990:	2300      	movs	r3, #0
 8006992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006994:	f002 0203 	and.w	r2, r2, #3
 8006998:	0092      	lsls	r2, r2, #2
 800699a:	4093      	lsls	r3, r2
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80069a2:	4935      	ldr	r1, [pc, #212]	; (8006a78 <HAL_GPIO_Init+0x4c4>)
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	089b      	lsrs	r3, r3, #2
 80069a8:	3302      	adds	r3, #2
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d006      	beq.n	80069ca <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80069bc:	4b33      	ldr	r3, [pc, #204]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4932      	ldr	r1, [pc, #200]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	600b      	str	r3, [r1, #0]
 80069c8:	e006      	b.n	80069d8 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80069ca:	4b30      	ldr	r3, [pc, #192]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	43db      	mvns	r3, r3
 80069d2:	492e      	ldr	r1, [pc, #184]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d006      	beq.n	80069f2 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80069e4:	4b29      	ldr	r3, [pc, #164]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	4928      	ldr	r1, [pc, #160]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	604b      	str	r3, [r1, #4]
 80069f0:	e006      	b.n	8006a00 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80069f2:	4b26      	ldr	r3, [pc, #152]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	43db      	mvns	r3, r3
 80069fa:	4924      	ldr	r1, [pc, #144]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d006      	beq.n	8006a1a <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	491e      	ldr	r1, [pc, #120]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	608b      	str	r3, [r1, #8]
 8006a18:	e006      	b.n	8006a28 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006a1a:	4b1c      	ldr	r3, [pc, #112]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	491a      	ldr	r1, [pc, #104]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d006      	beq.n	8006a42 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006a34:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	4914      	ldr	r1, [pc, #80]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60cb      	str	r3, [r1, #12]
 8006a40:	e006      	b.n	8006a50 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	4910      	ldr	r1, [pc, #64]	; (8006a8c <HAL_GPIO_Init+0x4d8>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	3301      	adds	r3, #1
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f47f ae1e 	bne.w	80066a2 <HAL_GPIO_Init+0xee>
  }
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	3728      	adds	r7, #40	; 0x28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	08010f20 	.word	0x08010f20
 8006a74:	40021000 	.word	0x40021000
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40010800 	.word	0x40010800
 8006a80:	40010c00 	.word	0x40010c00
 8006a84:	40011000 	.word	0x40011000
 8006a88:	40011400 	.word	0x40011400
 8006a8c:	40010400 	.word	0x40010400

08006a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006a9c:	887b      	ldrh	r3, [r7, #2]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <HAL_GPIO_ReadPin+0x1c>
 8006aa2:	887b      	ldrh	r3, [r7, #2]
 8006aa4:	0c1b      	lsrs	r3, r3, #16
 8006aa6:	041b      	lsls	r3, r3, #16
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d004      	beq.n	8006ab6 <HAL_GPIO_ReadPin+0x26>
 8006aac:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8006ab0:	4809      	ldr	r0, [pc, #36]	; (8006ad8 <HAL_GPIO_ReadPin+0x48>)
 8006ab2:	f7fd fe73 	bl	800479c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	887b      	ldrh	r3, [r7, #2]
 8006abc:	4013      	ands	r3, r2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	73fb      	strb	r3, [r7, #15]
 8006ac6:	e001      	b.n	8006acc <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	08010f20 	.word	0x08010f20

08006adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	807b      	strh	r3, [r7, #2]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <HAL_GPIO_WritePin+0x20>
 8006af2:	887b      	ldrh	r3, [r7, #2]
 8006af4:	0c1b      	lsrs	r3, r3, #16
 8006af6:	041b      	lsls	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <HAL_GPIO_WritePin+0x2a>
 8006afc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8006b00:	480e      	ldr	r0, [pc, #56]	; (8006b3c <HAL_GPIO_WritePin+0x60>)
 8006b02:	f7fd fe4b 	bl	800479c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006b06:	787b      	ldrb	r3, [r7, #1]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <HAL_GPIO_WritePin+0x40>
 8006b0c:	787b      	ldrb	r3, [r7, #1]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d004      	beq.n	8006b1c <HAL_GPIO_WritePin+0x40>
 8006b12:	f240 11d5 	movw	r1, #469	; 0x1d5
 8006b16:	4809      	ldr	r0, [pc, #36]	; (8006b3c <HAL_GPIO_WritePin+0x60>)
 8006b18:	f7fd fe40 	bl	800479c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8006b1c:	787b      	ldrb	r3, [r7, #1]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b22:	887a      	ldrh	r2, [r7, #2]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006b28:	e003      	b.n	8006b32 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	041a      	lsls	r2, r3, #16
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	611a      	str	r2, [r3, #16]
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	08010f20 	.word	0x08010f20

08006b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e1b6      	b.n	8006ec0 <HAL_I2C_Init+0x380>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a9c      	ldr	r2, [pc, #624]	; (8006dc8 <HAL_I2C_Init+0x288>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <HAL_I2C_Init+0x30>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a9a      	ldr	r2, [pc, #616]	; (8006dcc <HAL_I2C_Init+0x28c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_I2C_Init+0x30>
 8006b66:	f240 11d1 	movw	r1, #465	; 0x1d1
 8006b6a:	4899      	ldr	r0, [pc, #612]	; (8006dd0 <HAL_I2C_Init+0x290>)
 8006b6c:	f7fd fe16 	bl	800479c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <HAL_I2C_Init+0x42>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4a95      	ldr	r2, [pc, #596]	; (8006dd4 <HAL_I2C_Init+0x294>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d904      	bls.n	8006b8c <HAL_I2C_Init+0x4c>
 8006b82:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8006b86:	4892      	ldr	r0, [pc, #584]	; (8006dd0 <HAL_I2C_Init+0x290>)
 8006b88:	f7fd fe08 	bl	800479c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d009      	beq.n	8006ba8 <HAL_I2C_Init+0x68>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b9c:	d004      	beq.n	8006ba8 <HAL_I2C_Init+0x68>
 8006b9e:	f240 11d3 	movw	r1, #467	; 0x1d3
 8006ba2:	488b      	ldr	r0, [pc, #556]	; (8006dd0 <HAL_I2C_Init+0x290>)
 8006ba4:	f7fd fdfa 	bl	800479c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006bb0:	f023 0303 	bic.w	r3, r3, #3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d004      	beq.n	8006bc2 <HAL_I2C_Init+0x82>
 8006bb8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8006bbc:	4884      	ldr	r0, [pc, #528]	; (8006dd0 <HAL_I2C_Init+0x290>)
 8006bbe:	f7fd fded 	bl	800479c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bca:	d009      	beq.n	8006be0 <HAL_I2C_Init+0xa0>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bd4:	d004      	beq.n	8006be0 <HAL_I2C_Init+0xa0>
 8006bd6:	f240 11d5 	movw	r1, #469	; 0x1d5
 8006bda:	487d      	ldr	r0, [pc, #500]	; (8006dd0 <HAL_I2C_Init+0x290>)
 8006bdc:	f7fd fdde 	bl	800479c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_I2C_Init+0xba>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d004      	beq.n	8006bfa <HAL_I2C_Init+0xba>
 8006bf0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8006bf4:	4876      	ldr	r0, [pc, #472]	; (8006dd0 <HAL_I2C_Init+0x290>)
 8006bf6:	f7fd fdd1 	bl	800479c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d004      	beq.n	8006c10 <HAL_I2C_Init+0xd0>
 8006c06:	f240 11d7 	movw	r1, #471	; 0x1d7
 8006c0a:	4871      	ldr	r0, [pc, #452]	; (8006dd0 <HAL_I2C_Init+0x290>)
 8006c0c:	f7fd fdc6 	bl	800479c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_I2C_Init+0xea>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	2b40      	cmp	r3, #64	; 0x40
 8006c1e:	d004      	beq.n	8006c2a <HAL_I2C_Init+0xea>
 8006c20:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006c24:	486a      	ldr	r0, [pc, #424]	; (8006dd0 <HAL_I2C_Init+0x290>)
 8006c26:	f7fd fdb9 	bl	800479c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d008      	beq.n	8006c44 <HAL_I2C_Init+0x104>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	2b80      	cmp	r3, #128	; 0x80
 8006c38:	d004      	beq.n	8006c44 <HAL_I2C_Init+0x104>
 8006c3a:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c3e:	4864      	ldr	r0, [pc, #400]	; (8006dd0 <HAL_I2C_Init+0x290>)
 8006c40:	f7fd fdac 	bl	800479c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fc fa95 	bl	8003188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2224      	movs	r2, #36	; 0x24
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0201 	bic.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c84:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c94:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c96:	f003 fb55 	bl	800a344 <HAL_RCC_GetPCLK1Freq>
 8006c9a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a4d      	ldr	r2, [pc, #308]	; (8006dd8 <HAL_I2C_Init+0x298>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d807      	bhi.n	8006cb6 <HAL_I2C_Init+0x176>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4a4c      	ldr	r2, [pc, #304]	; (8006ddc <HAL_I2C_Init+0x29c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	bf94      	ite	ls
 8006cae:	2301      	movls	r3, #1
 8006cb0:	2300      	movhi	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	e006      	b.n	8006cc4 <HAL_I2C_Init+0x184>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4a49      	ldr	r2, [pc, #292]	; (8006de0 <HAL_I2C_Init+0x2a0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	bf94      	ite	ls
 8006cbe:	2301      	movls	r3, #1
 8006cc0:	2300      	movhi	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0f9      	b.n	8006ec0 <HAL_I2C_Init+0x380>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a45      	ldr	r2, [pc, #276]	; (8006de4 <HAL_I2C_Init+0x2a4>)
 8006cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd4:	0c9b      	lsrs	r3, r3, #18
 8006cd6:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4a37      	ldr	r2, [pc, #220]	; (8006dd8 <HAL_I2C_Init+0x298>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d802      	bhi.n	8006d06 <HAL_I2C_Init+0x1c6>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	3301      	adds	r3, #1
 8006d04:	e009      	b.n	8006d1a <HAL_I2C_Init+0x1da>
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d0c:	fb02 f303 	mul.w	r3, r2, r3
 8006d10:	4a35      	ldr	r2, [pc, #212]	; (8006de8 <HAL_I2C_Init+0x2a8>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	3301      	adds	r3, #1
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006d2c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	4928      	ldr	r1, [pc, #160]	; (8006dd8 <HAL_I2C_Init+0x298>)
 8006d36:	428b      	cmp	r3, r1
 8006d38:	d819      	bhi.n	8006d6e <HAL_I2C_Init+0x22e>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1e59      	subs	r1, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d48:	1c59      	adds	r1, r3, #1
 8006d4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d4e:	400b      	ands	r3, r1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <HAL_I2C_Init+0x22a>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	1e59      	subs	r1, r3, #1
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d62:	3301      	adds	r3, #1
 8006d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d68:	e063      	b.n	8006e32 <HAL_I2C_Init+0x2f2>
 8006d6a:	2304      	movs	r3, #4
 8006d6c:	e061      	b.n	8006e32 <HAL_I2C_Init+0x2f2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d111      	bne.n	8006d9a <HAL_I2C_Init+0x25a>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	1e58      	subs	r0, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6859      	ldr	r1, [r3, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	440b      	add	r3, r1
 8006d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bf0c      	ite	eq
 8006d92:	2301      	moveq	r3, #1
 8006d94:	2300      	movne	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	e012      	b.n	8006dc0 <HAL_I2C_Init+0x280>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1e58      	subs	r0, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6859      	ldr	r1, [r3, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	0099      	lsls	r1, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8006db0:	3301      	adds	r3, #1
 8006db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d013      	beq.n	8006dec <HAL_I2C_Init+0x2ac>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e034      	b.n	8006e32 <HAL_I2C_Init+0x2f2>
 8006dc8:	40005400 	.word	0x40005400
 8006dcc:	40005800 	.word	0x40005800
 8006dd0:	08010f5c 	.word	0x08010f5c
 8006dd4:	00061a80 	.word	0x00061a80
 8006dd8:	000186a0 	.word	0x000186a0
 8006ddc:	001e847f 	.word	0x001e847f
 8006de0:	003d08ff 	.word	0x003d08ff
 8006de4:	431bde83 	.word	0x431bde83
 8006de8:	10624dd3 	.word	0x10624dd3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10e      	bne.n	8006e12 <HAL_I2C_Init+0x2d2>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1e58      	subs	r0, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6859      	ldr	r1, [r3, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	440b      	add	r3, r1
 8006e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e06:	3301      	adds	r3, #1
 8006e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e10:	e00f      	b.n	8006e32 <HAL_I2C_Init+0x2f2>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	1e58      	subs	r0, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6859      	ldr	r1, [r3, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	0099      	lsls	r1, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e28:	3301      	adds	r3, #1
 8006e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	6809      	ldr	r1, [r1, #0]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006e60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6911      	ldr	r1, [r2, #16]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	68d2      	ldr	r2, [r2, #12]
 8006e6c:	4311      	orrs	r1, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	430b      	orrs	r3, r1
 8006e74:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	695a      	ldr	r2, [r3, #20]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0201 	orr.w	r2, r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08c      	sub	sp, #48	; 0x30
 8006ecc:	af02      	add	r7, sp, #8
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	817b      	strh	r3, [r7, #10]
 8006eda:	460b      	mov	r3, r1
 8006edc:	813b      	strh	r3, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ee6:	f7fe fb2d 	bl	8005544 <HAL_GetTick>
 8006eea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006eec:	88fb      	ldrh	r3, [r7, #6]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d007      	beq.n	8006f02 <HAL_I2C_Mem_Read+0x3a>
 8006ef2:	88fb      	ldrh	r3, [r7, #6]
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d004      	beq.n	8006f02 <HAL_I2C_Mem_Read+0x3a>
 8006ef8:	f44f 6127 	mov.w	r1, #2672	; 0xa70
 8006efc:	4888      	ldr	r0, [pc, #544]	; (8007120 <HAL_I2C_Mem_Read+0x258>)
 8006efe:	f7fd fc4d 	bl	800479c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	f040 8245 	bne.w	800739a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	2319      	movs	r3, #25
 8006f16:	2201      	movs	r2, #1
 8006f18:	4982      	ldr	r1, [pc, #520]	; (8007124 <HAL_I2C_Mem_Read+0x25c>)
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f002 fac4 	bl	80094a8 <I2C_WaitOnFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <HAL_I2C_Mem_Read+0x62>
    {
      return HAL_BUSY;
 8006f26:	2302      	movs	r3, #2
 8006f28:	e238      	b.n	800739c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_I2C_Mem_Read+0x70>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e231      	b.n	800739c <HAL_I2C_Mem_Read+0x4d4>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d007      	beq.n	8006f5e <HAL_I2C_Mem_Read+0x96>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0201 	orr.w	r2, r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f6c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2222      	movs	r2, #34	; 0x22
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2240      	movs	r2, #64	; 0x40
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4a62      	ldr	r2, [pc, #392]	; (8007128 <HAL_I2C_Mem_Read+0x260>)
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fa0:	88f8      	ldrh	r0, [r7, #6]
 8006fa2:	893a      	ldrh	r2, [r7, #8]
 8006fa4:	8979      	ldrh	r1, [r7, #10]
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4603      	mov	r3, r0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f001 ffdd 	bl	8008f70 <I2C_RequestMemoryRead>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_I2C_Mem_Read+0xf8>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e1ed      	b.n	800739c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d113      	bne.n	8006ff0 <HAL_I2C_Mem_Read+0x128>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e1c1      	b.n	8007374 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d11e      	bne.n	8007036 <HAL_I2C_Mem_Read+0x16e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007006:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007008:	b672      	cpsid	i
}
 800700a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800700c:	2300      	movs	r3, #0
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007032:	b662      	cpsie	i
}
 8007034:	e035      	b.n	80070a2 <HAL_I2C_Mem_Read+0x1da>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800703a:	2b02      	cmp	r3, #2
 800703c:	d11e      	bne.n	800707c <HAL_I2C_Mem_Read+0x1b4>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800704c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800704e:	b672      	cpsid	i
}
 8007050:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007076:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007078:	b662      	cpsie	i
}
 800707a:	e012      	b.n	80070a2 <HAL_I2C_Mem_Read+0x1da>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800708a:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800708c:	2300      	movs	r3, #0
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80070a2:	e167      	b.n	8007374 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	f200 8120 	bhi.w	80072ee <HAL_I2C_Mem_Read+0x426>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d123      	bne.n	80070fe <HAL_I2C_Mem_Read+0x236>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f002 fb3e 	bl	800973c <I2C_WaitOnRXNEFlagUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <HAL_I2C_Mem_Read+0x202>
          {
            return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e168      	b.n	800739c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070fc:	e13a      	b.n	8007374 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007102:	2b02      	cmp	r3, #2
 8007104:	d153      	bne.n	80071ae <HAL_I2C_Mem_Read+0x2e6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	2200      	movs	r2, #0
 800710e:	4907      	ldr	r1, [pc, #28]	; (800712c <HAL_I2C_Mem_Read+0x264>)
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f002 f9c9 	bl	80094a8 <I2C_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <HAL_I2C_Mem_Read+0x268>
          {
            return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e13d      	b.n	800739c <HAL_I2C_Mem_Read+0x4d4>
 8007120:	08010f5c 	.word	0x08010f5c
 8007124:	00100002 	.word	0x00100002
 8007128:	ffff0000 	.word	0xffff0000
 800712c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007130:	b672      	cpsid	i
}
 8007132:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691a      	ldr	r2, [r3, #16]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007176:	b662      	cpsie	i
}
 8007178:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071ac:	e0e2      	b.n	8007374 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	2200      	movs	r2, #0
 80071b6:	497b      	ldr	r1, [pc, #492]	; (80073a4 <HAL_I2C_Mem_Read+0x4dc>)
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f002 f975 	bl	80094a8 <I2C_WaitOnFlagUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <HAL_I2C_Mem_Read+0x300>
          {
            return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e0e9      	b.n	800739c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80071d8:	b672      	cpsid	i
}
 80071da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800720e:	4b66      	ldr	r3, [pc, #408]	; (80073a8 <HAL_I2C_Mem_Read+0x4e0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	08db      	lsrs	r3, r3, #3
 8007214:	4a65      	ldr	r2, [pc, #404]	; (80073ac <HAL_I2C_Mem_Read+0x4e4>)
 8007216:	fba2 2303 	umull	r2, r3, r2, r3
 800721a:	0a1a      	lsrs	r2, r3, #8
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	00da      	lsls	r2, r3, #3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	3b01      	subs	r3, #1
 800722c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d118      	bne.n	8007266 <HAL_I2C_Mem_Read+0x39e>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f043 0220 	orr.w	r2, r3, #32
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007256:	b662      	cpsie	i
}
 8007258:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e09a      	b.n	800739c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b04      	cmp	r3, #4
 8007272:	d1d9      	bne.n	8007228 <HAL_I2C_Mem_Read+0x360>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80072b6:	b662      	cpsie	i
}
 80072b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691a      	ldr	r2, [r3, #16]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072ec:	e042      	b.n	8007374 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f002 fa22 	bl	800973c <I2C_WaitOnRXNEFlagUntilTimeout>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <HAL_I2C_Mem_Read+0x43a>
        {
          return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e04c      	b.n	800739c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b04      	cmp	r3, #4
 8007340:	d118      	bne.n	8007374 <HAL_I2C_Mem_Read+0x4ac>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007378:	2b00      	cmp	r3, #0
 800737a:	f47f ae93 	bne.w	80070a4 <HAL_I2C_Mem_Read+0x1dc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	e000      	b.n	800739c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800739a:	2302      	movs	r3, #2
  }
}
 800739c:	4618      	mov	r0, r3
 800739e:	3728      	adds	r7, #40	; 0x28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	00010004 	.word	0x00010004
 80073a8:	20000024 	.word	0x20000024
 80073ac:	14f8b589 	.word	0x14f8b589

080073b0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	; 0x28
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	4608      	mov	r0, r1
 80073ba:	4611      	mov	r1, r2
 80073bc:	461a      	mov	r2, r3
 80073be:	4603      	mov	r3, r0
 80073c0:	817b      	strh	r3, [r7, #10]
 80073c2:	460b      	mov	r3, r1
 80073c4:	813b      	strh	r3, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073ce:	f7fe f8b9 	bl	8005544 <HAL_GetTick>
 80073d2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80073d4:	88fb      	ldrh	r3, [r7, #6]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d007      	beq.n	80073ea <HAL_I2C_Mem_Write_DMA+0x3a>
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	2b10      	cmp	r3, #16
 80073de:	d004      	beq.n	80073ea <HAL_I2C_Mem_Write_DMA+0x3a>
 80073e0:	f640 414f 	movw	r1, #3151	; 0xc4f
 80073e4:	489a      	ldr	r0, [pc, #616]	; (8007650 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 80073e6:	f7fd f9d9 	bl	800479c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	f040 8126 	bne.w	8007644 <HAL_I2C_Mem_Write_DMA+0x294>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80073f8:	4b96      	ldr	r3, [pc, #600]	; (8007654 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	08db      	lsrs	r3, r3, #3
 80073fe:	4a96      	ldr	r2, [pc, #600]	; (8007658 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	0a1a      	lsrs	r2, r3, #8
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009a      	lsls	r2, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	3b01      	subs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d116      	bne.n	800744c <HAL_I2C_Mem_Write_DMA+0x9c>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	f043 0220 	orr.w	r2, r3, #32
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0fc      	b.n	8007646 <HAL_I2C_Mem_Write_DMA+0x296>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b02      	cmp	r3, #2
 8007458:	d0db      	beq.n	8007412 <HAL_I2C_Mem_Write_DMA+0x62>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_I2C_Mem_Write_DMA+0xb8>
 8007464:	2302      	movs	r3, #2
 8007466:	e0ee      	b.n	8007646 <HAL_I2C_Mem_Write_DMA+0x296>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b01      	cmp	r3, #1
 800747c:	d007      	beq.n	800748e <HAL_I2C_Mem_Write_DMA+0xde>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800749c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2221      	movs	r2, #33	; 0x21
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2240      	movs	r2, #64	; 0x40
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80074be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4a63      	ldr	r2, [pc, #396]	; (800765c <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80074ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 80a1 	beq.w	800761c <HAL_I2C_Mem_Write_DMA+0x26c>
    {
      if (hi2c->hdmatx != NULL)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d022      	beq.n	8007528 <HAL_I2C_Mem_Write_DMA+0x178>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	4a5e      	ldr	r2, [pc, #376]	; (8007660 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80074e8:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	4a5d      	ldr	r2, [pc, #372]	; (8007664 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f6:	2200      	movs	r2, #0
 80074f8:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	2200      	movs	r2, #0
 8007500:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	4619      	mov	r1, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3310      	adds	r3, #16
 8007512:	461a      	mov	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007518:	f7fe fdee 	bl	80060f8 <HAL_DMA_Start_IT>
 800751c:	4603      	mov	r3, r0
 800751e:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007520:	7efb      	ldrb	r3, [r7, #27]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d166      	bne.n	80075f4 <HAL_I2C_Mem_Write_DMA+0x244>
 8007526:	e013      	b.n	8007550 <HAL_I2C_Mem_Write_DMA+0x1a0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e07a      	b.n	8007646 <HAL_I2C_Mem_Write_DMA+0x296>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007550:	88f8      	ldrh	r0, [r7, #6]
 8007552:	893a      	ldrh	r2, [r7, #8]
 8007554:	8979      	ldrh	r1, [r7, #10]
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	2323      	movs	r3, #35	; 0x23
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	4603      	mov	r3, r0
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f001 fc6f 	bl	8008e44 <I2C_RequestMemoryWrite>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d022      	beq.n	80075b2 <HAL_I2C_Mem_Write_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	4618      	mov	r0, r3
 8007572:	f7fe fe69 	bl	8006248 <HAL_DMA_Abort_IT>
 8007576:	4603      	mov	r3, r0
 8007578:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757e:	2200      	movs	r2, #0
 8007580:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007590:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0201 	bic.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e049      	b.n	8007646 <HAL_I2C_Mem_Write_DMA+0x296>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b2:	2300      	movs	r3, #0
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	613b      	str	r3, [r7, #16]
 80075c6:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075de:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ee:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e028      	b.n	8007646 <HAL_I2C_Mem_Write_DMA+0x296>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	f043 0210 	orr.w	r2, r3, #16
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e014      	b.n	8007646 <HAL_I2C_Mem_Write_DMA+0x296>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <HAL_I2C_Mem_Write_DMA+0x296>
    }
  }
  else
  {
    return HAL_BUSY;
 8007644:	2302      	movs	r3, #2
  }
}
 8007646:	4618      	mov	r0, r3
 8007648:	3720      	adds	r7, #32
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	08010f5c 	.word	0x08010f5c
 8007654:	20000024 	.word	0x20000024
 8007658:	14f8b589 	.word	0x14f8b589
 800765c:	ffff0000 	.word	0xffff0000
 8007660:	08009141 	.word	0x08009141
 8007664:	080092eb 	.word	0x080092eb

08007668 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007688:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b10      	cmp	r3, #16
 8007696:	d003      	beq.n	80076a0 <HAL_I2C_EV_IRQHandler+0x38>
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	f040 80c1 	bne.w	8007822 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10d      	bne.n	80076d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80076c0:	d003      	beq.n	80076ca <HAL_I2C_EV_IRQHandler+0x62>
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80076c8:	d101      	bne.n	80076ce <HAL_I2C_EV_IRQHandler+0x66>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <HAL_I2C_EV_IRQHandler+0x68>
 80076ce:	2300      	movs	r3, #0
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	f000 8132 	beq.w	800793a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00c      	beq.n	80076fa <HAL_I2C_EV_IRQHandler+0x92>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	0a5b      	lsrs	r3, r3, #9
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d006      	beq.n	80076fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f002 f8a9 	bl	8009844 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fd84 	bl	8008200 <I2C_Master_SB>
 80076f8:	e092      	b.n	8007820 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	08db      	lsrs	r3, r3, #3
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <HAL_I2C_EV_IRQHandler+0xb2>
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	0a5b      	lsrs	r3, r3, #9
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fdf9 	bl	800830a <I2C_Master_ADD10>
 8007718:	e082      	b.n	8007820 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	085b      	lsrs	r3, r3, #1
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <HAL_I2C_EV_IRQHandler+0xd2>
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	0a5b      	lsrs	r3, r3, #9
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fe12 	bl	800835c <I2C_Master_ADDR>
 8007738:	e072      	b.n	8007820 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	089b      	lsrs	r3, r3, #2
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d03b      	beq.n	80077be <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007754:	f000 80f3 	beq.w	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	09db      	lsrs	r3, r3, #7
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00f      	beq.n	8007784 <HAL_I2C_EV_IRQHandler+0x11c>
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	0a9b      	lsrs	r3, r3, #10
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <HAL_I2C_EV_IRQHandler+0x11c>
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	089b      	lsrs	r3, r3, #2
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d103      	bne.n	8007784 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f9fe 	bl	8007b7e <I2C_MasterTransmit_TXE>
 8007782:	e04d      	b.n	8007820 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	089b      	lsrs	r3, r3, #2
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80d6 	beq.w	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	0a5b      	lsrs	r3, r3, #9
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 80cf 	beq.w	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b21      	cmp	r3, #33	; 0x21
 80077a4:	d103      	bne.n	80077ae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa85 	bl	8007cb6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077ac:	e0c7      	b.n	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	f040 80c4 	bne.w	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 faf3 	bl	8007da2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077bc:	e0bf      	b.n	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077cc:	f000 80b7 	beq.w	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	099b      	lsrs	r3, r3, #6
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00f      	beq.n	80077fc <HAL_I2C_EV_IRQHandler+0x194>
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	0a9b      	lsrs	r3, r3, #10
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d009      	beq.n	80077fc <HAL_I2C_EV_IRQHandler+0x194>
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	089b      	lsrs	r3, r3, #2
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fb68 	bl	8007eca <I2C_MasterReceive_RXNE>
 80077fa:	e011      	b.n	8007820 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	089b      	lsrs	r3, r3, #2
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 809a 	beq.w	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	0a5b      	lsrs	r3, r3, #9
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 8093 	beq.w	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fc07 	bl	800802c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800781e:	e08e      	b.n	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
 8007820:	e08d      	b.n	800793e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	61fb      	str	r3, [r7, #28]
 8007832:	e007      	b.n	8007844 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	085b      	lsrs	r3, r3, #1
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d012      	beq.n	8007876 <HAL_I2C_EV_IRQHandler+0x20e>
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	0a5b      	lsrs	r3, r3, #9
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00c      	beq.n	8007876 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800786c:	69b9      	ldr	r1, [r7, #24]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 ffcb 	bl	800880a <I2C_Slave_ADDR>
 8007874:	e066      	b.n	8007944 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	091b      	lsrs	r3, r3, #4
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <HAL_I2C_EV_IRQHandler+0x22e>
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	0a5b      	lsrs	r3, r3, #9
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f001 f806 	bl	80088a0 <I2C_Slave_STOPF>
 8007894:	e056      	b.n	8007944 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	2b21      	cmp	r3, #33	; 0x21
 800789a:	d002      	beq.n	80078a2 <HAL_I2C_EV_IRQHandler+0x23a>
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b29      	cmp	r3, #41	; 0x29
 80078a0:	d125      	bne.n	80078ee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	09db      	lsrs	r3, r3, #7
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00f      	beq.n	80078ce <HAL_I2C_EV_IRQHandler+0x266>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	0a9b      	lsrs	r3, r3, #10
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <HAL_I2C_EV_IRQHandler+0x266>
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	089b      	lsrs	r3, r3, #2
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d103      	bne.n	80078ce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fee3 	bl	8008692 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078cc:	e039      	b.n	8007942 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	089b      	lsrs	r3, r3, #2
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d033      	beq.n	8007942 <HAL_I2C_EV_IRQHandler+0x2da>
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	0a5b      	lsrs	r3, r3, #9
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d02d      	beq.n	8007942 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 ff10 	bl	800870c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078ec:	e029      	b.n	8007942 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	099b      	lsrs	r3, r3, #6
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00f      	beq.n	800791a <HAL_I2C_EV_IRQHandler+0x2b2>
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	0a9b      	lsrs	r3, r3, #10
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <HAL_I2C_EV_IRQHandler+0x2b2>
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	089b      	lsrs	r3, r3, #2
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 ff1a 	bl	800874c <I2C_SlaveReceive_RXNE>
 8007918:	e014      	b.n	8007944 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	089b      	lsrs	r3, r3, #2
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00e      	beq.n	8007944 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	0a5b      	lsrs	r3, r3, #9
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 ff48 	bl	80087c8 <I2C_SlaveReceive_BTF>
 8007938:	e004      	b.n	8007944 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800793a:	bf00      	nop
 800793c:	e002      	b.n	8007944 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800793e:	bf00      	nop
 8007940:	e000      	b.n	8007944 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007942:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b08a      	sub	sp, #40	; 0x28
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007962:	2300      	movs	r3, #0
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800796c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	0a1b      	lsrs	r3, r3, #8
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d016      	beq.n	80079a8 <HAL_I2C_ER_IRQHandler+0x5e>
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	0a1b      	lsrs	r3, r3, #8
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d010      	beq.n	80079a8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	f043 0301 	orr.w	r3, r3, #1
 800798c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007996:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079a6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	0a5b      	lsrs	r3, r3, #9
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00e      	beq.n	80079d2 <HAL_I2C_ER_IRQHandler+0x88>
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d008      	beq.n	80079d2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	f043 0302 	orr.w	r3, r3, #2
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80079d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	0a9b      	lsrs	r3, r3, #10
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d03f      	beq.n	8007a5e <HAL_I2C_ER_IRQHandler+0x114>
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	0a1b      	lsrs	r3, r3, #8
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d039      	beq.n	8007a5e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80079ea:	7efb      	ldrb	r3, [r7, #27]
 80079ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007a04:	7ebb      	ldrb	r3, [r7, #26]
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d112      	bne.n	8007a30 <HAL_I2C_ER_IRQHandler+0xe6>
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10f      	bne.n	8007a30 <HAL_I2C_ER_IRQHandler+0xe6>
 8007a10:	7cfb      	ldrb	r3, [r7, #19]
 8007a12:	2b21      	cmp	r3, #33	; 0x21
 8007a14:	d008      	beq.n	8007a28 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007a16:	7cfb      	ldrb	r3, [r7, #19]
 8007a18:	2b29      	cmp	r3, #41	; 0x29
 8007a1a:	d005      	beq.n	8007a28 <HAL_I2C_ER_IRQHandler+0xde>
 8007a1c:	7cfb      	ldrb	r3, [r7, #19]
 8007a1e:	2b28      	cmp	r3, #40	; 0x28
 8007a20:	d106      	bne.n	8007a30 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b21      	cmp	r3, #33	; 0x21
 8007a26:	d103      	bne.n	8007a30 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 f869 	bl	8008b00 <I2C_Slave_AF>
 8007a2e:	e016      	b.n	8007a5e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a38:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	f043 0304 	orr.w	r3, r3, #4
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007a42:	7efb      	ldrb	r3, [r7, #27]
 8007a44:	2b10      	cmp	r3, #16
 8007a46:	d002      	beq.n	8007a4e <HAL_I2C_ER_IRQHandler+0x104>
 8007a48:	7efb      	ldrb	r3, [r7, #27]
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d107      	bne.n	8007a5e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	0adb      	lsrs	r3, r3, #11
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00e      	beq.n	8007a88 <HAL_I2C_ER_IRQHandler+0x13e>
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	0a1b      	lsrs	r3, r3, #8
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d008      	beq.n	8007a88 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	f043 0308 	orr.w	r3, r3, #8
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007a86:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d008      	beq.n	8007aa0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 f8a0 	bl	8008be0 <I2C_ITError>
  }
}
 8007aa0:	bf00      	nop
 8007aa2:	3728      	adds	r7, #40	; 0x28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr

08007aba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr

08007af0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
 8007afc:	4613      	mov	r3, r2
 8007afe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr

08007b0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr

08007b1c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bc80      	pop	{r7}
 8007b2c:	4770      	bx	lr

08007b2e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr

08007b40 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr

08007b52 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b72:	b2db      	uxtb	r3, r3
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr

08007b7e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b94:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d150      	bne.n	8007c46 <I2C_MasterTransmit_TXE+0xc8>
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	2b21      	cmp	r3, #33	; 0x21
 8007ba8:	d14d      	bne.n	8007c46 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d01d      	beq.n	8007bec <I2C_MasterTransmit_TXE+0x6e>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	d01a      	beq.n	8007bec <I2C_MasterTransmit_TXE+0x6e>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bbc:	d016      	beq.n	8007bec <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bcc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2211      	movs	r2, #17
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ff5f 	bl	8007aa8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007bea:	e060      	b.n	8007cae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bfa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c0a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b40      	cmp	r3, #64	; 0x40
 8007c24:	d107      	bne.n	8007c36 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff ff74 	bl	8007b1c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007c34:	e03b      	b.n	8007cae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff ff32 	bl	8007aa8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007c44:	e033      	b.n	8007cae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b21      	cmp	r3, #33	; 0x21
 8007c4a:	d005      	beq.n	8007c58 <I2C_MasterTransmit_TXE+0xda>
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	d12d      	bne.n	8007cae <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b22      	cmp	r3, #34	; 0x22
 8007c56:	d12a      	bne.n	8007cae <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d108      	bne.n	8007c74 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c70:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007c72:	e01c      	b.n	8007cae <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b40      	cmp	r3, #64	; 0x40
 8007c7e:	d103      	bne.n	8007c88 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f88e 	bl	8007da2 <I2C_MemoryTransmit_TXE_BTF>
}
 8007c86:	e012      	b.n	8007cae <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007cac:	e7ff      	b.n	8007cae <I2C_MasterTransmit_TXE+0x130>
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b21      	cmp	r3, #33	; 0x21
 8007cce:	d164      	bne.n	8007d9a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d012      	beq.n	8007d00 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007cfe:	e04c      	b.n	8007d9a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b08      	cmp	r3, #8
 8007d04:	d01d      	beq.n	8007d42 <I2C_MasterTransmit_BTF+0x8c>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d01a      	beq.n	8007d42 <I2C_MasterTransmit_BTF+0x8c>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d12:	d016      	beq.n	8007d42 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d22:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2211      	movs	r2, #17
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff feb4 	bl	8007aa8 <HAL_I2C_MasterTxCpltCallback>
}
 8007d40:	e02b      	b.n	8007d9a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d50:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d60:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	d107      	bne.n	8007d8c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff fec9 	bl	8007b1c <HAL_I2C_MemTxCpltCallback>
}
 8007d8a:	e006      	b.n	8007d9a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff fe87 	bl	8007aa8 <HAL_I2C_MasterTxCpltCallback>
}
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d11d      	bne.n	8007df6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d10b      	bne.n	8007dda <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd2:	1c9a      	adds	r2, r3, #2
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007dd8:	e073      	b.n	8007ec2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	121b      	asrs	r3, r3, #8
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007df4:	e065      	b.n	8007ec2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d10b      	bne.n	8007e16 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007e14:	e055      	b.n	8007ec2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d151      	bne.n	8007ec2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	2b22      	cmp	r3, #34	; 0x22
 8007e22:	d10d      	bne.n	8007e40 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e32:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007e3e:	e040      	b.n	8007ec2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d015      	beq.n	8007e76 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	2b21      	cmp	r3, #33	; 0x21
 8007e4e:	d112      	bne.n	8007e76 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007e74:	e025      	b.n	8007ec2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d120      	bne.n	8007ec2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b21      	cmp	r3, #33	; 0x21
 8007e84:	d11d      	bne.n	8007ec2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e94:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fe2d 	bl	8007b1c <HAL_I2C_MemTxCpltCallback>
}
 8007ec2:	bf00      	nop
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b22      	cmp	r3, #34	; 0x22
 8007edc:	f040 80a2 	bne.w	8008024 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d921      	bls.n	8007f32 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	f040 8082 	bne.w	8008024 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f2e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007f30:	e078      	b.n	8008024 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d074      	beq.n	8008024 <I2C_MasterReceive_RXNE+0x15a>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d002      	beq.n	8007f46 <I2C_MasterReceive_RXNE+0x7c>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d16e      	bne.n	8008024 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fbc6 	bl	80096d8 <I2C_WaitOnSTOPRequestThroughIT>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d142      	bne.n	8007fd8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f60:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	b2d2      	uxtb	r2, r2
 8007f7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	d10a      	bne.n	8007fc2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff fdb7 	bl	8007b2e <HAL_I2C_MemRxCpltCallback>
}
 8007fc0:	e030      	b.n	8008024 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2212      	movs	r2, #18
 8007fce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff fd72 	bl	8007aba <HAL_I2C_MasterRxCpltCallback>
}
 8007fd6:	e025      	b.n	8008024 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fe6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691a      	ldr	r2, [r3, #16]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff fd8e 	bl	8007b40 <HAL_I2C_ErrorCallback>
}
 8008024:	bf00      	nop
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b04      	cmp	r3, #4
 8008042:	d11b      	bne.n	800807c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008052:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691a      	ldr	r2, [r3, #16]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b01      	subs	r3, #1
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800807a:	e0bd      	b.n	80081f8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b03      	cmp	r3, #3
 8008084:	d129      	bne.n	80080da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008094:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b04      	cmp	r3, #4
 800809a:	d00a      	beq.n	80080b2 <I2C_MasterReceive_BTF+0x86>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d007      	beq.n	80080b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80080d8:	e08e      	b.n	80081f8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d176      	bne.n	80081d2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d002      	beq.n	80080f0 <I2C_MasterReceive_BTF+0xc4>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b10      	cmp	r3, #16
 80080ee:	d108      	bne.n	8008102 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	e019      	b.n	8008136 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b04      	cmp	r3, #4
 8008106:	d002      	beq.n	800810e <I2C_MasterReceive_BTF+0xe2>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d108      	bne.n	8008120 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	e00a      	b.n	8008136 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b10      	cmp	r3, #16
 8008124:	d007      	beq.n	8008136 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008134:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	b2d2      	uxtb	r2, r2
 8008142:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	691a      	ldr	r2, [r3, #16]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008178:	b29b      	uxth	r3, r3
 800817a:	3b01      	subs	r3, #1
 800817c:	b29a      	uxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008190:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2220      	movs	r2, #32
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b40      	cmp	r3, #64	; 0x40
 80081a4:	d10a      	bne.n	80081bc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff fcba 	bl	8007b2e <HAL_I2C_MemRxCpltCallback>
}
 80081ba:	e01d      	b.n	80081f8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2212      	movs	r2, #18
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7ff fc75 	bl	8007aba <HAL_I2C_MasterRxCpltCallback>
}
 80081d0:	e012      	b.n	80081f8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	b2d2      	uxtb	r2, r2
 80081de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80081f8:	bf00      	nop
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b40      	cmp	r3, #64	; 0x40
 8008212:	d117      	bne.n	8008244 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008218:	2b00      	cmp	r3, #0
 800821a:	d109      	bne.n	8008230 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008220:	b2db      	uxtb	r3, r3
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800822c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800822e:	e067      	b.n	8008300 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f043 0301 	orr.w	r3, r3, #1
 800823a:	b2da      	uxtb	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	611a      	str	r2, [r3, #16]
}
 8008242:	e05d      	b.n	8008300 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800824c:	d133      	bne.n	80082b6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b21      	cmp	r3, #33	; 0x21
 8008258:	d109      	bne.n	800826e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825e:	b2db      	uxtb	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800826a:	611a      	str	r2, [r3, #16]
 800826c:	e008      	b.n	8008280 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f043 0301 	orr.w	r3, r3, #1
 8008278:	b2da      	uxtb	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <I2C_Master_SB+0x92>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d108      	bne.n	80082a4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008296:	2b00      	cmp	r3, #0
 8008298:	d032      	beq.n	8008300 <I2C_Master_SB+0x100>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d02d      	beq.n	8008300 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082b2:	605a      	str	r2, [r3, #4]
}
 80082b4:	e024      	b.n	8008300 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10e      	bne.n	80082dc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	11db      	asrs	r3, r3, #7
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	f003 0306 	and.w	r3, r3, #6
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f063 030f 	orn	r3, r3, #15
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	611a      	str	r2, [r3, #16]
}
 80082da:	e011      	b.n	8008300 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d10d      	bne.n	8008300 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	11db      	asrs	r3, r3, #7
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 0306 	and.w	r3, r3, #6
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f063 030e 	orn	r3, r3, #14
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	611a      	str	r2, [r3, #16]
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr

0800830a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008316:	b2da      	uxtb	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <I2C_Master_ADD10+0x26>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	2b00      	cmp	r3, #0
 800832e:	d108      	bne.n	8008342 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00c      	beq.n	8008352 <I2C_Master_ADD10+0x48>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	2b00      	cmp	r3, #0
 8008340:	d007      	beq.n	8008352 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008350:	605a      	str	r2, [r3, #4]
  }
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	bc80      	pop	{r7}
 800835a:	4770      	bx	lr

0800835c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800835c:	b480      	push	{r7}
 800835e:	b091      	sub	sp, #68	; 0x44
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800836a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008378:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b22      	cmp	r3, #34	; 0x22
 8008384:	f040 8174 	bne.w	8008670 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10f      	bne.n	80083b0 <I2C_Master_ADDR+0x54>
 8008390:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	d10b      	bne.n	80083b0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008398:	2300      	movs	r3, #0
 800839a:	633b      	str	r3, [r7, #48]	; 0x30
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	633b      	str	r3, [r7, #48]	; 0x30
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	633b      	str	r3, [r7, #48]	; 0x30
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	e16b      	b.n	8008688 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d11d      	bne.n	80083f4 <I2C_Master_ADDR+0x98>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80083c0:	d118      	bne.n	80083f4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083c2:	2300      	movs	r3, #0
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083e6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	651a      	str	r2, [r3, #80]	; 0x50
 80083f2:	e149      	b.n	8008688 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d113      	bne.n	8008426 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083fe:	2300      	movs	r3, #0
 8008400:	62bb      	str	r3, [r7, #40]	; 0x28
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	62bb      	str	r3, [r7, #40]	; 0x28
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	e120      	b.n	8008668 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842a:	b29b      	uxth	r3, r3
 800842c:	2b01      	cmp	r3, #1
 800842e:	f040 808a 	bne.w	8008546 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008438:	d137      	bne.n	80084aa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008448:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008458:	d113      	bne.n	8008482 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008468:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800846a:	2300      	movs	r3, #0
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	627b      	str	r3, [r7, #36]	; 0x24
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	e0f2      	b.n	8008668 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008482:	2300      	movs	r3, #0
 8008484:	623b      	str	r3, [r7, #32]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	623b      	str	r3, [r7, #32]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	623b      	str	r3, [r7, #32]
 8008496:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	e0de      	b.n	8008668 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d02e      	beq.n	800850e <I2C_Master_ADDR+0x1b2>
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	d02b      	beq.n	800850e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80084b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b8:	2b12      	cmp	r3, #18
 80084ba:	d102      	bne.n	80084c2 <I2C_Master_ADDR+0x166>
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d125      	bne.n	800850e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d00e      	beq.n	80084e6 <I2C_Master_ADDR+0x18a>
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d00b      	beq.n	80084e6 <I2C_Master_ADDR+0x18a>
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	2b10      	cmp	r3, #16
 80084d2:	d008      	beq.n	80084e6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	e007      	b.n	80084f6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084f6:	2300      	movs	r3, #0
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	695b      	ldr	r3, [r3, #20]
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	61fb      	str	r3, [r7, #28]
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	e0ac      	b.n	8008668 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800851c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800851e:	2300      	movs	r3, #0
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	61bb      	str	r3, [r7, #24]
 8008532:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	e090      	b.n	8008668 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854a:	b29b      	uxth	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d158      	bne.n	8008602 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	2b04      	cmp	r3, #4
 8008554:	d021      	beq.n	800859a <I2C_Master_ADDR+0x23e>
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	2b02      	cmp	r3, #2
 800855a:	d01e      	beq.n	800859a <I2C_Master_ADDR+0x23e>
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	2b10      	cmp	r3, #16
 8008560:	d01b      	beq.n	800859a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008570:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008572:	2300      	movs	r3, #0
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	e012      	b.n	80085c0 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085a8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085aa:	2300      	movs	r3, #0
 80085ac:	613b      	str	r3, [r7, #16]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	613b      	str	r3, [r7, #16]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085ce:	d14b      	bne.n	8008668 <I2C_Master_ADDR+0x30c>
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085d6:	d00b      	beq.n	80085f0 <I2C_Master_ADDR+0x294>
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d008      	beq.n	80085f0 <I2C_Master_ADDR+0x294>
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	2b08      	cmp	r3, #8
 80085e2:	d005      	beq.n	80085f0 <I2C_Master_ADDR+0x294>
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d002      	beq.n	80085f0 <I2C_Master_ADDR+0x294>
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d13b      	bne.n	8008668 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085fe:	605a      	str	r2, [r3, #4]
 8008600:	e032      	b.n	8008668 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008610:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800861c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008620:	d117      	bne.n	8008652 <I2C_Master_ADDR+0x2f6>
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008628:	d00b      	beq.n	8008642 <I2C_Master_ADDR+0x2e6>
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	2b01      	cmp	r3, #1
 800862e:	d008      	beq.n	8008642 <I2C_Master_ADDR+0x2e6>
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	2b08      	cmp	r3, #8
 8008634:	d005      	beq.n	8008642 <I2C_Master_ADDR+0x2e6>
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	2b10      	cmp	r3, #16
 800863a:	d002      	beq.n	8008642 <I2C_Master_ADDR+0x2e6>
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	2b20      	cmp	r3, #32
 8008640:	d107      	bne.n	8008652 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008650:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	60fb      	str	r3, [r7, #12]
 8008666:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800866e:	e00b      	b.n	8008688 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008670:	2300      	movs	r3, #0
 8008672:	60bb      	str	r3, [r7, #8]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	60bb      	str	r3, [r7, #8]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	60bb      	str	r3, [r7, #8]
 8008684:	68bb      	ldr	r3, [r7, #8]
}
 8008686:	e7ff      	b.n	8008688 <I2C_Master_ADDR+0x32c>
 8008688:	bf00      	nop
 800868a:	3744      	adds	r7, #68	; 0x44
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr

08008692 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d02b      	beq.n	8008704 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	781a      	ldrb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	3b01      	subs	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d114      	bne.n	8008704 <I2C_SlaveTransmit_TXE+0x72>
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	2b29      	cmp	r3, #41	; 0x29
 80086de:	d111      	bne.n	8008704 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2221      	movs	r2, #33	; 0x21
 80086f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2228      	movs	r2, #40	; 0x28
 80086fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff f9e4 	bl	8007acc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008704:	bf00      	nop
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008718:	b29b      	uxth	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d011      	beq.n	8008742 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	781a      	ldrb	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	bc80      	pop	{r7}
 800874a:	4770      	bx	lr

0800874c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800875a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008760:	b29b      	uxth	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d02c      	beq.n	80087c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d114      	bne.n	80087c0 <I2C_SlaveReceive_RXNE+0x74>
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b2a      	cmp	r3, #42	; 0x2a
 800879a:	d111      	bne.n	80087c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2222      	movs	r2, #34	; 0x22
 80087b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2228      	movs	r2, #40	; 0x28
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff f98f 	bl	8007ade <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80087c0:	bf00      	nop
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d012      	beq.n	8008800 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	bc80      	pop	{r7}
 8008808:	4770      	bx	lr

0800880a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008824:	2b28      	cmp	r3, #40	; 0x28
 8008826:	d127      	bne.n	8008878 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008836:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	089b      	lsrs	r3, r3, #2
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008844:	2301      	movs	r3, #1
 8008846:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	09db      	lsrs	r3, r3, #7
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d103      	bne.n	800885c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	81bb      	strh	r3, [r7, #12]
 800885a:	e002      	b.n	8008862 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800886a:	89ba      	ldrh	r2, [r7, #12]
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff f93d 	bl	8007af0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008876:	e00e      	b.n	8008896 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008878:	2300      	movs	r3, #0
 800887a:	60bb      	str	r3, [r7, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	60bb      	str	r3, [r7, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	60bb      	str	r3, [r7, #8]
 800888c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80088c0:	2300      	movs	r3, #0
 80088c2:	60bb      	str	r3, [r7, #8]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	60bb      	str	r3, [r7, #8]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0201 	orr.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088fc:	d172      	bne.n	80089e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b22      	cmp	r3, #34	; 0x22
 8008902:	d002      	beq.n	800890a <I2C_Slave_STOPF+0x6a>
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	2b2a      	cmp	r3, #42	; 0x2a
 8008908:	d135      	bne.n	8008976 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	b29a      	uxth	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008926:	f043 0204 	orr.w	r2, r3, #4
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800893c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	4618      	mov	r0, r3
 8008944:	f7fd fdfc 	bl	8006540 <HAL_DMA_GetState>
 8008948:	4603      	mov	r3, r0
 800894a:	2b01      	cmp	r3, #1
 800894c:	d049      	beq.n	80089e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	4a69      	ldr	r2, [pc, #420]	; (8008af8 <I2C_Slave_STOPF+0x258>)
 8008954:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	4618      	mov	r0, r3
 800895c:	f7fd fc74 	bl	8006248 <HAL_DMA_Abort_IT>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d03d      	beq.n	80089e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008974:	e035      	b.n	80089e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008988:	b29b      	uxth	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	f043 0204 	orr.w	r2, r3, #4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fd fdc6 	bl	8006540 <HAL_DMA_GetState>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d014      	beq.n	80089e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089be:	4a4e      	ldr	r2, [pc, #312]	; (8008af8 <I2C_Slave_STOPF+0x258>)
 80089c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fd fc3e 	bl	8006248 <HAL_DMA_Abort_IT>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d008      	beq.n	80089e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	e000      	b.n	80089e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d03e      	beq.n	8008a6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	d112      	bne.n	8008a22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	b2d2      	uxtb	r2, r2
 8008a08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b40      	cmp	r3, #64	; 0x40
 8008a2e:	d112      	bne.n	8008a56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	691a      	ldr	r2, [r3, #16]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	b2d2      	uxtb	r2, r2
 8008a3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a64:	f043 0204 	orr.w	r2, r3, #4
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f8b3 	bl	8008be0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008a7a:	e039      	b.n	8008af0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a80:	d109      	bne.n	8008a96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2228      	movs	r2, #40	; 0x28
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff f824 	bl	8007ade <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b28      	cmp	r3, #40	; 0x28
 8008aa0:	d111      	bne.n	8008ac6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a15      	ldr	r2, [pc, #84]	; (8008afc <I2C_Slave_STOPF+0x25c>)
 8008aa6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff f823 	bl	8007b0a <HAL_I2C_ListenCpltCallback>
}
 8008ac4:	e014      	b.n	8008af0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	2b22      	cmp	r3, #34	; 0x22
 8008acc:	d002      	beq.n	8008ad4 <I2C_Slave_STOPF+0x234>
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	2b22      	cmp	r3, #34	; 0x22
 8008ad2:	d10d      	bne.n	8008af0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7fe fff7 	bl	8007ade <HAL_I2C_SlaveRxCpltCallback>
}
 8008af0:	bf00      	nop
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	08009359 	.word	0x08009359
 8008afc:	ffff0000 	.word	0xffff0000

08008b00 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d002      	beq.n	8008b22 <I2C_Slave_AF+0x22>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d129      	bne.n	8008b76 <I2C_Slave_AF+0x76>
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	2b28      	cmp	r3, #40	; 0x28
 8008b26:	d126      	bne.n	8008b76 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a2c      	ldr	r2, [pc, #176]	; (8008bdc <I2C_Slave_AF+0xdc>)
 8008b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b3c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b46:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b56:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fe ffcb 	bl	8007b0a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008b74:	e02e      	b.n	8008bd4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	2b21      	cmp	r3, #33	; 0x21
 8008b7a:	d126      	bne.n	8008bca <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a17      	ldr	r2, [pc, #92]	; (8008bdc <I2C_Slave_AF+0xdc>)
 8008b80:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2221      	movs	r2, #33	; 0x21
 8008b86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ba6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bb0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bc0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7fe ff82 	bl	8007acc <HAL_I2C_SlaveTxCpltCallback>
}
 8008bc8:	e004      	b.n	8008bd4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bd2:	615a      	str	r2, [r3, #20]
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	ffff0000 	.word	0xffff0000

08008be0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bf6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	2b10      	cmp	r3, #16
 8008bfc:	d002      	beq.n	8008c04 <I2C_ITError+0x24>
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	2b40      	cmp	r3, #64	; 0x40
 8008c02:	d10a      	bne.n	8008c1a <I2C_ITError+0x3a>
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	2b22      	cmp	r3, #34	; 0x22
 8008c08:	d107      	bne.n	8008c1a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c18:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c20:	2b28      	cmp	r3, #40	; 0x28
 8008c22:	d107      	bne.n	8008c34 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2228      	movs	r2, #40	; 0x28
 8008c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008c32:	e015      	b.n	8008c60 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c42:	d00a      	beq.n	8008c5a <I2C_ITError+0x7a>
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	2b60      	cmp	r3, #96	; 0x60
 8008c48:	d007      	beq.n	8008c5a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c6e:	d161      	bne.n	8008d34 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c7e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d020      	beq.n	8008cce <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	4a6a      	ldr	r2, [pc, #424]	; (8008e3c <I2C_ITError+0x25c>)
 8008c92:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fd fad5 	bl	8006248 <HAL_DMA_Abort_IT>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 8089 	beq.w	8008db8 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0201 	bic.w	r2, r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008cc8:	4610      	mov	r0, r2
 8008cca:	4798      	blx	r3
 8008ccc:	e074      	b.n	8008db8 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd2:	4a5a      	ldr	r2, [pc, #360]	; (8008e3c <I2C_ITError+0x25c>)
 8008cd4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fd fab4 	bl	8006248 <HAL_DMA_Abort_IT>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d068      	beq.n	8008db8 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf0:	2b40      	cmp	r3, #64	; 0x40
 8008cf2:	d10b      	bne.n	8008d0c <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691a      	ldr	r2, [r3, #16]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 0201 	bic.w	r2, r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d2e:	4610      	mov	r0, r2
 8008d30:	4798      	blx	r3
 8008d32:	e041      	b.n	8008db8 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b60      	cmp	r3, #96	; 0x60
 8008d3e:	d125      	bne.n	8008d8c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d58:	2b40      	cmp	r3, #64	; 0x40
 8008d5a:	d10b      	bne.n	8008d74 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691a      	ldr	r2, [r3, #16]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f022 0201 	bic.w	r2, r2, #1
 8008d82:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7fe fee4 	bl	8007b52 <HAL_I2C_AbortCpltCallback>
 8008d8a:	e015      	b.n	8008db8 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d96:	2b40      	cmp	r3, #64	; 0x40
 8008d98:	d10b      	bne.n	8008db2 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691a      	ldr	r2, [r3, #16]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7fe fec4 	bl	8007b40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbc:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10e      	bne.n	8008de6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d109      	bne.n	8008de6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d104      	bne.n	8008de6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d007      	beq.n	8008df6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008df4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dfc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d113      	bne.n	8008e32 <I2C_ITError+0x252>
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	2b28      	cmp	r3, #40	; 0x28
 8008e0e:	d110      	bne.n	8008e32 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a0b      	ldr	r2, [pc, #44]	; (8008e40 <I2C_ITError+0x260>)
 8008e14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7fe fe6c 	bl	8007b0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	08009359 	.word	0x08009359
 8008e40:	ffff0000 	.word	0xffff0000

08008e44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	461a      	mov	r2, r3
 8008e52:	4603      	mov	r3, r0
 8008e54:	817b      	strh	r3, [r7, #10]
 8008e56:	460b      	mov	r3, r1
 8008e58:	813b      	strh	r3, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 fb14 	bl	80094a8 <I2C_WaitOnFlagUntilTimeout>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00d      	beq.n	8008ea2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e94:	d103      	bne.n	8008e9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e05f      	b.n	8008f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008ea2:	897b      	ldrh	r3, [r7, #10]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	6a3a      	ldr	r2, [r7, #32]
 8008eb6:	492d      	ldr	r1, [pc, #180]	; (8008f6c <I2C_RequestMemoryWrite+0x128>)
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fb4c 	bl	8009556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e04c      	b.n	8008f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	617b      	str	r3, [r7, #20]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee0:	6a39      	ldr	r1, [r7, #32]
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 fbb6 	bl	8009654 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00d      	beq.n	8008f0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d107      	bne.n	8008f06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e02b      	b.n	8008f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d105      	bne.n	8008f1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f10:	893b      	ldrh	r3, [r7, #8]
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	611a      	str	r2, [r3, #16]
 8008f1a:	e021      	b.n	8008f60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f1c:	893b      	ldrh	r3, [r7, #8]
 8008f1e:	0a1b      	lsrs	r3, r3, #8
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2c:	6a39      	ldr	r1, [r7, #32]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 fb90 	bl	8009654 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00d      	beq.n	8008f56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d107      	bne.n	8008f52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e005      	b.n	8008f62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f56:	893b      	ldrh	r3, [r7, #8]
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	00010002 	.word	0x00010002

08008f70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af02      	add	r7, sp, #8
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	4608      	mov	r0, r1
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	4603      	mov	r3, r0
 8008f80:	817b      	strh	r3, [r7, #10]
 8008f82:	460b      	mov	r3, r1
 8008f84:	813b      	strh	r3, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 fa76 	bl	80094a8 <I2C_WaitOnFlagUntilTimeout>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00d      	beq.n	8008fde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd0:	d103      	bne.n	8008fda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e0aa      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fde:	897b      	ldrh	r3, [r7, #10]
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	6a3a      	ldr	r2, [r7, #32]
 8008ff2:	4952      	ldr	r1, [pc, #328]	; (800913c <I2C_RequestMemoryRead+0x1cc>)
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 faae 	bl	8009556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e097      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800901a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800901c:	6a39      	ldr	r1, [r7, #32]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fb18 	bl	8009654 <I2C_WaitOnTXEFlagUntilTimeout>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00d      	beq.n	8009046 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	2b04      	cmp	r3, #4
 8009030:	d107      	bne.n	8009042 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e076      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d105      	bne.n	8009058 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800904c:	893b      	ldrh	r3, [r7, #8]
 800904e:	b2da      	uxtb	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	611a      	str	r2, [r3, #16]
 8009056:	e021      	b.n	800909c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009058:	893b      	ldrh	r3, [r7, #8]
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	b29b      	uxth	r3, r3
 800905e:	b2da      	uxtb	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009068:	6a39      	ldr	r1, [r7, #32]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 faf2 	bl	8009654 <I2C_WaitOnTXEFlagUntilTimeout>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00d      	beq.n	8009092 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	2b04      	cmp	r3, #4
 800907c:	d107      	bne.n	800908e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800908c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e050      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009092:	893b      	ldrh	r3, [r7, #8]
 8009094:	b2da      	uxtb	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800909c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800909e:	6a39      	ldr	r1, [r7, #32]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 fad7 	bl	8009654 <I2C_WaitOnTXEFlagUntilTimeout>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00d      	beq.n	80090c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	2b04      	cmp	r3, #4
 80090b2:	d107      	bne.n	80090c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e035      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	2200      	movs	r2, #0
 80090e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 f9df 	bl	80094a8 <I2C_WaitOnFlagUntilTimeout>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00d      	beq.n	800910c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fe:	d103      	bne.n	8009108 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e013      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800910c:	897b      	ldrh	r3, [r7, #10]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	f043 0301 	orr.w	r3, r3, #1
 8009114:	b2da      	uxtb	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	6a3a      	ldr	r2, [r7, #32]
 8009120:	4906      	ldr	r1, [pc, #24]	; (800913c <I2C_RequestMemoryRead+0x1cc>)
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 fa17 	bl	8009556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	00010002 	.word	0x00010002

08009140 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009154:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800915c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009162:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009172:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009180:	2200      	movs	r2, #0
 8009182:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009190:	2200      	movs	r2, #0
 8009192:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009194:	7cfb      	ldrb	r3, [r7, #19]
 8009196:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800919a:	2b21      	cmp	r3, #33	; 0x21
 800919c:	d007      	beq.n	80091ae <I2C_DMAXferCplt+0x6e>
 800919e:	7cfb      	ldrb	r3, [r7, #19]
 80091a0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80091a4:	2b22      	cmp	r3, #34	; 0x22
 80091a6:	d131      	bne.n	800920c <I2C_DMAXferCplt+0xcc>
 80091a8:	7cbb      	ldrb	r3, [r7, #18]
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d12e      	bne.n	800920c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091bc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2200      	movs	r2, #0
 80091c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80091c4:	7cfb      	ldrb	r3, [r7, #19]
 80091c6:	2b29      	cmp	r3, #41	; 0x29
 80091c8:	d10a      	bne.n	80091e0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2221      	movs	r2, #33	; 0x21
 80091ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2228      	movs	r2, #40	; 0x28
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091d8:	6978      	ldr	r0, [r7, #20]
 80091da:	f7fe fc77 	bl	8007acc <HAL_I2C_SlaveTxCpltCallback>
 80091de:	e00c      	b.n	80091fa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80091e0:	7cfb      	ldrb	r3, [r7, #19]
 80091e2:	2b2a      	cmp	r3, #42	; 0x2a
 80091e4:	d109      	bne.n	80091fa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2222      	movs	r2, #34	; 0x22
 80091ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2228      	movs	r2, #40	; 0x28
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80091f4:	6978      	ldr	r0, [r7, #20]
 80091f6:	f7fe fc72 	bl	8007ade <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009208:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800920a:	e06a      	b.n	80092e2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d064      	beq.n	80092e2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800921c:	b29b      	uxth	r3, r3
 800921e:	2b01      	cmp	r3, #1
 8009220:	d107      	bne.n	8009232 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009230:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009240:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009248:	d009      	beq.n	800925e <I2C_DMAXferCplt+0x11e>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b08      	cmp	r3, #8
 800924e:	d006      	beq.n	800925e <I2C_DMAXferCplt+0x11e>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009256:	d002      	beq.n	800925e <I2C_DMAXferCplt+0x11e>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b20      	cmp	r3, #32
 800925c:	d107      	bne.n	800926e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800926c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800927c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800928c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2200      	movs	r2, #0
 8009292:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800929c:	6978      	ldr	r0, [r7, #20]
 800929e:	f7fe fc4f 	bl	8007b40 <HAL_I2C_ErrorCallback>
}
 80092a2:	e01e      	b.n	80092e2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b40      	cmp	r3, #64	; 0x40
 80092b6:	d10a      	bne.n	80092ce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2200      	movs	r2, #0
 80092c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80092c6:	6978      	ldr	r0, [r7, #20]
 80092c8:	f7fe fc31 	bl	8007b2e <HAL_I2C_MemRxCpltCallback>
}
 80092cc:	e009      	b.n	80092e2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2212      	movs	r2, #18
 80092da:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80092dc:	6978      	ldr	r0, [r7, #20]
 80092de:	f7fe fbec 	bl	8007aba <HAL_I2C_MasterRxCpltCallback>
}
 80092e2:	bf00      	nop
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009304:	2200      	movs	r2, #0
 8009306:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930c:	2b00      	cmp	r3, #0
 800930e:	d003      	beq.n	8009318 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	2200      	movs	r2, #0
 8009316:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009326:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2220      	movs	r2, #32
 8009332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	f043 0210 	orr.w	r2, r3, #16
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7fe fbf8 	bl	8007b40 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009350:	bf00      	nop
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009370:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009372:	4b4b      	ldr	r3, [pc, #300]	; (80094a0 <I2C_DMAAbort+0x148>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	08db      	lsrs	r3, r3, #3
 8009378:	4a4a      	ldr	r2, [pc, #296]	; (80094a4 <I2C_DMAAbort+0x14c>)
 800937a:	fba2 2303 	umull	r2, r3, r2, r3
 800937e:	0a1a      	lsrs	r2, r3, #8
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	00da      	lsls	r2, r3, #3
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	f043 0220 	orr.w	r2, r3, #32
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800939e:	e00a      	b.n	80093b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093b4:	d0ea      	beq.n	800938c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c2:	2200      	movs	r2, #0
 80093c4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	2200      	movs	r2, #0
 80093d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2200      	movs	r2, #0
 80093ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	2200      	movs	r2, #0
 80093fa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009408:	2200      	movs	r2, #0
 800940a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 0201 	bic.w	r2, r2, #1
 800941a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b60      	cmp	r3, #96	; 0x60
 8009426:	d10e      	bne.n	8009446 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	2220      	movs	r2, #32
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2200      	movs	r2, #0
 800943c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800943e:	6978      	ldr	r0, [r7, #20]
 8009440:	f7fe fb87 	bl	8007b52 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009444:	e027      	b.n	8009496 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009446:	7cfb      	ldrb	r3, [r7, #19]
 8009448:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800944c:	2b28      	cmp	r3, #40	; 0x28
 800944e:	d117      	bne.n	8009480 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0201 	orr.w	r2, r2, #1
 800945e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800946e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	2200      	movs	r2, #0
 8009474:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2228      	movs	r2, #40	; 0x28
 800947a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800947e:	e007      	b.n	8009490 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2220      	movs	r2, #32
 8009484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009490:	6978      	ldr	r0, [r7, #20]
 8009492:	f7fe fb55 	bl	8007b40 <HAL_I2C_ErrorCallback>
}
 8009496:	bf00      	nop
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20000024 	.word	0x20000024
 80094a4:	14f8b589 	.word	0x14f8b589

080094a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	4613      	mov	r3, r2
 80094b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094b8:	e025      	b.n	8009506 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c0:	d021      	beq.n	8009506 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094c2:	f7fc f83f 	bl	8005544 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d302      	bcc.n	80094d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d116      	bne.n	8009506 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	f043 0220 	orr.w	r2, r3, #32
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e023      	b.n	800954e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	0c1b      	lsrs	r3, r3, #16
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b01      	cmp	r3, #1
 800950e:	d10d      	bne.n	800952c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	43da      	mvns	r2, r3
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4013      	ands	r3, r2
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	bf0c      	ite	eq
 8009522:	2301      	moveq	r3, #1
 8009524:	2300      	movne	r3, #0
 8009526:	b2db      	uxtb	r3, r3
 8009528:	461a      	mov	r2, r3
 800952a:	e00c      	b.n	8009546 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	43da      	mvns	r2, r3
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	4013      	ands	r3, r2
 8009538:	b29b      	uxth	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	bf0c      	ite	eq
 800953e:	2301      	moveq	r3, #1
 8009540:	2300      	movne	r3, #0
 8009542:	b2db      	uxtb	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	429a      	cmp	r2, r3
 800954a:	d0b6      	beq.n	80094ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
 8009562:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009564:	e051      	b.n	800960a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009574:	d123      	bne.n	80095be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009584:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800958e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2220      	movs	r2, #32
 800959a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	f043 0204 	orr.w	r2, r3, #4
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e046      	b.n	800964c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d021      	beq.n	800960a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095c6:	f7fb ffbd 	bl	8005544 <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d302      	bcc.n	80095dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d116      	bne.n	800960a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2220      	movs	r2, #32
 80095e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	f043 0220 	orr.w	r2, r3, #32
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e020      	b.n	800964c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	0c1b      	lsrs	r3, r3, #16
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b01      	cmp	r3, #1
 8009612:	d10c      	bne.n	800962e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	43da      	mvns	r2, r3
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4013      	ands	r3, r2
 8009620:	b29b      	uxth	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	bf14      	ite	ne
 8009626:	2301      	movne	r3, #1
 8009628:	2300      	moveq	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	e00b      	b.n	8009646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	43da      	mvns	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4013      	ands	r3, r2
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	bf14      	ite	ne
 8009640:	2301      	movne	r3, #1
 8009642:	2300      	moveq	r3, #0
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d18d      	bne.n	8009566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009660:	e02d      	b.n	80096be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 f8c0 	bl	80097e8 <I2C_IsAcknowledgeFailed>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e02d      	b.n	80096ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009678:	d021      	beq.n	80096be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800967a:	f7fb ff63 	bl	8005544 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	429a      	cmp	r2, r3
 8009688:	d302      	bcc.n	8009690 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d116      	bne.n	80096be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2220      	movs	r2, #32
 800969a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	f043 0220 	orr.w	r2, r3, #32
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e007      	b.n	80096ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c8:	2b80      	cmp	r3, #128	; 0x80
 80096ca:	d1ca      	bne.n	8009662 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80096e4:	4b13      	ldr	r3, [pc, #76]	; (8009734 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	08db      	lsrs	r3, r3, #3
 80096ea:	4a13      	ldr	r2, [pc, #76]	; (8009738 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80096ec:	fba2 2303 	umull	r2, r3, r2, r3
 80096f0:	0a1a      	lsrs	r2, r3, #8
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d107      	bne.n	8009716 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970a:	f043 0220 	orr.w	r2, r3, #32
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e008      	b.n	8009728 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009724:	d0e9      	beq.n	80096fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	bc80      	pop	{r7}
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	20000024 	.word	0x20000024
 8009738:	14f8b589 	.word	0x14f8b589

0800973c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009748:	e042      	b.n	80097d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b10      	cmp	r3, #16
 8009756:	d119      	bne.n	800978c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0210 	mvn.w	r2, #16
 8009760:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2220      	movs	r2, #32
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e029      	b.n	80097e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800978c:	f7fb feda 	bl	8005544 <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	429a      	cmp	r2, r3
 800979a:	d302      	bcc.n	80097a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d116      	bne.n	80097d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097bc:	f043 0220 	orr.w	r2, r3, #32
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e007      	b.n	80097e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b40      	cmp	r3, #64	; 0x40
 80097dc:	d1b5      	bne.n	800974a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097fe:	d11b      	bne.n	8009838 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009808:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009824:	f043 0204 	orr.w	r2, r3, #4
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e000      	b.n	800983a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	bc80      	pop	{r7}
 8009842:	4770      	bx	lr

08009844 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009854:	d103      	bne.n	800985e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800985c:	e007      	b.n	800986e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009862:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009866:	d102      	bne.n	800986e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2208      	movs	r2, #8
 800986c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	bc80      	pop	{r7}
 8009876:	4770      	bx	lr

08009878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e35a      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d01c      	beq.n	80098cc <HAL_RCC_OscConfig+0x54>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d116      	bne.n	80098cc <HAL_RCC_OscConfig+0x54>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0302 	and.w	r3, r3, #2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d110      	bne.n	80098cc <HAL_RCC_OscConfig+0x54>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10a      	bne.n	80098cc <HAL_RCC_OscConfig+0x54>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d104      	bne.n	80098cc <HAL_RCC_OscConfig+0x54>
 80098c2:	f240 1167 	movw	r1, #359	; 0x167
 80098c6:	488f      	ldr	r0, [pc, #572]	; (8009b04 <HAL_RCC_OscConfig+0x28c>)
 80098c8:	f7fa ff68 	bl	800479c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 809a 	beq.w	8009a0e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00e      	beq.n	8009900 <HAL_RCC_OscConfig+0x88>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ea:	d009      	beq.n	8009900 <HAL_RCC_OscConfig+0x88>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098f4:	d004      	beq.n	8009900 <HAL_RCC_OscConfig+0x88>
 80098f6:	f240 116d 	movw	r1, #365	; 0x16d
 80098fa:	4882      	ldr	r0, [pc, #520]	; (8009b04 <HAL_RCC_OscConfig+0x28c>)
 80098fc:	f7fa ff4e 	bl	800479c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009900:	4b81      	ldr	r3, [pc, #516]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	f003 030c 	and.w	r3, r3, #12
 8009908:	2b04      	cmp	r3, #4
 800990a:	d00c      	beq.n	8009926 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800990c:	4b7e      	ldr	r3, [pc, #504]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f003 030c 	and.w	r3, r3, #12
 8009914:	2b08      	cmp	r3, #8
 8009916:	d112      	bne.n	800993e <HAL_RCC_OscConfig+0xc6>
 8009918:	4b7b      	ldr	r3, [pc, #492]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009924:	d10b      	bne.n	800993e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009926:	4b78      	ldr	r3, [pc, #480]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d06c      	beq.n	8009a0c <HAL_RCC_OscConfig+0x194>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d168      	bne.n	8009a0c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e300      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009946:	d106      	bne.n	8009956 <HAL_RCC_OscConfig+0xde>
 8009948:	4b6f      	ldr	r3, [pc, #444]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a6e      	ldr	r2, [pc, #440]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 800994e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	e02e      	b.n	80099b4 <HAL_RCC_OscConfig+0x13c>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10c      	bne.n	8009978 <HAL_RCC_OscConfig+0x100>
 800995e:	4b6a      	ldr	r3, [pc, #424]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a69      	ldr	r2, [pc, #420]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	4b67      	ldr	r3, [pc, #412]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a66      	ldr	r2, [pc, #408]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009974:	6013      	str	r3, [r2, #0]
 8009976:	e01d      	b.n	80099b4 <HAL_RCC_OscConfig+0x13c>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009980:	d10c      	bne.n	800999c <HAL_RCC_OscConfig+0x124>
 8009982:	4b61      	ldr	r3, [pc, #388]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a60      	ldr	r2, [pc, #384]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	4b5e      	ldr	r3, [pc, #376]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a5d      	ldr	r2, [pc, #372]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	e00b      	b.n	80099b4 <HAL_RCC_OscConfig+0x13c>
 800999c:	4b5a      	ldr	r3, [pc, #360]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a59      	ldr	r2, [pc, #356]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 80099a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	4b57      	ldr	r3, [pc, #348]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a56      	ldr	r2, [pc, #344]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 80099ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d013      	beq.n	80099e4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099bc:	f7fb fdc2 	bl	8005544 <HAL_GetTick>
 80099c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099c2:	e008      	b.n	80099d6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099c4:	f7fb fdbe 	bl	8005544 <HAL_GetTick>
 80099c8:	4602      	mov	r2, r0
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b64      	cmp	r3, #100	; 0x64
 80099d0:	d901      	bls.n	80099d6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e2b4      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099d6:	4b4c      	ldr	r3, [pc, #304]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0f0      	beq.n	80099c4 <HAL_RCC_OscConfig+0x14c>
 80099e2:	e014      	b.n	8009a0e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099e4:	f7fb fdae 	bl	8005544 <HAL_GetTick>
 80099e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099ea:	e008      	b.n	80099fe <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099ec:	f7fb fdaa 	bl	8005544 <HAL_GetTick>
 80099f0:	4602      	mov	r2, r0
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	2b64      	cmp	r3, #100	; 0x64
 80099f8:	d901      	bls.n	80099fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e2a0      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099fe:	4b42      	ldr	r3, [pc, #264]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1f0      	bne.n	80099ec <HAL_RCC_OscConfig+0x174>
 8009a0a:	e000      	b.n	8009a0e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 8080 	beq.w	8009b1c <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d008      	beq.n	8009a36 <HAL_RCC_OscConfig+0x1be>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d004      	beq.n	8009a36 <HAL_RCC_OscConfig+0x1be>
 8009a2c:	f240 11a1 	movw	r1, #417	; 0x1a1
 8009a30:	4834      	ldr	r0, [pc, #208]	; (8009b04 <HAL_RCC_OscConfig+0x28c>)
 8009a32:	f7fa feb3 	bl	800479c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	2b1f      	cmp	r3, #31
 8009a3c:	d904      	bls.n	8009a48 <HAL_RCC_OscConfig+0x1d0>
 8009a3e:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8009a42:	4830      	ldr	r0, [pc, #192]	; (8009b04 <HAL_RCC_OscConfig+0x28c>)
 8009a44:	f7fa feaa 	bl	800479c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009a48:	4b2f      	ldr	r3, [pc, #188]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f003 030c 	and.w	r3, r3, #12
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00b      	beq.n	8009a6c <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009a54:	4b2c      	ldr	r3, [pc, #176]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f003 030c 	and.w	r3, r3, #12
 8009a5c:	2b08      	cmp	r3, #8
 8009a5e:	d11c      	bne.n	8009a9a <HAL_RCC_OscConfig+0x222>
 8009a60:	4b29      	ldr	r3, [pc, #164]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d116      	bne.n	8009a9a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a6c:	4b26      	ldr	r3, [pc, #152]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0302 	and.w	r3, r3, #2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d005      	beq.n	8009a84 <HAL_RCC_OscConfig+0x20c>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d001      	beq.n	8009a84 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e25d      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a84:	4b20      	ldr	r3, [pc, #128]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	491d      	ldr	r1, [pc, #116]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a98:	e040      	b.n	8009b1c <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d020      	beq.n	8009ae4 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009aa2:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <HAL_RCC_OscConfig+0x294>)
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009aa8:	f7fb fd4c 	bl	8005544 <HAL_GetTick>
 8009aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009aae:	e008      	b.n	8009ac2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ab0:	f7fb fd48 	bl	8005544 <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d901      	bls.n	8009ac2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e23e      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ac2:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0302 	and.w	r3, r3, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0f0      	beq.n	8009ab0 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ace:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	490a      	ldr	r1, [pc, #40]	; (8009b08 <HAL_RCC_OscConfig+0x290>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	600b      	str	r3, [r1, #0]
 8009ae2:	e01b      	b.n	8009b1c <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ae4:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <HAL_RCC_OscConfig+0x294>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009aea:	f7fb fd2b 	bl	8005544 <HAL_GetTick>
 8009aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009af0:	e00e      	b.n	8009b10 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009af2:	f7fb fd27 	bl	8005544 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d907      	bls.n	8009b10 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e21d      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
 8009b04:	08010f94 	.word	0x08010f94
 8009b08:	40021000 	.word	0x40021000
 8009b0c:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b10:	4b7d      	ldr	r3, [pc, #500]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 0302 	and.w	r3, r3, #2
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1ea      	bne.n	8009af2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 0308 	and.w	r3, r3, #8
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d040      	beq.n	8009baa <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d008      	beq.n	8009b42 <HAL_RCC_OscConfig+0x2ca>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d004      	beq.n	8009b42 <HAL_RCC_OscConfig+0x2ca>
 8009b38:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8009b3c:	4873      	ldr	r0, [pc, #460]	; (8009d0c <HAL_RCC_OscConfig+0x494>)
 8009b3e:	f7fa fe2d 	bl	800479c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d019      	beq.n	8009b7e <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b4a:	4b71      	ldr	r3, [pc, #452]	; (8009d10 <HAL_RCC_OscConfig+0x498>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b50:	f7fb fcf8 	bl	8005544 <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b58:	f7fb fcf4 	bl	8005544 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e1ea      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b6a:	4b67      	ldr	r3, [pc, #412]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f0      	beq.n	8009b58 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009b76:	2001      	movs	r0, #1
 8009b78:	f000 fc0c 	bl	800a394 <RCC_Delay>
 8009b7c:	e015      	b.n	8009baa <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b7e:	4b64      	ldr	r3, [pc, #400]	; (8009d10 <HAL_RCC_OscConfig+0x498>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b84:	f7fb fcde 	bl	8005544 <HAL_GetTick>
 8009b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b8a:	e008      	b.n	8009b9e <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b8c:	f7fb fcda 	bl	8005544 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e1d0      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b9e:	4b5a      	ldr	r3, [pc, #360]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f0      	bne.n	8009b8c <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0304 	and.w	r3, r3, #4
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 80bf 	beq.w	8009d36 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00c      	beq.n	8009bde <HAL_RCC_OscConfig+0x366>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d008      	beq.n	8009bde <HAL_RCC_OscConfig+0x366>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	2b05      	cmp	r3, #5
 8009bd2:	d004      	beq.n	8009bde <HAL_RCC_OscConfig+0x366>
 8009bd4:	f240 2111 	movw	r1, #529	; 0x211
 8009bd8:	484c      	ldr	r0, [pc, #304]	; (8009d0c <HAL_RCC_OscConfig+0x494>)
 8009bda:	f7fa fddf 	bl	800479c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bde:	4b4a      	ldr	r3, [pc, #296]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10d      	bne.n	8009c06 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bea:	4b47      	ldr	r3, [pc, #284]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	4a46      	ldr	r2, [pc, #280]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bf4:	61d3      	str	r3, [r2, #28]
 8009bf6:	4b44      	ldr	r3, [pc, #272]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bfe:	60bb      	str	r3, [r7, #8]
 8009c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c02:	2301      	movs	r3, #1
 8009c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c06:	4b43      	ldr	r3, [pc, #268]	; (8009d14 <HAL_RCC_OscConfig+0x49c>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d118      	bne.n	8009c44 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c12:	4b40      	ldr	r3, [pc, #256]	; (8009d14 <HAL_RCC_OscConfig+0x49c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a3f      	ldr	r2, [pc, #252]	; (8009d14 <HAL_RCC_OscConfig+0x49c>)
 8009c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c1e:	f7fb fc91 	bl	8005544 <HAL_GetTick>
 8009c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c24:	e008      	b.n	8009c38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c26:	f7fb fc8d 	bl	8005544 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b64      	cmp	r3, #100	; 0x64
 8009c32:	d901      	bls.n	8009c38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e183      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c38:	4b36      	ldr	r3, [pc, #216]	; (8009d14 <HAL_RCC_OscConfig+0x49c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0f0      	beq.n	8009c26 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d106      	bne.n	8009c5a <HAL_RCC_OscConfig+0x3e2>
 8009c4c:	4b2e      	ldr	r3, [pc, #184]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	4a2d      	ldr	r2, [pc, #180]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	6213      	str	r3, [r2, #32]
 8009c58:	e02d      	b.n	8009cb6 <HAL_RCC_OscConfig+0x43e>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10c      	bne.n	8009c7c <HAL_RCC_OscConfig+0x404>
 8009c62:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	4a28      	ldr	r2, [pc, #160]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c68:	f023 0301 	bic.w	r3, r3, #1
 8009c6c:	6213      	str	r3, [r2, #32]
 8009c6e:	4b26      	ldr	r3, [pc, #152]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	4a25      	ldr	r2, [pc, #148]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c74:	f023 0304 	bic.w	r3, r3, #4
 8009c78:	6213      	str	r3, [r2, #32]
 8009c7a:	e01c      	b.n	8009cb6 <HAL_RCC_OscConfig+0x43e>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b05      	cmp	r3, #5
 8009c82:	d10c      	bne.n	8009c9e <HAL_RCC_OscConfig+0x426>
 8009c84:	4b20      	ldr	r3, [pc, #128]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	4a1f      	ldr	r2, [pc, #124]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c8a:	f043 0304 	orr.w	r3, r3, #4
 8009c8e:	6213      	str	r3, [r2, #32]
 8009c90:	4b1d      	ldr	r3, [pc, #116]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	4a1c      	ldr	r2, [pc, #112]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	6213      	str	r3, [r2, #32]
 8009c9c:	e00b      	b.n	8009cb6 <HAL_RCC_OscConfig+0x43e>
 8009c9e:	4b1a      	ldr	r3, [pc, #104]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	4a19      	ldr	r2, [pc, #100]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009ca4:	f023 0301 	bic.w	r3, r3, #1
 8009ca8:	6213      	str	r3, [r2, #32]
 8009caa:	4b17      	ldr	r3, [pc, #92]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	4a16      	ldr	r2, [pc, #88]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009cb0:	f023 0304 	bic.w	r3, r3, #4
 8009cb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d015      	beq.n	8009cea <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cbe:	f7fb fc41 	bl	8005544 <HAL_GetTick>
 8009cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cc4:	e00a      	b.n	8009cdc <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cc6:	f7fb fc3d 	bl	8005544 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d901      	bls.n	8009cdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e131      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <HAL_RCC_OscConfig+0x490>)
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0ee      	beq.n	8009cc6 <HAL_RCC_OscConfig+0x44e>
 8009ce8:	e01c      	b.n	8009d24 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cea:	f7fb fc2b 	bl	8005544 <HAL_GetTick>
 8009cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009cf0:	e012      	b.n	8009d18 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cf2:	f7fb fc27 	bl	8005544 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d909      	bls.n	8009d18 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e11b      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
 8009d08:	40021000 	.word	0x40021000
 8009d0c:	08010f94 	.word	0x08010f94
 8009d10:	42420480 	.word	0x42420480
 8009d14:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d18:	4b8b      	ldr	r3, [pc, #556]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e6      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009d24:	7dfb      	ldrb	r3, [r7, #23]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d105      	bne.n	8009d36 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d2a:	4b87      	ldr	r3, [pc, #540]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	4a86      	ldr	r2, [pc, #536]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d34:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00c      	beq.n	8009d58 <HAL_RCC_OscConfig+0x4e0>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d008      	beq.n	8009d58 <HAL_RCC_OscConfig+0x4e0>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d004      	beq.n	8009d58 <HAL_RCC_OscConfig+0x4e0>
 8009d4e:	f240 21af 	movw	r1, #687	; 0x2af
 8009d52:	487e      	ldr	r0, [pc, #504]	; (8009f4c <HAL_RCC_OscConfig+0x6d4>)
 8009d54:	f7fa fd22 	bl	800479c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 80ee 	beq.w	8009f3e <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d62:	4b79      	ldr	r3, [pc, #484]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f003 030c 	and.w	r3, r3, #12
 8009d6a:	2b08      	cmp	r3, #8
 8009d6c:	f000 80ce 	beq.w	8009f0c <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	f040 80b2 	bne.w	8009ede <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d009      	beq.n	8009d96 <HAL_RCC_OscConfig+0x51e>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d8a:	d004      	beq.n	8009d96 <HAL_RCC_OscConfig+0x51e>
 8009d8c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8009d90:	486e      	ldr	r0, [pc, #440]	; (8009f4c <HAL_RCC_OscConfig+0x6d4>)
 8009d92:	f7fa fd03 	bl	800479c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d04a      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009da6:	d045      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009db0:	d040      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009dba:	d03b      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dc4:	d036      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009dce:	d031      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009dd8:	d02c      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009de2:	d027      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dec:	d022      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009df6:	d01d      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8009e00:	d018      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009e0a:	d013      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e14:	d00e      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8009e1e:	d009      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e24:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8009e28:	d004      	beq.n	8009e34 <HAL_RCC_OscConfig+0x5bc>
 8009e2a:	f240 21b9 	movw	r1, #697	; 0x2b9
 8009e2e:	4847      	ldr	r0, [pc, #284]	; (8009f4c <HAL_RCC_OscConfig+0x6d4>)
 8009e30:	f7fa fcb4 	bl	800479c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e34:	4b46      	ldr	r3, [pc, #280]	; (8009f50 <HAL_RCC_OscConfig+0x6d8>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e3a:	f7fb fb83 	bl	8005544 <HAL_GetTick>
 8009e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e40:	e008      	b.n	8009e54 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e42:	f7fb fb7f 	bl	8005544 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d901      	bls.n	8009e54 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e075      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e54:	4b3c      	ldr	r3, [pc, #240]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1f0      	bne.n	8009e42 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e68:	d116      	bne.n	8009e98 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d009      	beq.n	8009e86 <HAL_RCC_OscConfig+0x60e>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e7a:	d004      	beq.n	8009e86 <HAL_RCC_OscConfig+0x60e>
 8009e7c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8009e80:	4832      	ldr	r0, [pc, #200]	; (8009f4c <HAL_RCC_OscConfig+0x6d4>)
 8009e82:	f7fa fc8b 	bl	800479c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009e86:	4b30      	ldr	r3, [pc, #192]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	492d      	ldr	r1, [pc, #180]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e98:	4b2b      	ldr	r3, [pc, #172]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a19      	ldr	r1, [r3, #32]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	430b      	orrs	r3, r1
 8009eaa:	4927      	ldr	r1, [pc, #156]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009eb0:	4b27      	ldr	r3, [pc, #156]	; (8009f50 <HAL_RCC_OscConfig+0x6d8>)
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eb6:	f7fb fb45 	bl	8005544 <HAL_GetTick>
 8009eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009ebc:	e008      	b.n	8009ed0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ebe:	f7fb fb41 	bl	8005544 <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d901      	bls.n	8009ed0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e037      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009ed0:	4b1d      	ldr	r3, [pc, #116]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0f0      	beq.n	8009ebe <HAL_RCC_OscConfig+0x646>
 8009edc:	e02f      	b.n	8009f3e <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ede:	4b1c      	ldr	r3, [pc, #112]	; (8009f50 <HAL_RCC_OscConfig+0x6d8>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ee4:	f7fb fb2e 	bl	8005544 <HAL_GetTick>
 8009ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009eea:	e008      	b.n	8009efe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009eec:	f7fb fb2a 	bl	8005544 <HAL_GetTick>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d901      	bls.n	8009efe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009efa:	2303      	movs	r3, #3
 8009efc:	e020      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009efe:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1f0      	bne.n	8009eec <HAL_RCC_OscConfig+0x674>
 8009f0a:	e018      	b.n	8009f3e <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d101      	bne.n	8009f18 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e013      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009f18:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <HAL_RCC_OscConfig+0x6d0>)
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a1b      	ldr	r3, [r3, #32]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d106      	bne.n	8009f3a <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d001      	beq.n	8009f3e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e000      	b.n	8009f40 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	40021000 	.word	0x40021000
 8009f4c:	08010f94 	.word	0x08010f94
 8009f50:	42420060 	.word	0x42420060

08009f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e176      	b.n	800a256 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d116      	bne.n	8009fa2 <HAL_RCC_ClockConfig+0x4e>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d110      	bne.n	8009fa2 <HAL_RCC_ClockConfig+0x4e>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0304 	and.w	r3, r3, #4
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10a      	bne.n	8009fa2 <HAL_RCC_ClockConfig+0x4e>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d104      	bne.n	8009fa2 <HAL_RCC_ClockConfig+0x4e>
 8009f98:	f44f 714e 	mov.w	r1, #824	; 0x338
 8009f9c:	4874      	ldr	r0, [pc, #464]	; (800a170 <HAL_RCC_ClockConfig+0x21c>)
 8009f9e:	f7fa fbfd 	bl	800479c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00a      	beq.n	8009fbe <HAL_RCC_ClockConfig+0x6a>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d007      	beq.n	8009fbe <HAL_RCC_ClockConfig+0x6a>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d004      	beq.n	8009fbe <HAL_RCC_ClockConfig+0x6a>
 8009fb4:	f240 3139 	movw	r1, #825	; 0x339
 8009fb8:	486d      	ldr	r0, [pc, #436]	; (800a170 <HAL_RCC_ClockConfig+0x21c>)
 8009fba:	f7fa fbef 	bl	800479c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009fbe:	4b6d      	ldr	r3, [pc, #436]	; (800a174 <HAL_RCC_ClockConfig+0x220>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0307 	and.w	r3, r3, #7
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d910      	bls.n	8009fee <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fcc:	4b69      	ldr	r3, [pc, #420]	; (800a174 <HAL_RCC_ClockConfig+0x220>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f023 0207 	bic.w	r2, r3, #7
 8009fd4:	4967      	ldr	r1, [pc, #412]	; (800a174 <HAL_RCC_ClockConfig+0x220>)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fdc:	4b65      	ldr	r3, [pc, #404]	; (800a174 <HAL_RCC_ClockConfig+0x220>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 0307 	and.w	r3, r3, #7
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d001      	beq.n	8009fee <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e133      	b.n	800a256 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0302 	and.w	r3, r3, #2
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d049      	beq.n	800a08e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0304 	and.w	r3, r3, #4
 800a002:	2b00      	cmp	r3, #0
 800a004:	d005      	beq.n	800a012 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a006:	4b5c      	ldr	r3, [pc, #368]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	4a5b      	ldr	r2, [pc, #364]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a00c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a010:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0308 	and.w	r3, r3, #8
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d005      	beq.n	800a02a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a01e:	4b56      	ldr	r3, [pc, #344]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	4a55      	ldr	r2, [pc, #340]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a024:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a028:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d024      	beq.n	800a07c <HAL_RCC_ClockConfig+0x128>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	2b80      	cmp	r3, #128	; 0x80
 800a038:	d020      	beq.n	800a07c <HAL_RCC_ClockConfig+0x128>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	2b90      	cmp	r3, #144	; 0x90
 800a040:	d01c      	beq.n	800a07c <HAL_RCC_ClockConfig+0x128>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	2ba0      	cmp	r3, #160	; 0xa0
 800a048:	d018      	beq.n	800a07c <HAL_RCC_ClockConfig+0x128>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	2bb0      	cmp	r3, #176	; 0xb0
 800a050:	d014      	beq.n	800a07c <HAL_RCC_ClockConfig+0x128>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	2bc0      	cmp	r3, #192	; 0xc0
 800a058:	d010      	beq.n	800a07c <HAL_RCC_ClockConfig+0x128>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	2bd0      	cmp	r3, #208	; 0xd0
 800a060:	d00c      	beq.n	800a07c <HAL_RCC_ClockConfig+0x128>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	2be0      	cmp	r3, #224	; 0xe0
 800a068:	d008      	beq.n	800a07c <HAL_RCC_ClockConfig+0x128>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	2bf0      	cmp	r3, #240	; 0xf0
 800a070:	d004      	beq.n	800a07c <HAL_RCC_ClockConfig+0x128>
 800a072:	f240 315f 	movw	r1, #863	; 0x35f
 800a076:	483e      	ldr	r0, [pc, #248]	; (800a170 <HAL_RCC_ClockConfig+0x21c>)
 800a078:	f7fa fb90 	bl	800479c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a07c:	4b3e      	ldr	r3, [pc, #248]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	493b      	ldr	r1, [pc, #236]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d051      	beq.n	800a13e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00c      	beq.n	800a0bc <HAL_RCC_ClockConfig+0x168>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d008      	beq.n	800a0bc <HAL_RCC_ClockConfig+0x168>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d004      	beq.n	800a0bc <HAL_RCC_ClockConfig+0x168>
 800a0b2:	f240 3166 	movw	r1, #870	; 0x366
 800a0b6:	482e      	ldr	r0, [pc, #184]	; (800a170 <HAL_RCC_ClockConfig+0x21c>)
 800a0b8:	f7fa fb70 	bl	800479c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d107      	bne.n	800a0d4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0c4:	4b2c      	ldr	r3, [pc, #176]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d115      	bne.n	800a0fc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e0c0      	b.n	800a256 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d107      	bne.n	800a0ec <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0dc:	4b26      	ldr	r3, [pc, #152]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d109      	bne.n	800a0fc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0b4      	b.n	800a256 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0ec:	4b22      	ldr	r3, [pc, #136]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e0ac      	b.n	800a256 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0fc:	4b1e      	ldr	r3, [pc, #120]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f023 0203 	bic.w	r2, r3, #3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	491b      	ldr	r1, [pc, #108]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a10e:	f7fb fa19 	bl	8005544 <HAL_GetTick>
 800a112:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a114:	e00a      	b.n	800a12c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a116:	f7fb fa15 	bl	8005544 <HAL_GetTick>
 800a11a:	4602      	mov	r2, r0
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	f241 3288 	movw	r2, #5000	; 0x1388
 800a124:	4293      	cmp	r3, r2
 800a126:	d901      	bls.n	800a12c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	e094      	b.n	800a256 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a12c:	4b12      	ldr	r3, [pc, #72]	; (800a178 <HAL_RCC_ClockConfig+0x224>)
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f003 020c 	and.w	r2, r3, #12
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d1eb      	bne.n	800a116 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a13e:	4b0d      	ldr	r3, [pc, #52]	; (800a174 <HAL_RCC_ClockConfig+0x220>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d217      	bcs.n	800a17c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a14c:	4b09      	ldr	r3, [pc, #36]	; (800a174 <HAL_RCC_ClockConfig+0x220>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f023 0207 	bic.w	r2, r3, #7
 800a154:	4907      	ldr	r1, [pc, #28]	; (800a174 <HAL_RCC_ClockConfig+0x220>)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	4313      	orrs	r3, r2
 800a15a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a15c:	4b05      	ldr	r3, [pc, #20]	; (800a174 <HAL_RCC_ClockConfig+0x220>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 0307 	and.w	r3, r3, #7
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d008      	beq.n	800a17c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e073      	b.n	800a256 <HAL_RCC_ClockConfig+0x302>
 800a16e:	bf00      	nop
 800a170:	08010f94 	.word	0x08010f94
 800a174:	40022000 	.word	0x40022000
 800a178:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d025      	beq.n	800a1d4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d018      	beq.n	800a1c2 <HAL_RCC_ClockConfig+0x26e>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a198:	d013      	beq.n	800a1c2 <HAL_RCC_ClockConfig+0x26e>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a1a2:	d00e      	beq.n	800a1c2 <HAL_RCC_ClockConfig+0x26e>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a1ac:	d009      	beq.n	800a1c2 <HAL_RCC_ClockConfig+0x26e>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1b6:	d004      	beq.n	800a1c2 <HAL_RCC_ClockConfig+0x26e>
 800a1b8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800a1bc:	4828      	ldr	r0, [pc, #160]	; (800a260 <HAL_RCC_ClockConfig+0x30c>)
 800a1be:	f7fa faed 	bl	800479c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1c2:	4b28      	ldr	r3, [pc, #160]	; (800a264 <HAL_RCC_ClockConfig+0x310>)
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	4925      	ldr	r1, [pc, #148]	; (800a264 <HAL_RCC_ClockConfig+0x310>)
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d026      	beq.n	800a22e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d018      	beq.n	800a21a <HAL_RCC_ClockConfig+0x2c6>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1f0:	d013      	beq.n	800a21a <HAL_RCC_ClockConfig+0x2c6>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a1fa:	d00e      	beq.n	800a21a <HAL_RCC_ClockConfig+0x2c6>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a204:	d009      	beq.n	800a21a <HAL_RCC_ClockConfig+0x2c6>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a20e:	d004      	beq.n	800a21a <HAL_RCC_ClockConfig+0x2c6>
 800a210:	f240 31ab 	movw	r1, #939	; 0x3ab
 800a214:	4812      	ldr	r0, [pc, #72]	; (800a260 <HAL_RCC_ClockConfig+0x30c>)
 800a216:	f7fa fac1 	bl	800479c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a21a:	4b12      	ldr	r3, [pc, #72]	; (800a264 <HAL_RCC_ClockConfig+0x310>)
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	490e      	ldr	r1, [pc, #56]	; (800a264 <HAL_RCC_ClockConfig+0x310>)
 800a22a:	4313      	orrs	r3, r2
 800a22c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a22e:	f000 f821 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 800a232:	4602      	mov	r2, r0
 800a234:	4b0b      	ldr	r3, [pc, #44]	; (800a264 <HAL_RCC_ClockConfig+0x310>)
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	091b      	lsrs	r3, r3, #4
 800a23a:	f003 030f 	and.w	r3, r3, #15
 800a23e:	490a      	ldr	r1, [pc, #40]	; (800a268 <HAL_RCC_ClockConfig+0x314>)
 800a240:	5ccb      	ldrb	r3, [r1, r3]
 800a242:	fa22 f303 	lsr.w	r3, r2, r3
 800a246:	4a09      	ldr	r2, [pc, #36]	; (800a26c <HAL_RCC_ClockConfig+0x318>)
 800a248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <HAL_RCC_ClockConfig+0x31c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fb f936 	bl	80054c0 <HAL_InitTick>

  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	08010f94 	.word	0x08010f94
 800a264:	40021000 	.word	0x40021000
 800a268:	0801226c 	.word	0x0801226c
 800a26c:	20000024 	.word	0x20000024
 800a270:	20000028 	.word	0x20000028

0800a274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a274:	b490      	push	{r4, r7}
 800a276:	b08a      	sub	sp, #40	; 0x28
 800a278:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a27a:	4b29      	ldr	r3, [pc, #164]	; (800a320 <HAL_RCC_GetSysClockFreq+0xac>)
 800a27c:	1d3c      	adds	r4, r7, #4
 800a27e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a284:	f240 2301 	movw	r3, #513	; 0x201
 800a288:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
 800a28e:	2300      	movs	r3, #0
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	2300      	movs	r3, #0
 800a294:	627b      	str	r3, [r7, #36]	; 0x24
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a29e:	4b21      	ldr	r3, [pc, #132]	; (800a324 <HAL_RCC_GetSysClockFreq+0xb0>)
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	f003 030c 	and.w	r3, r3, #12
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d002      	beq.n	800a2b4 <HAL_RCC_GetSysClockFreq+0x40>
 800a2ae:	2b08      	cmp	r3, #8
 800a2b0:	d003      	beq.n	800a2ba <HAL_RCC_GetSysClockFreq+0x46>
 800a2b2:	e02b      	b.n	800a30c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a2b4:	4b1c      	ldr	r3, [pc, #112]	; (800a328 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a2b6:	623b      	str	r3, [r7, #32]
      break;
 800a2b8:	e02b      	b.n	800a312 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	0c9b      	lsrs	r3, r3, #18
 800a2be:	f003 030f 	and.w	r3, r3, #15
 800a2c2:	3328      	adds	r3, #40	; 0x28
 800a2c4:	443b      	add	r3, r7
 800a2c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800a2ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d012      	beq.n	800a2fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a2d6:	4b13      	ldr	r3, [pc, #76]	; (800a324 <HAL_RCC_GetSysClockFreq+0xb0>)
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	0c5b      	lsrs	r3, r3, #17
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	3328      	adds	r3, #40	; 0x28
 800a2e2:	443b      	add	r3, r7
 800a2e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a2e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	4a0e      	ldr	r2, [pc, #56]	; (800a328 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a2ee:	fb03 f202 	mul.w	r2, r3, r2
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2fa:	e004      	b.n	800a306 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	4a0b      	ldr	r2, [pc, #44]	; (800a32c <HAL_RCC_GetSysClockFreq+0xb8>)
 800a300:	fb02 f303 	mul.w	r3, r2, r3
 800a304:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	623b      	str	r3, [r7, #32]
      break;
 800a30a:	e002      	b.n	800a312 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a30c:	4b06      	ldr	r3, [pc, #24]	; (800a328 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a30e:	623b      	str	r3, [r7, #32]
      break;
 800a310:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a312:	6a3b      	ldr	r3, [r7, #32]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3728      	adds	r7, #40	; 0x28
 800a318:	46bd      	mov	sp, r7
 800a31a:	bc90      	pop	{r4, r7}
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	08010fcc 	.word	0x08010fcc
 800a324:	40021000 	.word	0x40021000
 800a328:	007a1200 	.word	0x007a1200
 800a32c:	003d0900 	.word	0x003d0900

0800a330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a334:	4b02      	ldr	r3, [pc, #8]	; (800a340 <HAL_RCC_GetHCLKFreq+0x10>)
 800a336:	681b      	ldr	r3, [r3, #0]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr
 800a340:	20000024 	.word	0x20000024

0800a344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a348:	f7ff fff2 	bl	800a330 <HAL_RCC_GetHCLKFreq>
 800a34c:	4602      	mov	r2, r0
 800a34e:	4b05      	ldr	r3, [pc, #20]	; (800a364 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	0a1b      	lsrs	r3, r3, #8
 800a354:	f003 0307 	and.w	r3, r3, #7
 800a358:	4903      	ldr	r1, [pc, #12]	; (800a368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a35a:	5ccb      	ldrb	r3, [r1, r3]
 800a35c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a360:	4618      	mov	r0, r3
 800a362:	bd80      	pop	{r7, pc}
 800a364:	40021000 	.word	0x40021000
 800a368:	0801227c 	.word	0x0801227c

0800a36c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a370:	f7ff ffde 	bl	800a330 <HAL_RCC_GetHCLKFreq>
 800a374:	4602      	mov	r2, r0
 800a376:	4b05      	ldr	r3, [pc, #20]	; (800a38c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	0adb      	lsrs	r3, r3, #11
 800a37c:	f003 0307 	and.w	r3, r3, #7
 800a380:	4903      	ldr	r1, [pc, #12]	; (800a390 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a382:	5ccb      	ldrb	r3, [r1, r3]
 800a384:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a388:	4618      	mov	r0, r3
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	40021000 	.word	0x40021000
 800a390:	0801227c 	.word	0x0801227c

0800a394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a39c:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <RCC_Delay+0x34>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a0a      	ldr	r2, [pc, #40]	; (800a3cc <RCC_Delay+0x38>)
 800a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a6:	0a5b      	lsrs	r3, r3, #9
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	fb02 f303 	mul.w	r3, r2, r3
 800a3ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a3b0:	bf00      	nop
  }
  while (Delay --);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	1e5a      	subs	r2, r3, #1
 800a3b6:	60fa      	str	r2, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1f9      	bne.n	800a3b0 <RCC_Delay+0x1c>
}
 800a3bc:	bf00      	nop
 800a3be:	bf00      	nop
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bc80      	pop	{r7}
 800a3c6:	4770      	bx	lr
 800a3c8:	20000024 	.word	0x20000024
 800a3cc:	10624dd3 	.word	0x10624dd3

0800a3d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	613b      	str	r3, [r7, #16]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10f      	bne.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d109      	bne.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b00      	cmp	r3, #0
 800a402:	d103      	bne.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800a404:	216c      	movs	r1, #108	; 0x6c
 800a406:	4873      	ldr	r0, [pc, #460]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800a408:	f7fa f9c8 	bl	800479c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 8095 	beq.w	800a544 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 800a41a:	2300      	movs	r3, #0
 800a41c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d012      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a42e:	d00d      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a438:	d008      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a442:	d003      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a444:	2174      	movs	r1, #116	; 0x74
 800a446:	4863      	ldr	r0, [pc, #396]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800a448:	f7fa f9a8 	bl	800479c <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a44c:	4b62      	ldr	r3, [pc, #392]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a44e:	69db      	ldr	r3, [r3, #28]
 800a450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10d      	bne.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a458:	4b5f      	ldr	r3, [pc, #380]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	4a5e      	ldr	r2, [pc, #376]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a45e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a462:	61d3      	str	r3, [r2, #28]
 800a464:	4b5c      	ldr	r3, [pc, #368]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a466:	69db      	ldr	r3, [r3, #28]
 800a468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a46c:	60bb      	str	r3, [r7, #8]
 800a46e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a470:	2301      	movs	r3, #1
 800a472:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a474:	4b59      	ldr	r3, [pc, #356]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d118      	bne.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a480:	4b56      	ldr	r3, [pc, #344]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a55      	ldr	r2, [pc, #340]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800a486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a48a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a48c:	f7fb f85a 	bl	8005544 <HAL_GetTick>
 800a490:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a492:	e008      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a494:	f7fb f856 	bl	8005544 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b64      	cmp	r3, #100	; 0x64
 800a4a0:	d901      	bls.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e092      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4a6:	4b4d      	ldr	r3, [pc, #308]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0f0      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a4b2:	4b49      	ldr	r3, [pc, #292]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d02e      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d027      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4d0:	4b41      	ldr	r3, [pc, #260]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a4da:	4b41      	ldr	r3, [pc, #260]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800a4dc:	2201      	movs	r2, #1
 800a4de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a4e0:	4b3f      	ldr	r3, [pc, #252]	; (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a4e6:	4a3c      	ldr	r2, [pc, #240]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d014      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4f6:	f7fb f825 	bl	8005544 <HAL_GetTick>
 800a4fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4fc:	e00a      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4fe:	f7fb f821 	bl	8005544 <HAL_GetTick>
 800a502:	4602      	mov	r2, r0
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	f241 3288 	movw	r2, #5000	; 0x1388
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d901      	bls.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e05b      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a514:	4b30      	ldr	r3, [pc, #192]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0ee      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a520:	4b2d      	ldr	r3, [pc, #180]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	492a      	ldr	r1, [pc, #168]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a52e:	4313      	orrs	r3, r2
 800a530:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d105      	bne.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a538:	4b27      	ldr	r3, [pc, #156]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	4a26      	ldr	r2, [pc, #152]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a53e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a542:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0302 	and.w	r3, r3, #2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d01f      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d012      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a560:	d00d      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a56a:	d008      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a574:	d003      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a576:	21b9      	movs	r1, #185	; 0xb9
 800a578:	4816      	ldr	r0, [pc, #88]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800a57a:	f7fa f90f 	bl	800479c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a57e:	4b16      	ldr	r3, [pc, #88]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	4913      	ldr	r1, [pc, #76]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0310 	and.w	r3, r3, #16
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d016      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5a4:	d008      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d004      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a5ae:	f240 1115 	movw	r1, #277	; 0x115
 800a5b2:	4808      	ldr	r0, [pc, #32]	; (800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800a5b4:	f7fa f8f2 	bl	800479c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a5b8:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	4904      	ldr	r1, [pc, #16]	; (800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3718      	adds	r7, #24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	08010fdc 	.word	0x08010fdc
 800a5d8:	40021000 	.word	0x40021000
 800a5dc:	40007000 	.word	0x40007000
 800a5e0:	42420440 	.word	0x42420440

0800a5e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e16d      	b.n	800a8d2 <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a6b      	ldr	r2, [pc, #428]	; (800a7a8 <HAL_SPI_Init+0x1c4>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d009      	beq.n	800a614 <HAL_SPI_Init+0x30>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a69      	ldr	r2, [pc, #420]	; (800a7ac <HAL_SPI_Init+0x1c8>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d004      	beq.n	800a614 <HAL_SPI_Init+0x30>
 800a60a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a60e:	4868      	ldr	r0, [pc, #416]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a610:	f7fa f8c4 	bl	800479c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d009      	beq.n	800a630 <HAL_SPI_Init+0x4c>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a624:	d004      	beq.n	800a630 <HAL_SPI_Init+0x4c>
 800a626:	f240 1159 	movw	r1, #345	; 0x159
 800a62a:	4861      	ldr	r0, [pc, #388]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a62c:	f7fa f8b6 	bl	800479c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00e      	beq.n	800a656 <HAL_SPI_Init+0x72>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a640:	d009      	beq.n	800a656 <HAL_SPI_Init+0x72>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a64a:	d004      	beq.n	800a656 <HAL_SPI_Init+0x72>
 800a64c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800a650:	4857      	ldr	r0, [pc, #348]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a652:	f7fa f8a3 	bl	800479c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a65e:	d008      	beq.n	800a672 <HAL_SPI_Init+0x8e>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d004      	beq.n	800a672 <HAL_SPI_Init+0x8e>
 800a668:	f240 115b 	movw	r1, #347	; 0x15b
 800a66c:	4850      	ldr	r0, [pc, #320]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a66e:	f7fa f895 	bl	800479c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a67a:	d00d      	beq.n	800a698 <HAL_SPI_Init+0xb4>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d009      	beq.n	800a698 <HAL_SPI_Init+0xb4>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a68c:	d004      	beq.n	800a698 <HAL_SPI_Init+0xb4>
 800a68e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800a692:	4847      	ldr	r0, [pc, #284]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a694:	f7fa f882 	bl	800479c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	69db      	ldr	r3, [r3, #28]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d020      	beq.n	800a6e2 <HAL_SPI_Init+0xfe>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d01c      	beq.n	800a6e2 <HAL_SPI_Init+0xfe>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	d018      	beq.n	800a6e2 <HAL_SPI_Init+0xfe>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	2b18      	cmp	r3, #24
 800a6b6:	d014      	beq.n	800a6e2 <HAL_SPI_Init+0xfe>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	2b20      	cmp	r3, #32
 800a6be:	d010      	beq.n	800a6e2 <HAL_SPI_Init+0xfe>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	2b28      	cmp	r3, #40	; 0x28
 800a6c6:	d00c      	beq.n	800a6e2 <HAL_SPI_Init+0xfe>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	69db      	ldr	r3, [r3, #28]
 800a6cc:	2b30      	cmp	r3, #48	; 0x30
 800a6ce:	d008      	beq.n	800a6e2 <HAL_SPI_Init+0xfe>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	2b38      	cmp	r3, #56	; 0x38
 800a6d6:	d004      	beq.n	800a6e2 <HAL_SPI_Init+0xfe>
 800a6d8:	f240 115d 	movw	r1, #349	; 0x15d
 800a6dc:	4834      	ldr	r0, [pc, #208]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a6de:	f7fa f85d 	bl	800479c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d008      	beq.n	800a6fc <HAL_SPI_Init+0x118>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	2b80      	cmp	r3, #128	; 0x80
 800a6f0:	d004      	beq.n	800a6fc <HAL_SPI_Init+0x118>
 800a6f2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800a6f6:	482e      	ldr	r0, [pc, #184]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a6f8:	f7fa f850 	bl	800479c <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	d004      	beq.n	800a70e <HAL_SPI_Init+0x12a>
 800a704:	f240 1161 	movw	r1, #353	; 0x161
 800a708:	4829      	ldr	r0, [pc, #164]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a70a:	f7fa f847 	bl	800479c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a712:	2b00      	cmp	r3, #0
 800a714:	d14e      	bne.n	800a7b4 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d008      	beq.n	800a730 <HAL_SPI_Init+0x14c>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	2b02      	cmp	r3, #2
 800a724:	d004      	beq.n	800a730 <HAL_SPI_Init+0x14c>
 800a726:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800a72a:	4821      	ldr	r0, [pc, #132]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a72c:	f7fa f836 	bl	800479c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d008      	beq.n	800a74a <HAL_SPI_Init+0x166>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d004      	beq.n	800a74a <HAL_SPI_Init+0x166>
 800a740:	f240 1165 	movw	r1, #357	; 0x165
 800a744:	481a      	ldr	r0, [pc, #104]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a746:	f7fa f829 	bl	800479c <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a752:	d125      	bne.n	800a7a0 <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d056      	beq.n	800a80a <HAL_SPI_Init+0x226>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	2b08      	cmp	r3, #8
 800a762:	d052      	beq.n	800a80a <HAL_SPI_Init+0x226>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	2b10      	cmp	r3, #16
 800a76a:	d04e      	beq.n	800a80a <HAL_SPI_Init+0x226>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	2b18      	cmp	r3, #24
 800a772:	d04a      	beq.n	800a80a <HAL_SPI_Init+0x226>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	2b20      	cmp	r3, #32
 800a77a:	d046      	beq.n	800a80a <HAL_SPI_Init+0x226>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	2b28      	cmp	r3, #40	; 0x28
 800a782:	d042      	beq.n	800a80a <HAL_SPI_Init+0x226>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	69db      	ldr	r3, [r3, #28]
 800a788:	2b30      	cmp	r3, #48	; 0x30
 800a78a:	d03e      	beq.n	800a80a <HAL_SPI_Init+0x226>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	2b38      	cmp	r3, #56	; 0x38
 800a792:	d03a      	beq.n	800a80a <HAL_SPI_Init+0x226>
 800a794:	f240 1169 	movw	r1, #361	; 0x169
 800a798:	4805      	ldr	r0, [pc, #20]	; (800a7b0 <HAL_SPI_Init+0x1cc>)
 800a79a:	f7f9 ffff 	bl	800479c <assert_failed>
 800a79e:	e034      	b.n	800a80a <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	61da      	str	r2, [r3, #28]
 800a7a6:	e030      	b.n	800a80a <HAL_SPI_Init+0x226>
 800a7a8:	40013000 	.word	0x40013000
 800a7ac:	40003800 	.word	0x40003800
 800a7b0:	08011028 	.word	0x08011028
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	69db      	ldr	r3, [r3, #28]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d020      	beq.n	800a7fe <HAL_SPI_Init+0x21a>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d01c      	beq.n	800a7fe <HAL_SPI_Init+0x21a>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	2b10      	cmp	r3, #16
 800a7ca:	d018      	beq.n	800a7fe <HAL_SPI_Init+0x21a>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	2b18      	cmp	r3, #24
 800a7d2:	d014      	beq.n	800a7fe <HAL_SPI_Init+0x21a>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	69db      	ldr	r3, [r3, #28]
 800a7d8:	2b20      	cmp	r3, #32
 800a7da:	d010      	beq.n	800a7fe <HAL_SPI_Init+0x21a>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	2b28      	cmp	r3, #40	; 0x28
 800a7e2:	d00c      	beq.n	800a7fe <HAL_SPI_Init+0x21a>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	2b30      	cmp	r3, #48	; 0x30
 800a7ea:	d008      	beq.n	800a7fe <HAL_SPI_Init+0x21a>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	2b38      	cmp	r3, #56	; 0x38
 800a7f2:	d004      	beq.n	800a7fe <HAL_SPI_Init+0x21a>
 800a7f4:	f240 1173 	movw	r1, #371	; 0x173
 800a7f8:	4838      	ldr	r0, [pc, #224]	; (800a8dc <HAL_SPI_Init+0x2f8>)
 800a7fa:	f7f9 ffcf 	bl	800479c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d106      	bne.n	800a82a <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7f9 fff9 	bl	800481c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2202      	movs	r2, #2
 800a82e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a840:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a852:	431a      	orrs	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a85c:	431a      	orrs	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	431a      	orrs	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	431a      	orrs	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a87a:	431a      	orrs	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	69db      	ldr	r3, [r3, #28]
 800a880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a884:	431a      	orrs	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a88e:	ea42 0103 	orr.w	r1, r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a896:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	0c1a      	lsrs	r2, r3, #16
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f002 0204 	and.w	r2, r2, #4
 800a8b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69da      	ldr	r2, [r3, #28]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	08011028 	.word	0x08011028

0800a8e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75fb      	strb	r3, [r7, #23]

  /* Check tx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d104      	bne.n	800a904 <HAL_SPI_Transmit_DMA+0x24>
 800a8fa:	f240 618f 	movw	r1, #1679	; 0x68f
 800a8fe:	485c      	ldr	r0, [pc, #368]	; (800aa70 <HAL_SPI_Transmit_DMA+0x190>)
 800a900:	f7f9 ff4c 	bl	800479c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d009      	beq.n	800a920 <HAL_SPI_Transmit_DMA+0x40>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a914:	d004      	beq.n	800a920 <HAL_SPI_Transmit_DMA+0x40>
 800a916:	f240 6192 	movw	r1, #1682	; 0x692
 800a91a:	4855      	ldr	r0, [pc, #340]	; (800aa70 <HAL_SPI_Transmit_DMA+0x190>)
 800a91c:	f7f9 ff3e 	bl	800479c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a926:	2b01      	cmp	r3, #1
 800a928:	d101      	bne.n	800a92e <HAL_SPI_Transmit_DMA+0x4e>
 800a92a:	2302      	movs	r3, #2
 800a92c:	e09b      	b.n	800aa66 <HAL_SPI_Transmit_DMA+0x186>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d002      	beq.n	800a948 <HAL_SPI_Transmit_DMA+0x68>
  {
    errorcode = HAL_BUSY;
 800a942:	2302      	movs	r3, #2
 800a944:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a946:	e089      	b.n	800aa5c <HAL_SPI_Transmit_DMA+0x17c>
  }

  if ((pData == NULL) || (Size == 0U))
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <HAL_SPI_Transmit_DMA+0x74>
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <HAL_SPI_Transmit_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a958:	e080      	b.n	800aa5c <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2203      	movs	r2, #3
 800a95e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	88fa      	ldrh	r2, [r7, #6]
 800a972:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	88fa      	ldrh	r2, [r7, #6]
 800a978:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9a0:	d10f      	bne.n	800a9c2 <HAL_SPI_Transmit_DMA+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9c6:	4a2b      	ldr	r2, [pc, #172]	; (800aa74 <HAL_SPI_Transmit_DMA+0x194>)
 800a9c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ce:	4a2a      	ldr	r2, [pc, #168]	; (800aa78 <HAL_SPI_Transmit_DMA+0x198>)
 800a9d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d6:	4a29      	ldr	r2, [pc, #164]	; (800aa7c <HAL_SPI_Transmit_DMA+0x19c>)
 800a9d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9de:	2200      	movs	r2, #0
 800a9e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	330c      	adds	r3, #12
 800a9f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a9fa:	f7fb fb7d 	bl	80060f8 <HAL_DMA_Start_IT>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00c      	beq.n	800aa1e <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa08:	f043 0210 	orr.w	r2, r3, #16
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800aa1c:	e01e      	b.n	800aa5c <HAL_SPI_Transmit_DMA+0x17c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa28:	2b40      	cmp	r3, #64	; 0x40
 800aa2a:	d007      	beq.n	800aa3c <HAL_SPI_Transmit_DMA+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa3a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f042 0220 	orr.w	r2, r2, #32
 800aa4a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	685a      	ldr	r2, [r3, #4]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f042 0202 	orr.w	r2, r2, #2
 800aa5a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	08011028 	.word	0x08011028
 800aa74:	0800b2b7 	.word	0x0800b2b7
 800aa78:	0800b0dd 	.word	0x0800b0dd
 800aa7c:	0800b30b 	.word	0x0800b30b

0800aa80 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d104      	bne.n	800aaa4 <HAL_SPI_Receive_DMA+0x24>
 800aa9a:	f240 61fb 	movw	r1, #1787	; 0x6fb
 800aa9e:	4862      	ldr	r0, [pc, #392]	; (800ac28 <HAL_SPI_Receive_DMA+0x1a8>)
 800aaa0:	f7f9 fe7c 	bl	800479c <assert_failed>

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d119      	bne.n	800aae0 <HAL_SPI_Receive_DMA+0x60>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aab4:	d114      	bne.n	800aae0 <HAL_SPI_Receive_DMA+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2204      	movs	r2, #4
 800aaba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d104      	bne.n	800aad0 <HAL_SPI_Receive_DMA+0x50>
 800aac6:	f240 7102 	movw	r1, #1794	; 0x702
 800aaca:	4857      	ldr	r0, [pc, #348]	; (800ac28 <HAL_SPI_Receive_DMA+0x1a8>)
 800aacc:	f7f9 fe66 	bl	800479c <assert_failed>

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800aad0:	88fb      	ldrh	r3, [r7, #6]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	68b9      	ldr	r1, [r7, #8]
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 f8ae 	bl	800ac38 <HAL_SPI_TransmitReceive_DMA>
 800aadc:	4603      	mov	r3, r0
 800aade:	e09f      	b.n	800ac20 <HAL_SPI_Receive_DMA+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d101      	bne.n	800aaee <HAL_SPI_Receive_DMA+0x6e>
 800aaea:	2302      	movs	r3, #2
 800aaec:	e098      	b.n	800ac20 <HAL_SPI_Receive_DMA+0x1a0>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d002      	beq.n	800ab08 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_BUSY;
 800ab02:	2302      	movs	r3, #2
 800ab04:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab06:	e086      	b.n	800ac16 <HAL_SPI_Receive_DMA+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <HAL_SPI_Receive_DMA+0x94>
 800ab0e:	88fb      	ldrh	r3, [r7, #6]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d102      	bne.n	800ab1a <HAL_SPI_Receive_DMA+0x9a>
  {
    errorcode = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab18:	e07d      	b.n	800ac16 <HAL_SPI_Receive_DMA+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	88fa      	ldrh	r2, [r7, #6]
 800ab32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	88fa      	ldrh	r2, [r7, #6]
 800ab38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab5a:	d10f      	bne.n	800ab7c <HAL_SPI_Receive_DMA+0xfc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab80:	4a2a      	ldr	r2, [pc, #168]	; (800ac2c <HAL_SPI_Receive_DMA+0x1ac>)
 800ab82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab88:	4a29      	ldr	r2, [pc, #164]	; (800ac30 <HAL_SPI_Receive_DMA+0x1b0>)
 800ab8a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab90:	4a28      	ldr	r2, [pc, #160]	; (800ac34 <HAL_SPI_Receive_DMA+0x1b4>)
 800ab92:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab98:	2200      	movs	r2, #0
 800ab9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	330c      	adds	r3, #12
 800aba6:	4619      	mov	r1, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800abb4:	f7fb faa0 	bl	80060f8 <HAL_DMA_Start_IT>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00c      	beq.n	800abd8 <HAL_SPI_Receive_DMA+0x158>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc2:	f043 0210 	orr.w	r2, r3, #16
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800abd6:	e01e      	b.n	800ac16 <HAL_SPI_Receive_DMA+0x196>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abe2:	2b40      	cmp	r3, #64	; 0x40
 800abe4:	d007      	beq.n	800abf6 <HAL_SPI_Receive_DMA+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abf4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f042 0220 	orr.w	r2, r2, #32
 800ac04:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f042 0201 	orr.w	r2, r2, #1
 800ac14:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ac1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	08011028 	.word	0x08011028
 800ac2c:	0800b2d3 	.word	0x0800b2d3
 800ac30:	0800b183 	.word	0x0800b183
 800ac34:	0800b30b 	.word	0x0800b30b

0800ac38 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	75fb      	strb	r3, [r7, #23]

  /* Check rx & tx dma handles */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d104      	bne.n	800ac5c <HAL_SPI_TransmitReceive_DMA+0x24>
 800ac52:	f240 7171 	movw	r1, #1905	; 0x771
 800ac56:	4882      	ldr	r0, [pc, #520]	; (800ae60 <HAL_SPI_TransmitReceive_DMA+0x228>)
 800ac58:	f7f9 fda0 	bl	800479c <assert_failed>
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d104      	bne.n	800ac6e <HAL_SPI_TransmitReceive_DMA+0x36>
 800ac64:	f240 7172 	movw	r1, #1906	; 0x772
 800ac68:	487d      	ldr	r0, [pc, #500]	; (800ae60 <HAL_SPI_TransmitReceive_DMA+0x228>)
 800ac6a:	f7f9 fd97 	bl	800479c <assert_failed>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d004      	beq.n	800ac80 <HAL_SPI_TransmitReceive_DMA+0x48>
 800ac76:	f240 7175 	movw	r1, #1909	; 0x775
 800ac7a:	4879      	ldr	r0, [pc, #484]	; (800ae60 <HAL_SPI_TransmitReceive_DMA+0x228>)
 800ac7c:	f7f9 fd8e 	bl	800479c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hspi);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d101      	bne.n	800ac8e <HAL_SPI_TransmitReceive_DMA+0x56>
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	e0e3      	b.n	800ae56 <HAL_SPI_TransmitReceive_DMA+0x21e>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac9c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800aca4:	7dbb      	ldrb	r3, [r7, #22]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d00d      	beq.n	800acc6 <HAL_SPI_TransmitReceive_DMA+0x8e>
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800acb0:	d106      	bne.n	800acc0 <HAL_SPI_TransmitReceive_DMA+0x88>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d102      	bne.n	800acc0 <HAL_SPI_TransmitReceive_DMA+0x88>
 800acba:	7dbb      	ldrb	r3, [r7, #22]
 800acbc:	2b04      	cmp	r3, #4
 800acbe:	d002      	beq.n	800acc6 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_BUSY;
 800acc0:	2302      	movs	r3, #2
 800acc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acc4:	e0c2      	b.n	800ae4c <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d005      	beq.n	800acd8 <HAL_SPI_TransmitReceive_DMA+0xa0>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <HAL_SPI_TransmitReceive_DMA+0xa0>
 800acd2:	887b      	ldrh	r3, [r7, #2]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d102      	bne.n	800acde <HAL_SPI_TransmitReceive_DMA+0xa6>
  {
    errorcode = HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acdc:	e0b6      	b.n	800ae4c <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b04      	cmp	r3, #4
 800ace8:	d003      	beq.n	800acf2 <HAL_SPI_TransmitReceive_DMA+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2205      	movs	r2, #5
 800acee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	887a      	ldrh	r2, [r7, #2]
 800ad02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	887a      	ldrh	r2, [r7, #2]
 800ad08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	887a      	ldrh	r2, [r7, #2]
 800ad14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	887a      	ldrh	r2, [r7, #2]
 800ad1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b04      	cmp	r3, #4
 800ad32:	d108      	bne.n	800ad46 <HAL_SPI_TransmitReceive_DMA+0x10e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad38:	4a4a      	ldr	r2, [pc, #296]	; (800ae64 <HAL_SPI_TransmitReceive_DMA+0x22c>)
 800ad3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad40:	4a49      	ldr	r2, [pc, #292]	; (800ae68 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800ad42:	629a      	str	r2, [r3, #40]	; 0x28
 800ad44:	e007      	b.n	800ad56 <HAL_SPI_TransmitReceive_DMA+0x11e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad4a:	4a48      	ldr	r2, [pc, #288]	; (800ae6c <HAL_SPI_TransmitReceive_DMA+0x234>)
 800ad4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad52:	4a47      	ldr	r2, [pc, #284]	; (800ae70 <HAL_SPI_TransmitReceive_DMA+0x238>)
 800ad54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad5a:	4a46      	ldr	r2, [pc, #280]	; (800ae74 <HAL_SPI_TransmitReceive_DMA+0x23c>)
 800ad5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad62:	2200      	movs	r2, #0
 800ad64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	4619      	mov	r1, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad76:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ad7e:	f7fb f9bb 	bl	80060f8 <HAL_DMA_Start_IT>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00c      	beq.n	800ada2 <HAL_SPI_TransmitReceive_DMA+0x16a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad8c:	f043 0210 	orr.w	r2, r3, #16
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ada0:	e054      	b.n	800ae4c <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f042 0201 	orr.w	r2, r2, #1
 800adb0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adb6:	2200      	movs	r2, #0
 800adb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adbe:	2200      	movs	r2, #0
 800adc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adc6:	2200      	movs	r2, #0
 800adc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adce:	2200      	movs	r2, #0
 800add0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adda:	4619      	mov	r1, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	330c      	adds	r3, #12
 800ade2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ade8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800adea:	f7fb f985 	bl	80060f8 <HAL_DMA_Start_IT>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00c      	beq.n	800ae0e <HAL_SPI_TransmitReceive_DMA+0x1d6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf8:	f043 0210 	orr.w	r2, r3, #16
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ae0c:	e01e      	b.n	800ae4c <HAL_SPI_TransmitReceive_DMA+0x214>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae18:	2b40      	cmp	r3, #64	; 0x40
 800ae1a:	d007      	beq.n	800ae2c <HAL_SPI_TransmitReceive_DMA+0x1f4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae2a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f042 0220 	orr.w	r2, r2, #32
 800ae3a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f042 0202 	orr.w	r2, r2, #2
 800ae4a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	08011028 	.word	0x08011028
 800ae64:	0800b2d3 	.word	0x0800b2d3
 800ae68:	0800b183 	.word	0x0800b183
 800ae6c:	0800b2ef 	.word	0x0800b2ef
 800ae70:	0800b229 	.word	0x0800b229
 800ae74:	0800b30b 	.word	0x0800b30b

0800ae78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	099b      	lsrs	r3, r3, #6
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10f      	bne.n	800aebc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	099b      	lsrs	r3, r3, #6
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d004      	beq.n	800aebc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
    return;
 800aeba:	e0be      	b.n	800b03a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	085b      	lsrs	r3, r3, #1
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00a      	beq.n	800aede <HAL_SPI_IRQHandler+0x66>
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	09db      	lsrs	r3, r3, #7
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d004      	beq.n	800aede <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	4798      	blx	r3
    return;
 800aedc:	e0ad      	b.n	800b03a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	095b      	lsrs	r3, r3, #5
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <HAL_SPI_IRQHandler+0x80>
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	099b      	lsrs	r3, r3, #6
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 80a1 	beq.w	800b03a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	095b      	lsrs	r3, r3, #5
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 809a 	beq.w	800b03a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	099b      	lsrs	r3, r3, #6
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d023      	beq.n	800af5a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d011      	beq.n	800af42 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af22:	f043 0204 	orr.w	r2, r3, #4
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af2a:	2300      	movs	r3, #0
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	617b      	str	r3, [r7, #20]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	617b      	str	r3, [r7, #20]
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	e00b      	b.n	800af5a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af42:	2300      	movs	r3, #0
 800af44:	613b      	str	r3, [r7, #16]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	613b      	str	r3, [r7, #16]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	613b      	str	r3, [r7, #16]
 800af56:	693b      	ldr	r3, [r7, #16]
        return;
 800af58:	e06f      	b.n	800b03a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	095b      	lsrs	r3, r3, #5
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	2b00      	cmp	r3, #0
 800af64:	d014      	beq.n	800af90 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af6a:	f043 0201 	orr.w	r2, r3, #1
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af72:	2300      	movs	r3, #0
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	60fb      	str	r3, [r7, #12]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af94:	2b00      	cmp	r3, #0
 800af96:	d04f      	beq.n	800b038 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800afa6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	f003 0302 	and.w	r3, r3, #2
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d104      	bne.n	800afc4 <HAL_SPI_IRQHandler+0x14c>
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	f003 0301 	and.w	r3, r3, #1
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d034      	beq.n	800b02e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f022 0203 	bic.w	r2, r2, #3
 800afd2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d011      	beq.n	800b000 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe0:	4a17      	ldr	r2, [pc, #92]	; (800b040 <HAL_SPI_IRQHandler+0x1c8>)
 800afe2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fb f92d 	bl	8006248 <HAL_DMA_Abort_IT>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d005      	beq.n	800b000 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b004:	2b00      	cmp	r3, #0
 800b006:	d016      	beq.n	800b036 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b00c:	4a0c      	ldr	r2, [pc, #48]	; (800b040 <HAL_SPI_IRQHandler+0x1c8>)
 800b00e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b014:	4618      	mov	r0, r3
 800b016:	f7fb f917 	bl	8006248 <HAL_DMA_Abort_IT>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00a      	beq.n	800b036 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b02c:	e003      	b.n	800b036 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f83e 	bl	800b0b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b034:	e000      	b.n	800b038 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800b036:	bf00      	nop
    return;
 800b038:	bf00      	nop
  }
}
 800b03a:	3720      	adds	r7, #32
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	0800b34b 	.word	0x0800b34b

0800b044 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	bc80      	pop	{r7}
 800b054:	4770      	bx	lr

0800b056 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	bc80      	pop	{r7}
 800b066:	4770      	bx	lr

0800b068 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	bc80      	pop	{r7}
 800b078:	4770      	bx	lr

0800b07a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b082:	bf00      	nop
 800b084:	370c      	adds	r7, #12
 800b086:	46bd      	mov	sp, r7
 800b088:	bc80      	pop	{r7}
 800b08a:	4770      	bx	lr

0800b08c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	bc80      	pop	{r7}
 800b09c:	4770      	bx	lr

0800b09e <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b083      	sub	sp, #12
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b0a6:	bf00      	nop
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bc80      	pop	{r7}
 800b0ae:	4770      	bx	lr

0800b0b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bc80      	pop	{r7}
 800b0c0:	4770      	bx	lr

0800b0c2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b083      	sub	sp, #12
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0d0:	b2db      	uxtb	r3, r3
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bc80      	pop	{r7}
 800b0da:	4770      	bx	lr

0800b0dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0ea:	f7fa fa2b 	bl	8005544 <HAL_GetTick>
 800b0ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0320 	and.w	r3, r3, #32
 800b0fa:	2b20      	cmp	r3, #32
 800b0fc:	d03b      	beq.n	800b176 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f022 0220 	bic.w	r2, r2, #32
 800b10c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f022 0202 	bic.w	r2, r2, #2
 800b11c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	2164      	movs	r1, #100	; 0x64
 800b122:	6978      	ldr	r0, [r7, #20]
 800b124:	f000 fa00 	bl	800b528 <SPI_EndRxTxTransaction>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d005      	beq.n	800b13a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b132:	f043 0220 	orr.w	r2, r3, #32
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10a      	bne.n	800b158 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	60fb      	str	r3, [r7, #12]
 800b156:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2200      	movs	r2, #0
 800b15c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d003      	beq.n	800b176 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b16e:	6978      	ldr	r0, [r7, #20]
 800b170:	f7ff ff9e 	bl	800b0b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b174:	e002      	b.n	800b17c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b176:	6978      	ldr	r0, [r7, #20]
 800b178:	f7ff ff64 	bl	800b044 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b084      	sub	sp, #16
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b190:	f7fa f9d8 	bl	8005544 <HAL_GetTick>
 800b194:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0320 	and.w	r3, r3, #32
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d03b      	beq.n	800b21c <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	685a      	ldr	r2, [r3, #4]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f022 0220 	bic.w	r2, r2, #32
 800b1b2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10d      	bne.n	800b1d8 <SPI_DMAReceiveCplt+0x56>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1c4:	d108      	bne.n	800b1d8 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f022 0203 	bic.w	r2, r2, #3
 800b1d4:	605a      	str	r2, [r3, #4]
 800b1d6:	e007      	b.n	800b1e8 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f022 0201 	bic.w	r2, r2, #1
 800b1e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	2164      	movs	r1, #100	; 0x64
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 f949 	bl	800b484 <SPI_EndRxTransaction>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2220      	movs	r2, #32
 800b1fc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b210:	2b00      	cmp	r3, #0
 800b212:	d003      	beq.n	800b21c <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7ff ff4b 	bl	800b0b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b21a:	e002      	b.n	800b222 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f7ff ff1a 	bl	800b056 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b234:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b236:	f7fa f985 	bl	8005544 <HAL_GetTick>
 800b23a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 0320 	and.w	r3, r3, #32
 800b246:	2b20      	cmp	r3, #32
 800b248:	d02f      	beq.n	800b2aa <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f022 0220 	bic.w	r2, r2, #32
 800b258:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	2164      	movs	r1, #100	; 0x64
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f000 f962 	bl	800b528 <SPI_EndRxTxTransaction>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26e:	f043 0220 	orr.w	r2, r3, #32
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f022 0203 	bic.w	r2, r2, #3
 800b284:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2201      	movs	r2, #1
 800b296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d003      	beq.n	800b2aa <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f7ff ff04 	bl	800b0b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b2a8:	e002      	b.n	800b2b0 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f7ff fedc 	bl	800b068 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7ff fed8 	bl	800b07a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b2ca:	bf00      	nop
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f7ff fed3 	bl	800b08c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fa:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7ff fece 	bl	800b09e <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b302:	bf00      	nop
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b316:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0203 	bic.w	r2, r2, #3
 800b326:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b32c:	f043 0210 	orr.w	r2, r3, #16
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f7ff feb7 	bl	800b0b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f7ff fea3 	bl	800b0b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b36a:	bf00      	nop
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	603b      	str	r3, [r7, #0]
 800b380:	4613      	mov	r3, r2
 800b382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b384:	f7fa f8de 	bl	8005544 <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38c:	1a9b      	subs	r3, r3, r2
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	4413      	add	r3, r2
 800b392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b394:	f7fa f8d6 	bl	8005544 <HAL_GetTick>
 800b398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b39a:	4b39      	ldr	r3, [pc, #228]	; (800b480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	015b      	lsls	r3, r3, #5
 800b3a0:	0d1b      	lsrs	r3, r3, #20
 800b3a2:	69fa      	ldr	r2, [r7, #28]
 800b3a4:	fb02 f303 	mul.w	r3, r2, r3
 800b3a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b3aa:	e054      	b.n	800b456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b2:	d050      	beq.n	800b456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b3b4:	f7fa f8c6 	bl	8005544 <HAL_GetTick>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	69fa      	ldr	r2, [r7, #28]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d902      	bls.n	800b3ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d13d      	bne.n	800b446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b3d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3e2:	d111      	bne.n	800b408 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3ec:	d004      	beq.n	800b3f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3f6:	d107      	bne.n	800b408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b410:	d10f      	bne.n	800b432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b442:	2303      	movs	r3, #3
 800b444:	e017      	b.n	800b476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d101      	bne.n	800b450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b44c:	2300      	movs	r3, #0
 800b44e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	3b01      	subs	r3, #1
 800b454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	689a      	ldr	r2, [r3, #8]
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	4013      	ands	r3, r2
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	429a      	cmp	r2, r3
 800b464:	bf0c      	ite	eq
 800b466:	2301      	moveq	r3, #1
 800b468:	2300      	movne	r3, #0
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	461a      	mov	r2, r3
 800b46e:	79fb      	ldrb	r3, [r7, #7]
 800b470:	429a      	cmp	r2, r3
 800b472:	d19b      	bne.n	800b3ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3720      	adds	r7, #32
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000024 	.word	0x20000024

0800b484 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af02      	add	r7, sp, #8
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b498:	d111      	bne.n	800b4be <SPI_EndRxTransaction+0x3a>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4a2:	d004      	beq.n	800b4ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4ac:	d107      	bne.n	800b4be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4bc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4c6:	d117      	bne.n	800b4f8 <SPI_EndRxTransaction+0x74>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4d0:	d112      	bne.n	800b4f8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2101      	movs	r1, #1
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f7ff ff49 	bl	800b374 <SPI_WaitFlagStateUntilTimeout>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d01a      	beq.n	800b51e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ec:	f043 0220 	orr.w	r2, r3, #32
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	e013      	b.n	800b520 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2200      	movs	r2, #0
 800b500:	2180      	movs	r1, #128	; 0x80
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f7ff ff36 	bl	800b374 <SPI_WaitFlagStateUntilTimeout>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d007      	beq.n	800b51e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b512:	f043 0220 	orr.w	r2, r3, #32
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e000      	b.n	800b520 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af02      	add	r7, sp, #8
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	2200      	movs	r2, #0
 800b53c:	2180      	movs	r1, #128	; 0x80
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff ff18 	bl	800b374 <SPI_WaitFlagStateUntilTimeout>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d007      	beq.n	800b55a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54e:	f043 0220 	orr.w	r2, r3, #32
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e000      	b.n	800b55c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e093      	b.n	800b69e <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a4b      	ldr	r2, [pc, #300]	; (800b6a8 <HAL_TIM_Base_Init+0x144>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d013      	beq.n	800b5a8 <HAL_TIM_Base_Init+0x44>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b588:	d00e      	beq.n	800b5a8 <HAL_TIM_Base_Init+0x44>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a47      	ldr	r2, [pc, #284]	; (800b6ac <HAL_TIM_Base_Init+0x148>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d009      	beq.n	800b5a8 <HAL_TIM_Base_Init+0x44>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a45      	ldr	r2, [pc, #276]	; (800b6b0 <HAL_TIM_Base_Init+0x14c>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d004      	beq.n	800b5a8 <HAL_TIM_Base_Init+0x44>
 800b59e:	f240 1113 	movw	r1, #275	; 0x113
 800b5a2:	4844      	ldr	r0, [pc, #272]	; (800b6b4 <HAL_TIM_Base_Init+0x150>)
 800b5a4:	f7f9 f8fa 	bl	800479c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d014      	beq.n	800b5da <HAL_TIM_Base_Init+0x76>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	2b10      	cmp	r3, #16
 800b5b6:	d010      	beq.n	800b5da <HAL_TIM_Base_Init+0x76>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	2b20      	cmp	r3, #32
 800b5be:	d00c      	beq.n	800b5da <HAL_TIM_Base_Init+0x76>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	2b40      	cmp	r3, #64	; 0x40
 800b5c6:	d008      	beq.n	800b5da <HAL_TIM_Base_Init+0x76>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	2b60      	cmp	r3, #96	; 0x60
 800b5ce:	d004      	beq.n	800b5da <HAL_TIM_Base_Init+0x76>
 800b5d0:	f44f 718a 	mov.w	r1, #276	; 0x114
 800b5d4:	4837      	ldr	r0, [pc, #220]	; (800b6b4 <HAL_TIM_Base_Init+0x150>)
 800b5d6:	f7f9 f8e1 	bl	800479c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00e      	beq.n	800b600 <HAL_TIM_Base_Init+0x9c>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ea:	d009      	beq.n	800b600 <HAL_TIM_Base_Init+0x9c>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5f4:	d004      	beq.n	800b600 <HAL_TIM_Base_Init+0x9c>
 800b5f6:	f240 1115 	movw	r1, #277	; 0x115
 800b5fa:	482e      	ldr	r0, [pc, #184]	; (800b6b4 <HAL_TIM_Base_Init+0x150>)
 800b5fc:	f7f9 f8ce 	bl	800479c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d008      	beq.n	800b61a <HAL_TIM_Base_Init+0xb6>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	2b80      	cmp	r3, #128	; 0x80
 800b60e:	d004      	beq.n	800b61a <HAL_TIM_Base_Init+0xb6>
 800b610:	f44f 718b 	mov.w	r1, #278	; 0x116
 800b614:	4827      	ldr	r0, [pc, #156]	; (800b6b4 <HAL_TIM_Base_Init+0x150>)
 800b616:	f7f9 f8c1 	bl	800479c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b00      	cmp	r3, #0
 800b624:	d106      	bne.n	800b634 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7f9 fe4c 	bl	80052cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2202      	movs	r2, #2
 800b638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	3304      	adds	r3, #4
 800b644:	4619      	mov	r1, r3
 800b646:	4610      	mov	r0, r2
 800b648:	f000 fc7c 	bl	800bf44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	40012c00 	.word	0x40012c00
 800b6ac:	40000400 	.word	0x40000400
 800b6b0:	40000800 	.word	0x40000800
 800b6b4:	08011060 	.word	0x08011060

0800b6b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a2e      	ldr	r2, [pc, #184]	; (800b780 <HAL_TIM_Base_Start_IT+0xc8>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d013      	beq.n	800b6f2 <HAL_TIM_Base_Start_IT+0x3a>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6d2:	d00e      	beq.n	800b6f2 <HAL_TIM_Base_Start_IT+0x3a>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a2a      	ldr	r2, [pc, #168]	; (800b784 <HAL_TIM_Base_Start_IT+0xcc>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d009      	beq.n	800b6f2 <HAL_TIM_Base_Start_IT+0x3a>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a29      	ldr	r2, [pc, #164]	; (800b788 <HAL_TIM_Base_Start_IT+0xd0>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d004      	beq.n	800b6f2 <HAL_TIM_Base_Start_IT+0x3a>
 800b6e8:	f240 11cf 	movw	r1, #463	; 0x1cf
 800b6ec:	4827      	ldr	r0, [pc, #156]	; (800b78c <HAL_TIM_Base_Start_IT+0xd4>)
 800b6ee:	f7f9 f855 	bl	800479c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d001      	beq.n	800b702 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e03a      	b.n	800b778 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2202      	movs	r2, #2
 800b706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68da      	ldr	r2, [r3, #12]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f042 0201 	orr.w	r2, r2, #1
 800b718:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a18      	ldr	r2, [pc, #96]	; (800b780 <HAL_TIM_Base_Start_IT+0xc8>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d00e      	beq.n	800b742 <HAL_TIM_Base_Start_IT+0x8a>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b72c:	d009      	beq.n	800b742 <HAL_TIM_Base_Start_IT+0x8a>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a14      	ldr	r2, [pc, #80]	; (800b784 <HAL_TIM_Base_Start_IT+0xcc>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d004      	beq.n	800b742 <HAL_TIM_Base_Start_IT+0x8a>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a12      	ldr	r2, [pc, #72]	; (800b788 <HAL_TIM_Base_Start_IT+0xd0>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d111      	bne.n	800b766 <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	f003 0307 	and.w	r3, r3, #7
 800b74c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2b06      	cmp	r3, #6
 800b752:	d010      	beq.n	800b776 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f042 0201 	orr.w	r2, r2, #1
 800b762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b764:	e007      	b.n	800b776 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f042 0201 	orr.w	r2, r2, #1
 800b774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	40012c00 	.word	0x40012c00
 800b784:	40000400 	.word	0x40000400
 800b788:	40000800 	.word	0x40000800
 800b78c:	08011060 	.word	0x08011060

0800b790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f003 0302 	and.w	r3, r3, #2
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d122      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f003 0302 	and.w	r3, r3, #2
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d11b      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f06f 0202 	mvn.w	r2, #2
 800b7bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	f003 0303 	and.w	r3, r3, #3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fb9b 	bl	800bf0e <HAL_TIM_IC_CaptureCallback>
 800b7d8:	e005      	b.n	800b7e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fb8e 	bl	800befc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fb9d 	bl	800bf20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0304 	and.w	r3, r3, #4
 800b7f6:	2b04      	cmp	r3, #4
 800b7f8:	d122      	bne.n	800b840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b04      	cmp	r3, #4
 800b806:	d11b      	bne.n	800b840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0204 	mvn.w	r2, #4
 800b810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2202      	movs	r2, #2
 800b816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fb71 	bl	800bf0e <HAL_TIM_IC_CaptureCallback>
 800b82c:	e005      	b.n	800b83a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fb64 	bl	800befc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fb73 	bl	800bf20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	f003 0308 	and.w	r3, r3, #8
 800b84a:	2b08      	cmp	r3, #8
 800b84c:	d122      	bne.n	800b894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f003 0308 	and.w	r3, r3, #8
 800b858:	2b08      	cmp	r3, #8
 800b85a:	d11b      	bne.n	800b894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f06f 0208 	mvn.w	r2, #8
 800b864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2204      	movs	r2, #4
 800b86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	69db      	ldr	r3, [r3, #28]
 800b872:	f003 0303 	and.w	r3, r3, #3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fb47 	bl	800bf0e <HAL_TIM_IC_CaptureCallback>
 800b880:	e005      	b.n	800b88e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fb3a 	bl	800befc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fb49 	bl	800bf20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	f003 0310 	and.w	r3, r3, #16
 800b89e:	2b10      	cmp	r3, #16
 800b8a0:	d122      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	f003 0310 	and.w	r3, r3, #16
 800b8ac:	2b10      	cmp	r3, #16
 800b8ae:	d11b      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f06f 0210 	mvn.w	r2, #16
 800b8b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2208      	movs	r2, #8
 800b8be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	69db      	ldr	r3, [r3, #28]
 800b8c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fb1d 	bl	800bf0e <HAL_TIM_IC_CaptureCallback>
 800b8d4:	e005      	b.n	800b8e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fb10 	bl	800befc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fb1f 	bl	800bf20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d10e      	bne.n	800b914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	2b01      	cmp	r3, #1
 800b902:	d107      	bne.n	800b914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f06f 0201 	mvn.w	r2, #1
 800b90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7f8 fe4a 	bl	80045a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b91e:	2b80      	cmp	r3, #128	; 0x80
 800b920:	d10e      	bne.n	800b940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b92c:	2b80      	cmp	r3, #128	; 0x80
 800b92e:	d107      	bne.n	800b940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fcad 	bl	800c29a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b94a:	2b40      	cmp	r3, #64	; 0x40
 800b94c:	d10e      	bne.n	800b96c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b958:	2b40      	cmp	r3, #64	; 0x40
 800b95a:	d107      	bne.n	800b96c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fae3 	bl	800bf32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	f003 0320 	and.w	r3, r3, #32
 800b976:	2b20      	cmp	r3, #32
 800b978:	d10e      	bne.n	800b998 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f003 0320 	and.w	r3, r3, #32
 800b984:	2b20      	cmp	r3, #32
 800b986:	d107      	bne.n	800b998 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f06f 0220 	mvn.w	r2, #32
 800b990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 fc78 	bl	800c288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b998:	bf00      	nop
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d101      	bne.n	800b9b8 <HAL_TIM_ConfigClockSource+0x18>
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	e295      	b.n	800bee4 <HAL_TIM_ConfigClockSource+0x544>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9d0:	d029      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9da:	d024      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d020      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b10      	cmp	r3, #16
 800b9ea:	d01c      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	d018      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b30      	cmp	r3, #48	; 0x30
 800b9fa:	d014      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b40      	cmp	r3, #64	; 0x40
 800ba02:	d010      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b50      	cmp	r3, #80	; 0x50
 800ba0a:	d00c      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b60      	cmp	r3, #96	; 0x60
 800ba12:	d008      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b70      	cmp	r3, #112	; 0x70
 800ba1a:	d004      	beq.n	800ba26 <HAL_TIM_ConfigClockSource+0x86>
 800ba1c:	f241 4132 	movw	r1, #5170	; 0x1432
 800ba20:	486b      	ldr	r0, [pc, #428]	; (800bbd0 <HAL_TIM_ConfigClockSource+0x230>)
 800ba22:	f7f8 febb 	bl	800479c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ba34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba3c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba4e:	f000 80c7 	beq.w	800bbe0 <HAL_TIM_ConfigClockSource+0x240>
 800ba52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba56:	f200 8239 	bhi.w	800becc <HAL_TIM_ConfigClockSource+0x52c>
 800ba5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba5e:	d02d      	beq.n	800babc <HAL_TIM_ConfigClockSource+0x11c>
 800ba60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba64:	f200 8232 	bhi.w	800becc <HAL_TIM_ConfigClockSource+0x52c>
 800ba68:	2b70      	cmp	r3, #112	; 0x70
 800ba6a:	d045      	beq.n	800baf8 <HAL_TIM_ConfigClockSource+0x158>
 800ba6c:	2b70      	cmp	r3, #112	; 0x70
 800ba6e:	f200 822d 	bhi.w	800becc <HAL_TIM_ConfigClockSource+0x52c>
 800ba72:	2b60      	cmp	r3, #96	; 0x60
 800ba74:	f000 8167 	beq.w	800bd46 <HAL_TIM_ConfigClockSource+0x3a6>
 800ba78:	2b60      	cmp	r3, #96	; 0x60
 800ba7a:	f200 8227 	bhi.w	800becc <HAL_TIM_ConfigClockSource+0x52c>
 800ba7e:	2b50      	cmp	r3, #80	; 0x50
 800ba80:	f000 8115 	beq.w	800bcae <HAL_TIM_ConfigClockSource+0x30e>
 800ba84:	2b50      	cmp	r3, #80	; 0x50
 800ba86:	f200 8221 	bhi.w	800becc <HAL_TIM_ConfigClockSource+0x52c>
 800ba8a:	2b40      	cmp	r3, #64	; 0x40
 800ba8c:	f000 81b0 	beq.w	800bdf0 <HAL_TIM_ConfigClockSource+0x450>
 800ba90:	2b40      	cmp	r3, #64	; 0x40
 800ba92:	f200 821b 	bhi.w	800becc <HAL_TIM_ConfigClockSource+0x52c>
 800ba96:	2b30      	cmp	r3, #48	; 0x30
 800ba98:	f000 81f6 	beq.w	800be88 <HAL_TIM_ConfigClockSource+0x4e8>
 800ba9c:	2b30      	cmp	r3, #48	; 0x30
 800ba9e:	f200 8215 	bhi.w	800becc <HAL_TIM_ConfigClockSource+0x52c>
 800baa2:	2b20      	cmp	r3, #32
 800baa4:	f000 81f0 	beq.w	800be88 <HAL_TIM_ConfigClockSource+0x4e8>
 800baa8:	2b20      	cmp	r3, #32
 800baaa:	f200 820f 	bhi.w	800becc <HAL_TIM_ConfigClockSource+0x52c>
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 81ea 	beq.w	800be88 <HAL_TIM_ConfigClockSource+0x4e8>
 800bab4:	2b10      	cmp	r3, #16
 800bab6:	f000 81e7 	beq.w	800be88 <HAL_TIM_ConfigClockSource+0x4e8>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800baba:	e207      	b.n	800becc <HAL_TIM_ConfigClockSource+0x52c>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a44      	ldr	r2, [pc, #272]	; (800bbd4 <HAL_TIM_ConfigClockSource+0x234>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	f000 8204 	beq.w	800bed0 <HAL_TIM_ConfigClockSource+0x530>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad0:	f000 81fe 	beq.w	800bed0 <HAL_TIM_ConfigClockSource+0x530>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a3f      	ldr	r2, [pc, #252]	; (800bbd8 <HAL_TIM_ConfigClockSource+0x238>)
 800bada:	4293      	cmp	r3, r2
 800badc:	f000 81f8 	beq.w	800bed0 <HAL_TIM_ConfigClockSource+0x530>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a3d      	ldr	r2, [pc, #244]	; (800bbdc <HAL_TIM_ConfigClockSource+0x23c>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	f000 81f2 	beq.w	800bed0 <HAL_TIM_ConfigClockSource+0x530>
 800baec:	f241 413e 	movw	r1, #5182	; 0x143e
 800baf0:	4837      	ldr	r0, [pc, #220]	; (800bbd0 <HAL_TIM_ConfigClockSource+0x230>)
 800baf2:	f7f8 fe53 	bl	800479c <assert_failed>
      break;
 800baf6:	e1eb      	b.n	800bed0 <HAL_TIM_ConfigClockSource+0x530>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a35      	ldr	r2, [pc, #212]	; (800bbd4 <HAL_TIM_ConfigClockSource+0x234>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d013      	beq.n	800bb2a <HAL_TIM_ConfigClockSource+0x18a>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb0a:	d00e      	beq.n	800bb2a <HAL_TIM_ConfigClockSource+0x18a>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a31      	ldr	r2, [pc, #196]	; (800bbd8 <HAL_TIM_ConfigClockSource+0x238>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d009      	beq.n	800bb2a <HAL_TIM_ConfigClockSource+0x18a>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a30      	ldr	r2, [pc, #192]	; (800bbdc <HAL_TIM_ConfigClockSource+0x23c>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d004      	beq.n	800bb2a <HAL_TIM_ConfigClockSource+0x18a>
 800bb20:	f241 4145 	movw	r1, #5189	; 0x1445
 800bb24:	482a      	ldr	r0, [pc, #168]	; (800bbd0 <HAL_TIM_ConfigClockSource+0x230>)
 800bb26:	f7f8 fe39 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d013      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x1ba>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb3a:	d00e      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x1ba>
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb44:	d009      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x1ba>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb4e:	d004      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x1ba>
 800bb50:	f241 4148 	movw	r1, #5192	; 0x1448
 800bb54:	481e      	ldr	r0, [pc, #120]	; (800bbd0 <HAL_TIM_ConfigClockSource+0x230>)
 800bb56:	f7f8 fe21 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb62:	d014      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x1ee>
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d010      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x1ee>
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00c      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x1ee>
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d008      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x1ee>
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	2b0a      	cmp	r3, #10
 800bb82:	d004      	beq.n	800bb8e <HAL_TIM_ConfigClockSource+0x1ee>
 800bb84:	f241 4149 	movw	r1, #5193	; 0x1449
 800bb88:	4811      	ldr	r0, [pc, #68]	; (800bbd0 <HAL_TIM_ConfigClockSource+0x230>)
 800bb8a:	f7f8 fe07 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	2b0f      	cmp	r3, #15
 800bb94:	d904      	bls.n	800bba0 <HAL_TIM_ConfigClockSource+0x200>
 800bb96:	f241 414a 	movw	r1, #5194	; 0x144a
 800bb9a:	480d      	ldr	r0, [pc, #52]	; (800bbd0 <HAL_TIM_ConfigClockSource+0x230>)
 800bb9c:	f7f8 fdfe 	bl	800479c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6818      	ldr	r0, [r3, #0]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	6899      	ldr	r1, [r3, #8]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	f000 faa1 	bl	800c0f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bbc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	609a      	str	r2, [r3, #8]
      break;
 800bbcc:	e181      	b.n	800bed2 <HAL_TIM_ConfigClockSource+0x532>
 800bbce:	bf00      	nop
 800bbd0:	08011060 	.word	0x08011060
 800bbd4:	40012c00 	.word	0x40012c00
 800bbd8:	40000400 	.word	0x40000400
 800bbdc:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a7e      	ldr	r2, [pc, #504]	; (800bde0 <HAL_TIM_ConfigClockSource+0x440>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d013      	beq.n	800bc12 <HAL_TIM_ConfigClockSource+0x272>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbf2:	d00e      	beq.n	800bc12 <HAL_TIM_ConfigClockSource+0x272>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a7a      	ldr	r2, [pc, #488]	; (800bde4 <HAL_TIM_ConfigClockSource+0x444>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d009      	beq.n	800bc12 <HAL_TIM_ConfigClockSource+0x272>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a79      	ldr	r2, [pc, #484]	; (800bde8 <HAL_TIM_ConfigClockSource+0x448>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d004      	beq.n	800bc12 <HAL_TIM_ConfigClockSource+0x272>
 800bc08:	f241 415d 	movw	r1, #5213	; 0x145d
 800bc0c:	4877      	ldr	r0, [pc, #476]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bc0e:	f7f8 fdc5 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d013      	beq.n	800bc42 <HAL_TIM_ConfigClockSource+0x2a2>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc22:	d00e      	beq.n	800bc42 <HAL_TIM_ConfigClockSource+0x2a2>
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc2c:	d009      	beq.n	800bc42 <HAL_TIM_ConfigClockSource+0x2a2>
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc36:	d004      	beq.n	800bc42 <HAL_TIM_ConfigClockSource+0x2a2>
 800bc38:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 800bc3c:	486b      	ldr	r0, [pc, #428]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bc3e:	f7f8 fdad 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc4a:	d014      	beq.n	800bc76 <HAL_TIM_ConfigClockSource+0x2d6>
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d010      	beq.n	800bc76 <HAL_TIM_ConfigClockSource+0x2d6>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00c      	beq.n	800bc76 <HAL_TIM_ConfigClockSource+0x2d6>
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d008      	beq.n	800bc76 <HAL_TIM_ConfigClockSource+0x2d6>
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	2b0a      	cmp	r3, #10
 800bc6a:	d004      	beq.n	800bc76 <HAL_TIM_ConfigClockSource+0x2d6>
 800bc6c:	f241 4161 	movw	r1, #5217	; 0x1461
 800bc70:	485e      	ldr	r0, [pc, #376]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bc72:	f7f8 fd93 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	2b0f      	cmp	r3, #15
 800bc7c:	d904      	bls.n	800bc88 <HAL_TIM_ConfigClockSource+0x2e8>
 800bc7e:	f241 4162 	movw	r1, #5218	; 0x1462
 800bc82:	485a      	ldr	r0, [pc, #360]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bc84:	f7f8 fd8a 	bl	800479c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6818      	ldr	r0, [r3, #0]
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	6899      	ldr	r1, [r3, #8]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	f000 fa2d 	bl	800c0f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	689a      	ldr	r2, [r3, #8]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcaa:	609a      	str	r2, [r3, #8]
      break;
 800bcac:	e111      	b.n	800bed2 <HAL_TIM_ConfigClockSource+0x532>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a4b      	ldr	r2, [pc, #300]	; (800bde0 <HAL_TIM_ConfigClockSource+0x440>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d013      	beq.n	800bce0 <HAL_TIM_ConfigClockSource+0x340>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcc0:	d00e      	beq.n	800bce0 <HAL_TIM_ConfigClockSource+0x340>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a47      	ldr	r2, [pc, #284]	; (800bde4 <HAL_TIM_ConfigClockSource+0x444>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d009      	beq.n	800bce0 <HAL_TIM_ConfigClockSource+0x340>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a45      	ldr	r2, [pc, #276]	; (800bde8 <HAL_TIM_ConfigClockSource+0x448>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d004      	beq.n	800bce0 <HAL_TIM_ConfigClockSource+0x340>
 800bcd6:	f241 4171 	movw	r1, #5233	; 0x1471
 800bcda:	4844      	ldr	r0, [pc, #272]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bcdc:	f7f8 fd5e 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bce8:	d014      	beq.n	800bd14 <HAL_TIM_ConfigClockSource+0x374>
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d010      	beq.n	800bd14 <HAL_TIM_ConfigClockSource+0x374>
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00c      	beq.n	800bd14 <HAL_TIM_ConfigClockSource+0x374>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d008      	beq.n	800bd14 <HAL_TIM_ConfigClockSource+0x374>
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	2b0a      	cmp	r3, #10
 800bd08:	d004      	beq.n	800bd14 <HAL_TIM_ConfigClockSource+0x374>
 800bd0a:	f241 4174 	movw	r1, #5236	; 0x1474
 800bd0e:	4837      	ldr	r0, [pc, #220]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bd10:	f7f8 fd44 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	2b0f      	cmp	r3, #15
 800bd1a:	d904      	bls.n	800bd26 <HAL_TIM_ConfigClockSource+0x386>
 800bd1c:	f241 4175 	movw	r1, #5237	; 0x1475
 800bd20:	4832      	ldr	r0, [pc, #200]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bd22:	f7f8 fd3b 	bl	800479c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	6859      	ldr	r1, [r3, #4]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	461a      	mov	r2, r3
 800bd34:	f000 f968 	bl	800c008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2150      	movs	r1, #80	; 0x50
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 f9bf 	bl	800c0c2 <TIM_ITRx_SetConfig>
      break;
 800bd44:	e0c5      	b.n	800bed2 <HAL_TIM_ConfigClockSource+0x532>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a25      	ldr	r2, [pc, #148]	; (800bde0 <HAL_TIM_ConfigClockSource+0x440>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d013      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x3d8>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd58:	d00e      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x3d8>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a21      	ldr	r2, [pc, #132]	; (800bde4 <HAL_TIM_ConfigClockSource+0x444>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d009      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x3d8>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a1f      	ldr	r2, [pc, #124]	; (800bde8 <HAL_TIM_ConfigClockSource+0x448>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d004      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x3d8>
 800bd6e:	f241 4181 	movw	r1, #5249	; 0x1481
 800bd72:	481e      	ldr	r0, [pc, #120]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bd74:	f7f8 fd12 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd80:	d014      	beq.n	800bdac <HAL_TIM_ConfigClockSource+0x40c>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d010      	beq.n	800bdac <HAL_TIM_ConfigClockSource+0x40c>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00c      	beq.n	800bdac <HAL_TIM_ConfigClockSource+0x40c>
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d008      	beq.n	800bdac <HAL_TIM_ConfigClockSource+0x40c>
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	2b0a      	cmp	r3, #10
 800bda0:	d004      	beq.n	800bdac <HAL_TIM_ConfigClockSource+0x40c>
 800bda2:	f241 4184 	movw	r1, #5252	; 0x1484
 800bda6:	4811      	ldr	r0, [pc, #68]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bda8:	f7f8 fcf8 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	2b0f      	cmp	r3, #15
 800bdb2:	d904      	bls.n	800bdbe <HAL_TIM_ConfigClockSource+0x41e>
 800bdb4:	f241 4185 	movw	r1, #5253	; 0x1485
 800bdb8:	480c      	ldr	r0, [pc, #48]	; (800bdec <HAL_TIM_ConfigClockSource+0x44c>)
 800bdba:	f7f8 fcef 	bl	800479c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	6859      	ldr	r1, [r3, #4]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	f000 f94a 	bl	800c064 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2160      	movs	r1, #96	; 0x60
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 f973 	bl	800c0c2 <TIM_ITRx_SetConfig>
      break;
 800bddc:	e079      	b.n	800bed2 <HAL_TIM_ConfigClockSource+0x532>
 800bdde:	bf00      	nop
 800bde0:	40012c00 	.word	0x40012c00
 800bde4:	40000400 	.word	0x40000400
 800bde8:	40000800 	.word	0x40000800
 800bdec:	08011060 	.word	0x08011060
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a3d      	ldr	r2, [pc, #244]	; (800beec <HAL_TIM_ConfigClockSource+0x54c>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d013      	beq.n	800be22 <HAL_TIM_ConfigClockSource+0x482>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be02:	d00e      	beq.n	800be22 <HAL_TIM_ConfigClockSource+0x482>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a39      	ldr	r2, [pc, #228]	; (800bef0 <HAL_TIM_ConfigClockSource+0x550>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d009      	beq.n	800be22 <HAL_TIM_ConfigClockSource+0x482>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a38      	ldr	r2, [pc, #224]	; (800bef4 <HAL_TIM_ConfigClockSource+0x554>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d004      	beq.n	800be22 <HAL_TIM_ConfigClockSource+0x482>
 800be18:	f241 4191 	movw	r1, #5265	; 0x1491
 800be1c:	4836      	ldr	r0, [pc, #216]	; (800bef8 <HAL_TIM_ConfigClockSource+0x558>)
 800be1e:	f7f8 fcbd 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be2a:	d014      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x4b6>
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d010      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x4b6>
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00c      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x4b6>
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	2b02      	cmp	r3, #2
 800be42:	d008      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x4b6>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	2b0a      	cmp	r3, #10
 800be4a:	d004      	beq.n	800be56 <HAL_TIM_ConfigClockSource+0x4b6>
 800be4c:	f241 4194 	movw	r1, #5268	; 0x1494
 800be50:	4829      	ldr	r0, [pc, #164]	; (800bef8 <HAL_TIM_ConfigClockSource+0x558>)
 800be52:	f7f8 fca3 	bl	800479c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	2b0f      	cmp	r3, #15
 800be5c:	d904      	bls.n	800be68 <HAL_TIM_ConfigClockSource+0x4c8>
 800be5e:	f241 4195 	movw	r1, #5269	; 0x1495
 800be62:	4825      	ldr	r0, [pc, #148]	; (800bef8 <HAL_TIM_ConfigClockSource+0x558>)
 800be64:	f7f8 fc9a 	bl	800479c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6818      	ldr	r0, [r3, #0]
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	6859      	ldr	r1, [r3, #4]
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	461a      	mov	r2, r3
 800be76:	f000 f8c7 	bl	800c008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2140      	movs	r1, #64	; 0x40
 800be80:	4618      	mov	r0, r3
 800be82:	f000 f91e 	bl	800c0c2 <TIM_ITRx_SetConfig>
      break;
 800be86:	e024      	b.n	800bed2 <HAL_TIM_ConfigClockSource+0x532>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a17      	ldr	r2, [pc, #92]	; (800beec <HAL_TIM_ConfigClockSource+0x54c>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d013      	beq.n	800beba <HAL_TIM_ConfigClockSource+0x51a>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be9a:	d00e      	beq.n	800beba <HAL_TIM_ConfigClockSource+0x51a>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a13      	ldr	r2, [pc, #76]	; (800bef0 <HAL_TIM_ConfigClockSource+0x550>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d009      	beq.n	800beba <HAL_TIM_ConfigClockSource+0x51a>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a12      	ldr	r2, [pc, #72]	; (800bef4 <HAL_TIM_ConfigClockSource+0x554>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d004      	beq.n	800beba <HAL_TIM_ConfigClockSource+0x51a>
 800beb0:	f241 41a4 	movw	r1, #5284	; 0x14a4
 800beb4:	4810      	ldr	r0, [pc, #64]	; (800bef8 <HAL_TIM_ConfigClockSource+0x558>)
 800beb6:	f7f8 fc71 	bl	800479c <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4619      	mov	r1, r3
 800bec4:	4610      	mov	r0, r2
 800bec6:	f000 f8fc 	bl	800c0c2 <TIM_ITRx_SetConfig>
        break;
 800beca:	e002      	b.n	800bed2 <HAL_TIM_ConfigClockSource+0x532>
      break;
 800becc:	bf00      	nop
 800bece:	e000      	b.n	800bed2 <HAL_TIM_ConfigClockSource+0x532>
      break;
 800bed0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	40012c00 	.word	0x40012c00
 800bef0:	40000400 	.word	0x40000400
 800bef4:	40000800 	.word	0x40000800
 800bef8:	08011060 	.word	0x08011060

0800befc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf04:	bf00      	nop
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bc80      	pop	{r7}
 800bf0c:	4770      	bx	lr

0800bf0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf0e:	b480      	push	{r7}
 800bf10:	b083      	sub	sp, #12
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf16:	bf00      	nop
 800bf18:	370c      	adds	r7, #12
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bc80      	pop	{r7}
 800bf1e:	4770      	bx	lr

0800bf20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bc80      	pop	{r7}
 800bf30:	4770      	bx	lr

0800bf32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf3a:	bf00      	nop
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bc80      	pop	{r7}
 800bf42:	4770      	bx	lr

0800bf44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a29      	ldr	r2, [pc, #164]	; (800bffc <TIM_Base_SetConfig+0xb8>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d00b      	beq.n	800bf74 <TIM_Base_SetConfig+0x30>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf62:	d007      	beq.n	800bf74 <TIM_Base_SetConfig+0x30>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a26      	ldr	r2, [pc, #152]	; (800c000 <TIM_Base_SetConfig+0xbc>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d003      	beq.n	800bf74 <TIM_Base_SetConfig+0x30>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a25      	ldr	r2, [pc, #148]	; (800c004 <TIM_Base_SetConfig+0xc0>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d108      	bne.n	800bf86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	4313      	orrs	r3, r2
 800bf84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a1c      	ldr	r2, [pc, #112]	; (800bffc <TIM_Base_SetConfig+0xb8>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d00b      	beq.n	800bfa6 <TIM_Base_SetConfig+0x62>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf94:	d007      	beq.n	800bfa6 <TIM_Base_SetConfig+0x62>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a19      	ldr	r2, [pc, #100]	; (800c000 <TIM_Base_SetConfig+0xbc>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d003      	beq.n	800bfa6 <TIM_Base_SetConfig+0x62>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a18      	ldr	r2, [pc, #96]	; (800c004 <TIM_Base_SetConfig+0xc0>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d108      	bne.n	800bfb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	689a      	ldr	r2, [r3, #8]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a07      	ldr	r2, [pc, #28]	; (800bffc <TIM_Base_SetConfig+0xb8>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d103      	bne.n	800bfec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	691a      	ldr	r2, [r3, #16]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	615a      	str	r2, [r3, #20]
}
 800bff2:	bf00      	nop
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bc80      	pop	{r7}
 800bffa:	4770      	bx	lr
 800bffc:	40012c00 	.word	0x40012c00
 800c000:	40000400 	.word	0x40000400
 800c004:	40000800 	.word	0x40000800

0800c008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c008:	b480      	push	{r7}
 800c00a:	b087      	sub	sp, #28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	f023 0201 	bic.w	r2, r3, #1
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	011b      	lsls	r3, r3, #4
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f023 030a 	bic.w	r3, r3, #10
 800c044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	621a      	str	r2, [r3, #32]
}
 800c05a:	bf00      	nop
 800c05c:	371c      	adds	r7, #28
 800c05e:	46bd      	mov	sp, r7
 800c060:	bc80      	pop	{r7}
 800c062:	4770      	bx	lr

0800c064 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c064:	b480      	push	{r7}
 800c066:	b087      	sub	sp, #28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	f023 0210 	bic.w	r2, r3, #16
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	699b      	ldr	r3, [r3, #24]
 800c080:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c08e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	031b      	lsls	r3, r3, #12
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	4313      	orrs	r3, r2
 800c098:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c0a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	011b      	lsls	r3, r3, #4
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	621a      	str	r2, [r3, #32]
}
 800c0b8:	bf00      	nop
 800c0ba:	371c      	adds	r7, #28
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bc80      	pop	{r7}
 800c0c0:	4770      	bx	lr

0800c0c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b085      	sub	sp, #20
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	f043 0307 	orr.w	r3, r3, #7
 800c0e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	609a      	str	r2, [r3, #8]
}
 800c0ec:	bf00      	nop
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bc80      	pop	{r7}
 800c0f4:	4770      	bx	lr

0800c0f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b087      	sub	sp, #28
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
 800c102:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c110:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	021a      	lsls	r2, r3, #8
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	431a      	orrs	r2, r3
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	4313      	orrs	r3, r2
 800c11e:	697a      	ldr	r2, [r7, #20]
 800c120:	4313      	orrs	r3, r2
 800c122:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	609a      	str	r2, [r3, #8]
}
 800c12a:	bf00      	nop
 800c12c:	371c      	adds	r7, #28
 800c12e:	46bd      	mov	sp, r7
 800c130:	bc80      	pop	{r7}
 800c132:	4770      	bx	lr

0800c134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a4d      	ldr	r2, [pc, #308]	; (800c278 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d013      	beq.n	800c170 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c150:	d00e      	beq.n	800c170 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a49      	ldr	r2, [pc, #292]	; (800c27c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d009      	beq.n	800c170 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a47      	ldr	r2, [pc, #284]	; (800c280 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d004      	beq.n	800c170 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800c166:	f240 7186 	movw	r1, #1926	; 0x786
 800c16a:	4846      	ldr	r0, [pc, #280]	; (800c284 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 800c16c:	f7f8 fb16 	bl	800479c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d020      	beq.n	800c1ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b10      	cmp	r3, #16
 800c17e:	d01c      	beq.n	800c1ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2b20      	cmp	r3, #32
 800c186:	d018      	beq.n	800c1ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b30      	cmp	r3, #48	; 0x30
 800c18e:	d014      	beq.n	800c1ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b40      	cmp	r3, #64	; 0x40
 800c196:	d010      	beq.n	800c1ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2b50      	cmp	r3, #80	; 0x50
 800c19e:	d00c      	beq.n	800c1ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b60      	cmp	r3, #96	; 0x60
 800c1a6:	d008      	beq.n	800c1ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b70      	cmp	r3, #112	; 0x70
 800c1ae:	d004      	beq.n	800c1ba <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800c1b0:	f240 7187 	movw	r1, #1927	; 0x787
 800c1b4:	4833      	ldr	r0, [pc, #204]	; (800c284 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 800c1b6:	f7f8 faf1 	bl	800479c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	2b80      	cmp	r3, #128	; 0x80
 800c1c0:	d008      	beq.n	800c1d4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d004      	beq.n	800c1d4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800c1ca:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800c1ce:	482d      	ldr	r0, [pc, #180]	; (800c284 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 800c1d0:	f7f8 fae4 	bl	800479c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d101      	bne.n	800c1e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c1de:	2302      	movs	r3, #2
 800c1e0:	e046      	b.n	800c270 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2202      	movs	r2, #2
 800c1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c208:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	4313      	orrs	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a15      	ldr	r2, [pc, #84]	; (800c278 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d00e      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c22e:	d009      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a11      	ldr	r2, [pc, #68]	; (800c27c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d004      	beq.n	800c244 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a10      	ldr	r2, [pc, #64]	; (800c280 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d10c      	bne.n	800c25e <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c24a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	4313      	orrs	r3, r2
 800c254:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	40012c00 	.word	0x40012c00
 800c27c:	40000400 	.word	0x40000400
 800c280:	40000800 	.word	0x40000800
 800c284:	08011098 	.word	0x08011098

0800c288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	bc80      	pop	{r7}
 800c298:	4770      	bx	lr

0800c29a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c29a:	b480      	push	{r7}
 800c29c:	b083      	sub	sp, #12
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2a2:	bf00      	nop
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bc80      	pop	{r7}
 800c2aa:	4770      	bx	lr

0800c2ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d101      	bne.n	800c2be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e092      	b.n	800c3e4 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d02c      	beq.n	800c320 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a48      	ldr	r2, [pc, #288]	; (800c3ec <HAL_UART_Init+0x140>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d00e      	beq.n	800c2ee <HAL_UART_Init+0x42>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a46      	ldr	r2, [pc, #280]	; (800c3f0 <HAL_UART_Init+0x144>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d009      	beq.n	800c2ee <HAL_UART_Init+0x42>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a45      	ldr	r2, [pc, #276]	; (800c3f4 <HAL_UART_Init+0x148>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d004      	beq.n	800c2ee <HAL_UART_Init+0x42>
 800c2e4:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800c2e8:	4843      	ldr	r0, [pc, #268]	; (800c3f8 <HAL_UART_Init+0x14c>)
 800c2ea:	f7f8 fa57 	bl	800479c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d028      	beq.n	800c348 <HAL_UART_Init+0x9c>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	699b      	ldr	r3, [r3, #24]
 800c2fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2fe:	d023      	beq.n	800c348 <HAL_UART_Init+0x9c>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c308:	d01e      	beq.n	800c348 <HAL_UART_Init+0x9c>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	699b      	ldr	r3, [r3, #24]
 800c30e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c312:	d019      	beq.n	800c348 <HAL_UART_Init+0x9c>
 800c314:	f240 116d 	movw	r1, #365	; 0x16d
 800c318:	4837      	ldr	r0, [pc, #220]	; (800c3f8 <HAL_UART_Init+0x14c>)
 800c31a:	f7f8 fa3f 	bl	800479c <assert_failed>
 800c31e:	e013      	b.n	800c348 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a31      	ldr	r2, [pc, #196]	; (800c3ec <HAL_UART_Init+0x140>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d00e      	beq.n	800c348 <HAL_UART_Init+0x9c>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a30      	ldr	r2, [pc, #192]	; (800c3f0 <HAL_UART_Init+0x144>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d009      	beq.n	800c348 <HAL_UART_Init+0x9c>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a2e      	ldr	r2, [pc, #184]	; (800c3f4 <HAL_UART_Init+0x148>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d004      	beq.n	800c348 <HAL_UART_Init+0x9c>
 800c33e:	f240 1171 	movw	r1, #369	; 0x171
 800c342:	482d      	ldr	r0, [pc, #180]	; (800c3f8 <HAL_UART_Init+0x14c>)
 800c344:	f7f8 fa2a 	bl	800479c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d009      	beq.n	800c364 <HAL_UART_Init+0xb8>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c358:	d004      	beq.n	800c364 <HAL_UART_Init+0xb8>
 800c35a:	f240 1173 	movw	r1, #371	; 0x173
 800c35e:	4826      	ldr	r0, [pc, #152]	; (800c3f8 <HAL_UART_Init+0x14c>)
 800c360:	f7f8 fa1c 	bl	800479c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7f9 f811 	bl	80053a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2224      	movs	r2, #36	; 0x24
 800c382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68da      	ldr	r2, [r3, #12]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c394:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 fd62 	bl	800ce60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	691a      	ldr	r2, [r3, #16]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c3aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	695a      	ldr	r2, [r3, #20]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	68da      	ldr	r2, [r3, #12]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2220      	movs	r2, #32
 800c3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2220      	movs	r2, #32
 800c3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	40013800 	.word	0x40013800
 800c3f0:	40004400 	.word	0x40004400
 800c3f4:	40004800 	.word	0x40004800
 800c3f8:	080110d4 	.word	0x080110d4

0800c3fc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b08a      	sub	sp, #40	; 0x28
 800c400:	af02      	add	r7, sp, #8
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	603b      	str	r3, [r7, #0]
 800c408:	4613      	mov	r3, r2
 800c40a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c40c:	2300      	movs	r3, #0
 800c40e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b20      	cmp	r3, #32
 800c41a:	f040 808c 	bne.w	800c536 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d002      	beq.n	800c42a <HAL_UART_Receive+0x2e>
 800c424:	88fb      	ldrh	r3, [r7, #6]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	e084      	b.n	800c538 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c434:	2b01      	cmp	r3, #1
 800c436:	d101      	bne.n	800c43c <HAL_UART_Receive+0x40>
 800c438:	2302      	movs	r3, #2
 800c43a:	e07d      	b.n	800c538 <HAL_UART_Receive+0x13c>
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2222      	movs	r2, #34	; 0x22
 800c44e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c458:	f7f9 f874 	bl	8005544 <HAL_GetTick>
 800c45c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	88fa      	ldrh	r2, [r7, #6]
 800c462:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	88fa      	ldrh	r2, [r7, #6]
 800c468:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c472:	d108      	bne.n	800c486 <HAL_UART_Receive+0x8a>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d104      	bne.n	800c486 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800c47c:	2300      	movs	r3, #0
 800c47e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	61bb      	str	r3, [r7, #24]
 800c484:	e003      	b.n	800c48e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c48a:	2300      	movs	r3, #0
 800c48c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c496:	e043      	b.n	800c520 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	f000 faf1 	bl	800ca8a <UART_WaitOnFlagUntilTimeout>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e042      	b.n	800c538 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10c      	bne.n	800c4d2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	3302      	adds	r3, #2
 800c4ce:	61bb      	str	r3, [r7, #24]
 800c4d0:	e01f      	b.n	800c512 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4da:	d007      	beq.n	800c4ec <HAL_UART_Receive+0xf0>
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10a      	bne.n	800c4fa <HAL_UART_Receive+0xfe>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d106      	bne.n	800c4fa <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	701a      	strb	r2, [r3, #0]
 800c4f8:	e008      	b.n	800c50c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	b2db      	uxtb	r3, r3
 800c502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c506:	b2da      	uxtb	r2, r3
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	3301      	adds	r3, #1
 800c510:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c516:	b29b      	uxth	r3, r3
 800c518:	3b01      	subs	r3, #1
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c524:	b29b      	uxth	r3, r3
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1b6      	bne.n	800c498 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2220      	movs	r2, #32
 800c52e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	e000      	b.n	800c538 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800c536:	2302      	movs	r3, #2
  }
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3720      	adds	r7, #32
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	4613      	mov	r3, r2
 800c54c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b20      	cmp	r3, #32
 800c558:	d130      	bne.n	800c5bc <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <HAL_UART_Transmit_IT+0x26>
 800c560:	88fb      	ldrh	r3, [r7, #6]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d101      	bne.n	800c56a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e029      	b.n	800c5be <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c570:	2b01      	cmp	r3, #1
 800c572:	d101      	bne.n	800c578 <HAL_UART_Transmit_IT+0x38>
 800c574:	2302      	movs	r3, #2
 800c576:	e022      	b.n	800c5be <HAL_UART_Transmit_IT+0x7e>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2201      	movs	r2, #1
 800c57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	88fa      	ldrh	r2, [r7, #6]
 800c58a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	88fa      	ldrh	r2, [r7, #6]
 800c590:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2200      	movs	r2, #0
 800c596:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2221      	movs	r2, #33	; 0x21
 800c59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68da      	ldr	r2, [r3, #12]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c5b6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e000      	b.n	800c5be <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c5bc:	2302      	movs	r3, #2
  }
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bc80      	pop	{r7}
 800c5c6:	4770      	bx	lr

0800c5c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	2b20      	cmp	r3, #32
 800c5e0:	d11d      	bne.n	800c61e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <HAL_UART_Receive_IT+0x26>
 800c5e8:	88fb      	ldrh	r3, [r7, #6]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d101      	bne.n	800c5f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e016      	b.n	800c620 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d101      	bne.n	800c600 <HAL_UART_Receive_IT+0x38>
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	e00f      	b.n	800c620 <HAL_UART_Receive_IT+0x58>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800c60e:	88fb      	ldrh	r3, [r7, #6]
 800c610:	461a      	mov	r2, r3
 800c612:	68b9      	ldr	r1, [r7, #8]
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 fa82 	bl	800cb1e <UART_Start_Receive_IT>
 800c61a:	4603      	mov	r3, r0
 800c61c:	e000      	b.n	800c620 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c61e:	2302      	movs	r3, #2
  }
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68da      	ldr	r2, [r3, #12]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c63e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	695a      	ldr	r2, [r3, #20]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f022 0201 	bic.w	r2, r2, #1
 800c64e:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c654:	2b01      	cmp	r3, #1
 800c656:	d107      	bne.n	800c668 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68da      	ldr	r2, [r3, #12]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f022 0210 	bic.w	r2, r2, #16
 800c666:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	d02d      	beq.n	800c6d2 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	695a      	ldr	r2, [r3, #20]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c684:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d013      	beq.n	800c6b6 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c692:	4a19      	ldr	r2, [pc, #100]	; (800c6f8 <HAL_UART_AbortReceive_IT+0xd0>)
 800c694:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7f9 fdd4 	bl	8006248 <HAL_DMA_Abort_IT>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d022      	beq.n	800c6ec <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c6b0:	4610      	mov	r0, r2
 800c6b2:	4798      	blx	r3
 800c6b4:	e01a      	b.n	800c6ec <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2220      	movs	r2, #32
 800c6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f9c9 	bl	800ca62 <HAL_UART_AbortReceiveCpltCallback>
 800c6d0:	e00c      	b.n	800c6ec <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2220      	movs	r2, #32
 800c6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f9bb 	bl	800ca62 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	0800cc11 	.word	0x0800cc11

0800c6fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08a      	sub	sp, #40	; 0x28
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800c71c:	2300      	movs	r3, #0
 800c71e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800c720:	2300      	movs	r3, #0
 800c722:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	f003 030f 	and.w	r3, r3, #15
 800c72a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10d      	bne.n	800c74e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c734:	f003 0320 	and.w	r3, r3, #32
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d008      	beq.n	800c74e <HAL_UART_IRQHandler+0x52>
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	f003 0320 	and.w	r3, r3, #32
 800c742:	2b00      	cmp	r3, #0
 800c744:	d003      	beq.n	800c74e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fae1 	bl	800cd0e <UART_Receive_IT>
      return;
 800c74c:	e17b      	b.n	800ca46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 80b1 	beq.w	800c8b8 <HAL_UART_IRQHandler+0x1bc>
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d105      	bne.n	800c76c <HAL_UART_IRQHandler+0x70>
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 80a6 	beq.w	800c8b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <HAL_UART_IRQHandler+0x90>
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c784:	f043 0201 	orr.w	r2, r3, #1
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	f003 0304 	and.w	r3, r3, #4
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00a      	beq.n	800c7ac <HAL_UART_IRQHandler+0xb0>
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d005      	beq.n	800c7ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a4:	f043 0202 	orr.w	r2, r3, #2
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ae:	f003 0302 	and.w	r3, r3, #2
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00a      	beq.n	800c7cc <HAL_UART_IRQHandler+0xd0>
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d005      	beq.n	800c7cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c4:	f043 0204 	orr.w	r2, r3, #4
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	f003 0308 	and.w	r3, r3, #8
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00f      	beq.n	800c7f6 <HAL_UART_IRQHandler+0xfa>
 800c7d6:	6a3b      	ldr	r3, [r7, #32]
 800c7d8:	f003 0320 	and.w	r3, r3, #32
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d104      	bne.n	800c7ea <HAL_UART_IRQHandler+0xee>
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d005      	beq.n	800c7f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ee:	f043 0208 	orr.w	r2, r3, #8
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 811e 	beq.w	800ca3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	f003 0320 	and.w	r3, r3, #32
 800c806:	2b00      	cmp	r3, #0
 800c808:	d007      	beq.n	800c81a <HAL_UART_IRQHandler+0x11e>
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	f003 0320 	and.w	r3, r3, #32
 800c810:	2b00      	cmp	r3, #0
 800c812:	d002      	beq.n	800c81a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fa7a 	bl	800cd0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c824:	2b00      	cmp	r3, #0
 800c826:	bf14      	ite	ne
 800c828:	2301      	movne	r3, #1
 800c82a:	2300      	moveq	r3, #0
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c834:	f003 0308 	and.w	r3, r3, #8
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d102      	bne.n	800c842 <HAL_UART_IRQHandler+0x146>
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d031      	beq.n	800c8a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f9a4 	bl	800cb90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c852:	2b00      	cmp	r3, #0
 800c854:	d023      	beq.n	800c89e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	695a      	ldr	r2, [r3, #20]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c864:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d013      	beq.n	800c896 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c872:	4a76      	ldr	r2, [pc, #472]	; (800ca4c <HAL_UART_IRQHandler+0x350>)
 800c874:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7f9 fce4 	bl	8006248 <HAL_DMA_Abort_IT>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d016      	beq.n	800c8b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c890:	4610      	mov	r0, r2
 800c892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c894:	e00e      	b.n	800c8b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f8da 	bl	800ca50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c89c:	e00a      	b.n	800c8b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f8d6 	bl	800ca50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8a4:	e006      	b.n	800c8b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f8d2 	bl	800ca50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c8b2:	e0c3      	b.n	800ca3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8b4:	bf00      	nop
    return;
 800c8b6:	e0c1      	b.n	800ca3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	f040 80a1 	bne.w	800ca04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c4:	f003 0310 	and.w	r3, r3, #16
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f000 809b 	beq.w	800ca04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	f003 0310 	and.w	r3, r3, #16
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 8095 	beq.w	800ca04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60fb      	str	r3, [r7, #12]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	60fb      	str	r3, [r7, #12]
 800c8ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	695b      	ldr	r3, [r3, #20]
 800c8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d04e      	beq.n	800c99c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800c908:	8a3b      	ldrh	r3, [r7, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 8098 	beq.w	800ca40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c914:	8a3a      	ldrh	r2, [r7, #16]
 800c916:	429a      	cmp	r2, r3
 800c918:	f080 8092 	bcs.w	800ca40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	8a3a      	ldrh	r2, [r7, #16]
 800c920:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	2b20      	cmp	r3, #32
 800c92a:	d02b      	beq.n	800c984 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68da      	ldr	r2, [r3, #12]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c93a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	695a      	ldr	r2, [r3, #20]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f022 0201 	bic.w	r2, r2, #1
 800c94a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	695a      	ldr	r2, [r3, #20]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c95a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2220      	movs	r2, #32
 800c960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68da      	ldr	r2, [r3, #12]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f022 0210 	bic.w	r2, r2, #16
 800c978:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97e:	4618      	mov	r0, r3
 800c980:	f7f9 fc28 	bl	80061d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	b29b      	uxth	r3, r3
 800c992:	4619      	mov	r1, r3
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 f86d 	bl	800ca74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800c99a:	e051      	b.n	800ca40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d047      	beq.n	800ca44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800c9b4:	8a7b      	ldrh	r3, [r7, #18]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d044      	beq.n	800ca44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68da      	ldr	r2, [r3, #12]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c9c8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	695a      	ldr	r2, [r3, #20]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f022 0201 	bic.w	r2, r2, #1
 800c9d8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2220      	movs	r2, #32
 800c9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68da      	ldr	r2, [r3, #12]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f022 0210 	bic.w	r2, r2, #16
 800c9f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9f8:	8a7b      	ldrh	r3, [r7, #18]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f839 	bl	800ca74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ca02:	e01f      	b.n	800ca44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d008      	beq.n	800ca20 <HAL_UART_IRQHandler+0x324>
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d003      	beq.n	800ca20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 f911 	bl	800cc40 <UART_Transmit_IT>
    return;
 800ca1e:	e012      	b.n	800ca46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00d      	beq.n	800ca46 <HAL_UART_IRQHandler+0x34a>
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d008      	beq.n	800ca46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f952 	bl	800ccde <UART_EndTransmit_IT>
    return;
 800ca3a:	e004      	b.n	800ca46 <HAL_UART_IRQHandler+0x34a>
    return;
 800ca3c:	bf00      	nop
 800ca3e:	e002      	b.n	800ca46 <HAL_UART_IRQHandler+0x34a>
      return;
 800ca40:	bf00      	nop
 800ca42:	e000      	b.n	800ca46 <HAL_UART_IRQHandler+0x34a>
      return;
 800ca44:	bf00      	nop
  }
}
 800ca46:	3728      	adds	r7, #40	; 0x28
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	0800cbe9 	.word	0x0800cbe9

0800ca50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bc80      	pop	{r7}
 800ca60:	4770      	bx	lr

0800ca62 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ca6a:	bf00      	nop
 800ca6c:	370c      	adds	r7, #12
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bc80      	pop	{r7}
 800ca72:	4770      	bx	lr

0800ca74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bc80      	pop	{r7}
 800ca88:	4770      	bx	lr

0800ca8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	603b      	str	r3, [r7, #0]
 800ca96:	4613      	mov	r3, r2
 800ca98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca9a:	e02c      	b.n	800caf6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa2:	d028      	beq.n	800caf6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d007      	beq.n	800caba <UART_WaitOnFlagUntilTimeout+0x30>
 800caaa:	f7f8 fd4b 	bl	8005544 <HAL_GetTick>
 800caae:	4602      	mov	r2, r0
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	69ba      	ldr	r2, [r7, #24]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d21d      	bcs.n	800caf6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cac8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	695a      	ldr	r2, [r3, #20]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f022 0201 	bic.w	r2, r2, #1
 800cad8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2220      	movs	r2, #32
 800cade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2220      	movs	r2, #32
 800cae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2200      	movs	r2, #0
 800caee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800caf2:	2303      	movs	r3, #3
 800caf4:	e00f      	b.n	800cb16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	4013      	ands	r3, r2
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	bf0c      	ite	eq
 800cb06:	2301      	moveq	r3, #1
 800cb08:	2300      	movne	r3, #0
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	79fb      	ldrb	r3, [r7, #7]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d0c3      	beq.n	800ca9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b085      	sub	sp, #20
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	60b9      	str	r1, [r7, #8]
 800cb28:	4613      	mov	r3, r2
 800cb2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	88fa      	ldrh	r2, [r7, #6]
 800cb36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	88fa      	ldrh	r2, [r7, #6]
 800cb3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2200      	movs	r2, #0
 800cb42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2222      	movs	r2, #34	; 0x22
 800cb48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68da      	ldr	r2, [r3, #12]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb62:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	695a      	ldr	r2, [r3, #20]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f042 0201 	orr.w	r2, r2, #1
 800cb72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68da      	ldr	r2, [r3, #12]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f042 0220 	orr.w	r2, r2, #32
 800cb82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bc80      	pop	{r7}
 800cb8e:	4770      	bx	lr

0800cb90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	68da      	ldr	r2, [r3, #12]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cba6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	695a      	ldr	r2, [r3, #20]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f022 0201 	bic.w	r2, r2, #1
 800cbb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d107      	bne.n	800cbd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f022 0210 	bic.w	r2, r2, #16
 800cbce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2220      	movs	r2, #32
 800cbd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cbde:	bf00      	nop
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bc80      	pop	{r7}
 800cbe6:	4770      	bx	lr

0800cbe8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff ff24 	bl	800ca50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc08:	bf00      	nop
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2220      	movs	r2, #32
 800cc28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f7ff ff15 	bl	800ca62 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc38:	bf00      	nop
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b21      	cmp	r3, #33	; 0x21
 800cc52:	d13e      	bne.n	800ccd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc5c:	d114      	bne.n	800cc88 <UART_Transmit_IT+0x48>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d110      	bne.n	800cc88 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	881b      	ldrh	r3, [r3, #0]
 800cc70:	461a      	mov	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6a1b      	ldr	r3, [r3, #32]
 800cc80:	1c9a      	adds	r2, r3, #2
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	621a      	str	r2, [r3, #32]
 800cc86:	e008      	b.n	800cc9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a1b      	ldr	r3, [r3, #32]
 800cc8c:	1c59      	adds	r1, r3, #1
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	6211      	str	r1, [r2, #32]
 800cc92:	781a      	ldrb	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	3b01      	subs	r3, #1
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	4619      	mov	r1, r3
 800cca8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10f      	bne.n	800ccce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	68da      	ldr	r2, [r3, #12]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ccbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	68da      	ldr	r2, [r3, #12]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cccc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e000      	b.n	800ccd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ccd2:	2302      	movs	r3, #2
  }
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3714      	adds	r7, #20
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bc80      	pop	{r7}
 800ccdc:	4770      	bx	lr

0800ccde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	68da      	ldr	r2, [r3, #12]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2220      	movs	r2, #32
 800ccfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f7f4 fd46 	bl	8001790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b086      	sub	sp, #24
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	2b22      	cmp	r3, #34	; 0x22
 800cd20:	f040 8099 	bne.w	800ce56 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd2c:	d117      	bne.n	800cd5e <UART_Receive_IT+0x50>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d113      	bne.n	800cd5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd56:	1c9a      	adds	r2, r3, #2
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	629a      	str	r2, [r3, #40]	; 0x28
 800cd5c:	e026      	b.n	800cdac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd62:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800cd64:	2300      	movs	r3, #0
 800cd66:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd70:	d007      	beq.n	800cd82 <UART_Receive_IT+0x74>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	689b      	ldr	r3, [r3, #8]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10a      	bne.n	800cd90 <UART_Receive_IT+0x82>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d106      	bne.n	800cd90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	701a      	strb	r2, [r3, #0]
 800cd8e:	e008      	b.n	800cda2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d148      	bne.n	800ce52 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	68da      	ldr	r2, [r3, #12]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f022 0220 	bic.w	r2, r2, #32
 800cdce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68da      	ldr	r2, [r3, #12]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cdde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	695a      	ldr	r2, [r3, #20]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f022 0201 	bic.w	r2, r2, #1
 800cdee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2220      	movs	r2, #32
 800cdf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d123      	bne.n	800ce48 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68da      	ldr	r2, [r3, #12]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f022 0210 	bic.w	r2, r2, #16
 800ce14:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0310 	and.w	r3, r3, #16
 800ce20:	2b10      	cmp	r3, #16
 800ce22:	d10a      	bne.n	800ce3a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff fe17 	bl	800ca74 <HAL_UARTEx_RxEventCallback>
 800ce46:	e002      	b.n	800ce4e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7f4 fcd3 	bl	80017f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	e002      	b.n	800ce58 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800ce52:	2300      	movs	r3, #0
 800ce54:	e000      	b.n	800ce58 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800ce56:	2302      	movs	r3, #2
  }
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3718      	adds	r7, #24
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	4a5f      	ldr	r2, [pc, #380]	; (800cfec <UART_SetConfig+0x18c>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d904      	bls.n	800ce7c <UART_SetConfig+0x1c>
 800ce72:	f640 6153 	movw	r1, #3667	; 0xe53
 800ce76:	485e      	ldr	r0, [pc, #376]	; (800cff0 <UART_SetConfig+0x190>)
 800ce78:	f7f7 fc90 	bl	800479c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d009      	beq.n	800ce98 <UART_SetConfig+0x38>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce8c:	d004      	beq.n	800ce98 <UART_SetConfig+0x38>
 800ce8e:	f640 6154 	movw	r1, #3668	; 0xe54
 800ce92:	4857      	ldr	r0, [pc, #348]	; (800cff0 <UART_SetConfig+0x190>)
 800ce94:	f7f7 fc82 	bl	800479c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	691b      	ldr	r3, [r3, #16]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00e      	beq.n	800cebe <UART_SetConfig+0x5e>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cea8:	d009      	beq.n	800cebe <UART_SetConfig+0x5e>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ceb2:	d004      	beq.n	800cebe <UART_SetConfig+0x5e>
 800ceb4:	f640 6155 	movw	r1, #3669	; 0xe55
 800ceb8:	484d      	ldr	r0, [pc, #308]	; (800cff0 <UART_SetConfig+0x190>)
 800ceba:	f7f7 fc6f 	bl	800479c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	695a      	ldr	r2, [r3, #20]
 800cec2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800cec6:	4013      	ands	r3, r2
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d103      	bne.n	800ced4 <UART_SetConfig+0x74>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	695b      	ldr	r3, [r3, #20]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d104      	bne.n	800cede <UART_SetConfig+0x7e>
 800ced4:	f640 6156 	movw	r1, #3670	; 0xe56
 800ced8:	4845      	ldr	r0, [pc, #276]	; (800cff0 <UART_SetConfig+0x190>)
 800ceda:	f7f7 fc5f 	bl	800479c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	430a      	orrs	r2, r1
 800cef2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	689a      	ldr	r2, [r3, #8]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	431a      	orrs	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	695b      	ldr	r3, [r3, #20]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cf10:	f023 030c 	bic.w	r3, r3, #12
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	6812      	ldr	r2, [r2, #0]
 800cf18:	68b9      	ldr	r1, [r7, #8]
 800cf1a:	430b      	orrs	r3, r1
 800cf1c:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	695b      	ldr	r3, [r3, #20]
 800cf24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	699a      	ldr	r2, [r3, #24]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	430a      	orrs	r2, r1
 800cf32:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a2e      	ldr	r2, [pc, #184]	; (800cff4 <UART_SetConfig+0x194>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d103      	bne.n	800cf46 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cf3e:	f7fd fa15 	bl	800a36c <HAL_RCC_GetPCLK2Freq>
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	e002      	b.n	800cf4c <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cf46:	f7fd f9fd 	bl	800a344 <HAL_RCC_GetPCLK1Freq>
 800cf4a:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4613      	mov	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	009a      	lsls	r2, r3, #2
 800cf56:	441a      	add	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf62:	4a25      	ldr	r2, [pc, #148]	; (800cff8 <UART_SetConfig+0x198>)
 800cf64:	fba2 2303 	umull	r2, r3, r2, r3
 800cf68:	095b      	lsrs	r3, r3, #5
 800cf6a:	0119      	lsls	r1, r3, #4
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	009a      	lsls	r2, r3, #2
 800cf76:	441a      	add	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	fbb2 f2f3 	udiv	r2, r2, r3
 800cf82:	4b1d      	ldr	r3, [pc, #116]	; (800cff8 <UART_SetConfig+0x198>)
 800cf84:	fba3 0302 	umull	r0, r3, r3, r2
 800cf88:	095b      	lsrs	r3, r3, #5
 800cf8a:	2064      	movs	r0, #100	; 0x64
 800cf8c:	fb00 f303 	mul.w	r3, r0, r3
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	011b      	lsls	r3, r3, #4
 800cf94:	3332      	adds	r3, #50	; 0x32
 800cf96:	4a18      	ldr	r2, [pc, #96]	; (800cff8 <UART_SetConfig+0x198>)
 800cf98:	fba2 2303 	umull	r2, r3, r2, r3
 800cf9c:	095b      	lsrs	r3, r3, #5
 800cf9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfa2:	4419      	add	r1, r3
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	009a      	lsls	r2, r3, #2
 800cfae:	441a      	add	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfba:	4b0f      	ldr	r3, [pc, #60]	; (800cff8 <UART_SetConfig+0x198>)
 800cfbc:	fba3 0302 	umull	r0, r3, r3, r2
 800cfc0:	095b      	lsrs	r3, r3, #5
 800cfc2:	2064      	movs	r0, #100	; 0x64
 800cfc4:	fb00 f303 	mul.w	r3, r0, r3
 800cfc8:	1ad3      	subs	r3, r2, r3
 800cfca:	011b      	lsls	r3, r3, #4
 800cfcc:	3332      	adds	r3, #50	; 0x32
 800cfce:	4a0a      	ldr	r2, [pc, #40]	; (800cff8 <UART_SetConfig+0x198>)
 800cfd0:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd4:	095b      	lsrs	r3, r3, #5
 800cfd6:	f003 020f 	and.w	r2, r3, #15
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	440a      	add	r2, r1
 800cfe0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cfe2:	bf00      	nop
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	0044aa20 	.word	0x0044aa20
 800cff0:	080110d4 	.word	0x080110d4
 800cff4:	40013800 	.word	0x40013800
 800cff8:	51eb851f 	.word	0x51eb851f

0800cffc <calloc>:
 800cffc:	4b02      	ldr	r3, [pc, #8]	; (800d008 <calloc+0xc>)
 800cffe:	460a      	mov	r2, r1
 800d000:	4601      	mov	r1, r0
 800d002:	6818      	ldr	r0, [r3, #0]
 800d004:	f000 b86c 	b.w	800d0e0 <_calloc_r>
 800d008:	20000030 	.word	0x20000030

0800d00c <__errno>:
 800d00c:	4b01      	ldr	r3, [pc, #4]	; (800d014 <__errno+0x8>)
 800d00e:	6818      	ldr	r0, [r3, #0]
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	20000030 	.word	0x20000030

0800d018 <__libc_init_array>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	2600      	movs	r6, #0
 800d01c:	4d0c      	ldr	r5, [pc, #48]	; (800d050 <__libc_init_array+0x38>)
 800d01e:	4c0d      	ldr	r4, [pc, #52]	; (800d054 <__libc_init_array+0x3c>)
 800d020:	1b64      	subs	r4, r4, r5
 800d022:	10a4      	asrs	r4, r4, #2
 800d024:	42a6      	cmp	r6, r4
 800d026:	d109      	bne.n	800d03c <__libc_init_array+0x24>
 800d028:	f003 fef0 	bl	8010e0c <_init>
 800d02c:	2600      	movs	r6, #0
 800d02e:	4d0a      	ldr	r5, [pc, #40]	; (800d058 <__libc_init_array+0x40>)
 800d030:	4c0a      	ldr	r4, [pc, #40]	; (800d05c <__libc_init_array+0x44>)
 800d032:	1b64      	subs	r4, r4, r5
 800d034:	10a4      	asrs	r4, r4, #2
 800d036:	42a6      	cmp	r6, r4
 800d038:	d105      	bne.n	800d046 <__libc_init_array+0x2e>
 800d03a:	bd70      	pop	{r4, r5, r6, pc}
 800d03c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d040:	4798      	blx	r3
 800d042:	3601      	adds	r6, #1
 800d044:	e7ee      	b.n	800d024 <__libc_init_array+0xc>
 800d046:	f855 3b04 	ldr.w	r3, [r5], #4
 800d04a:	4798      	blx	r3
 800d04c:	3601      	adds	r6, #1
 800d04e:	e7f2      	b.n	800d036 <__libc_init_array+0x1e>
 800d050:	08012a2c 	.word	0x08012a2c
 800d054:	08012a2c 	.word	0x08012a2c
 800d058:	08012a2c 	.word	0x08012a2c
 800d05c:	08012a30 	.word	0x08012a30

0800d060 <malloc>:
 800d060:	4b02      	ldr	r3, [pc, #8]	; (800d06c <malloc+0xc>)
 800d062:	4601      	mov	r1, r0
 800d064:	6818      	ldr	r0, [r3, #0]
 800d066:	f000 b8b7 	b.w	800d1d8 <_malloc_r>
 800d06a:	bf00      	nop
 800d06c:	20000030 	.word	0x20000030

0800d070 <free>:
 800d070:	4b02      	ldr	r3, [pc, #8]	; (800d07c <free+0xc>)
 800d072:	4601      	mov	r1, r0
 800d074:	6818      	ldr	r0, [r3, #0]
 800d076:	f000 b847 	b.w	800d108 <_free_r>
 800d07a:	bf00      	nop
 800d07c:	20000030 	.word	0x20000030

0800d080 <memcpy>:
 800d080:	440a      	add	r2, r1
 800d082:	4291      	cmp	r1, r2
 800d084:	f100 33ff 	add.w	r3, r0, #4294967295
 800d088:	d100      	bne.n	800d08c <memcpy+0xc>
 800d08a:	4770      	bx	lr
 800d08c:	b510      	push	{r4, lr}
 800d08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d092:	4291      	cmp	r1, r2
 800d094:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d098:	d1f9      	bne.n	800d08e <memcpy+0xe>
 800d09a:	bd10      	pop	{r4, pc}

0800d09c <memmove>:
 800d09c:	4288      	cmp	r0, r1
 800d09e:	b510      	push	{r4, lr}
 800d0a0:	eb01 0402 	add.w	r4, r1, r2
 800d0a4:	d902      	bls.n	800d0ac <memmove+0x10>
 800d0a6:	4284      	cmp	r4, r0
 800d0a8:	4623      	mov	r3, r4
 800d0aa:	d807      	bhi.n	800d0bc <memmove+0x20>
 800d0ac:	1e43      	subs	r3, r0, #1
 800d0ae:	42a1      	cmp	r1, r4
 800d0b0:	d008      	beq.n	800d0c4 <memmove+0x28>
 800d0b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0ba:	e7f8      	b.n	800d0ae <memmove+0x12>
 800d0bc:	4601      	mov	r1, r0
 800d0be:	4402      	add	r2, r0
 800d0c0:	428a      	cmp	r2, r1
 800d0c2:	d100      	bne.n	800d0c6 <memmove+0x2a>
 800d0c4:	bd10      	pop	{r4, pc}
 800d0c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0ce:	e7f7      	b.n	800d0c0 <memmove+0x24>

0800d0d0 <memset>:
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	4402      	add	r2, r0
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d100      	bne.n	800d0da <memset+0xa>
 800d0d8:	4770      	bx	lr
 800d0da:	f803 1b01 	strb.w	r1, [r3], #1
 800d0de:	e7f9      	b.n	800d0d4 <memset+0x4>

0800d0e0 <_calloc_r>:
 800d0e0:	b570      	push	{r4, r5, r6, lr}
 800d0e2:	fba1 5402 	umull	r5, r4, r1, r2
 800d0e6:	b934      	cbnz	r4, 800d0f6 <_calloc_r+0x16>
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	f000 f875 	bl	800d1d8 <_malloc_r>
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	b928      	cbnz	r0, 800d0fe <_calloc_r+0x1e>
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	bd70      	pop	{r4, r5, r6, pc}
 800d0f6:	220c      	movs	r2, #12
 800d0f8:	2600      	movs	r6, #0
 800d0fa:	6002      	str	r2, [r0, #0]
 800d0fc:	e7f9      	b.n	800d0f2 <_calloc_r+0x12>
 800d0fe:	462a      	mov	r2, r5
 800d100:	4621      	mov	r1, r4
 800d102:	f7ff ffe5 	bl	800d0d0 <memset>
 800d106:	e7f4      	b.n	800d0f2 <_calloc_r+0x12>

0800d108 <_free_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4605      	mov	r5, r0
 800d10c:	2900      	cmp	r1, #0
 800d10e:	d040      	beq.n	800d192 <_free_r+0x8a>
 800d110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d114:	1f0c      	subs	r4, r1, #4
 800d116:	2b00      	cmp	r3, #0
 800d118:	bfb8      	it	lt
 800d11a:	18e4      	addlt	r4, r4, r3
 800d11c:	f001 ff58 	bl	800efd0 <__malloc_lock>
 800d120:	4a1c      	ldr	r2, [pc, #112]	; (800d194 <_free_r+0x8c>)
 800d122:	6813      	ldr	r3, [r2, #0]
 800d124:	b933      	cbnz	r3, 800d134 <_free_r+0x2c>
 800d126:	6063      	str	r3, [r4, #4]
 800d128:	6014      	str	r4, [r2, #0]
 800d12a:	4628      	mov	r0, r5
 800d12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d130:	f001 bf54 	b.w	800efdc <__malloc_unlock>
 800d134:	42a3      	cmp	r3, r4
 800d136:	d908      	bls.n	800d14a <_free_r+0x42>
 800d138:	6820      	ldr	r0, [r4, #0]
 800d13a:	1821      	adds	r1, r4, r0
 800d13c:	428b      	cmp	r3, r1
 800d13e:	bf01      	itttt	eq
 800d140:	6819      	ldreq	r1, [r3, #0]
 800d142:	685b      	ldreq	r3, [r3, #4]
 800d144:	1809      	addeq	r1, r1, r0
 800d146:	6021      	streq	r1, [r4, #0]
 800d148:	e7ed      	b.n	800d126 <_free_r+0x1e>
 800d14a:	461a      	mov	r2, r3
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	b10b      	cbz	r3, 800d154 <_free_r+0x4c>
 800d150:	42a3      	cmp	r3, r4
 800d152:	d9fa      	bls.n	800d14a <_free_r+0x42>
 800d154:	6811      	ldr	r1, [r2, #0]
 800d156:	1850      	adds	r0, r2, r1
 800d158:	42a0      	cmp	r0, r4
 800d15a:	d10b      	bne.n	800d174 <_free_r+0x6c>
 800d15c:	6820      	ldr	r0, [r4, #0]
 800d15e:	4401      	add	r1, r0
 800d160:	1850      	adds	r0, r2, r1
 800d162:	4283      	cmp	r3, r0
 800d164:	6011      	str	r1, [r2, #0]
 800d166:	d1e0      	bne.n	800d12a <_free_r+0x22>
 800d168:	6818      	ldr	r0, [r3, #0]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	4401      	add	r1, r0
 800d16e:	6011      	str	r1, [r2, #0]
 800d170:	6053      	str	r3, [r2, #4]
 800d172:	e7da      	b.n	800d12a <_free_r+0x22>
 800d174:	d902      	bls.n	800d17c <_free_r+0x74>
 800d176:	230c      	movs	r3, #12
 800d178:	602b      	str	r3, [r5, #0]
 800d17a:	e7d6      	b.n	800d12a <_free_r+0x22>
 800d17c:	6820      	ldr	r0, [r4, #0]
 800d17e:	1821      	adds	r1, r4, r0
 800d180:	428b      	cmp	r3, r1
 800d182:	bf01      	itttt	eq
 800d184:	6819      	ldreq	r1, [r3, #0]
 800d186:	685b      	ldreq	r3, [r3, #4]
 800d188:	1809      	addeq	r1, r1, r0
 800d18a:	6021      	streq	r1, [r4, #0]
 800d18c:	6063      	str	r3, [r4, #4]
 800d18e:	6054      	str	r4, [r2, #4]
 800d190:	e7cb      	b.n	800d12a <_free_r+0x22>
 800d192:	bd38      	pop	{r3, r4, r5, pc}
 800d194:	200010c4 	.word	0x200010c4

0800d198 <sbrk_aligned>:
 800d198:	b570      	push	{r4, r5, r6, lr}
 800d19a:	4e0e      	ldr	r6, [pc, #56]	; (800d1d4 <sbrk_aligned+0x3c>)
 800d19c:	460c      	mov	r4, r1
 800d19e:	6831      	ldr	r1, [r6, #0]
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	b911      	cbnz	r1, 800d1aa <sbrk_aligned+0x12>
 800d1a4:	f000 fd7a 	bl	800dc9c <_sbrk_r>
 800d1a8:	6030      	str	r0, [r6, #0]
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f000 fd75 	bl	800dc9c <_sbrk_r>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	d00a      	beq.n	800d1cc <sbrk_aligned+0x34>
 800d1b6:	1cc4      	adds	r4, r0, #3
 800d1b8:	f024 0403 	bic.w	r4, r4, #3
 800d1bc:	42a0      	cmp	r0, r4
 800d1be:	d007      	beq.n	800d1d0 <sbrk_aligned+0x38>
 800d1c0:	1a21      	subs	r1, r4, r0
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f000 fd6a 	bl	800dc9c <_sbrk_r>
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	d101      	bne.n	800d1d0 <sbrk_aligned+0x38>
 800d1cc:	f04f 34ff 	mov.w	r4, #4294967295
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	bd70      	pop	{r4, r5, r6, pc}
 800d1d4:	200010c8 	.word	0x200010c8

0800d1d8 <_malloc_r>:
 800d1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	1ccd      	adds	r5, r1, #3
 800d1de:	f025 0503 	bic.w	r5, r5, #3
 800d1e2:	3508      	adds	r5, #8
 800d1e4:	2d0c      	cmp	r5, #12
 800d1e6:	bf38      	it	cc
 800d1e8:	250c      	movcc	r5, #12
 800d1ea:	2d00      	cmp	r5, #0
 800d1ec:	4607      	mov	r7, r0
 800d1ee:	db01      	blt.n	800d1f4 <_malloc_r+0x1c>
 800d1f0:	42a9      	cmp	r1, r5
 800d1f2:	d905      	bls.n	800d200 <_malloc_r+0x28>
 800d1f4:	230c      	movs	r3, #12
 800d1f6:	2600      	movs	r6, #0
 800d1f8:	603b      	str	r3, [r7, #0]
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d200:	4e2e      	ldr	r6, [pc, #184]	; (800d2bc <_malloc_r+0xe4>)
 800d202:	f001 fee5 	bl	800efd0 <__malloc_lock>
 800d206:	6833      	ldr	r3, [r6, #0]
 800d208:	461c      	mov	r4, r3
 800d20a:	bb34      	cbnz	r4, 800d25a <_malloc_r+0x82>
 800d20c:	4629      	mov	r1, r5
 800d20e:	4638      	mov	r0, r7
 800d210:	f7ff ffc2 	bl	800d198 <sbrk_aligned>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	4604      	mov	r4, r0
 800d218:	d14d      	bne.n	800d2b6 <_malloc_r+0xde>
 800d21a:	6834      	ldr	r4, [r6, #0]
 800d21c:	4626      	mov	r6, r4
 800d21e:	2e00      	cmp	r6, #0
 800d220:	d140      	bne.n	800d2a4 <_malloc_r+0xcc>
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	4631      	mov	r1, r6
 800d226:	4638      	mov	r0, r7
 800d228:	eb04 0803 	add.w	r8, r4, r3
 800d22c:	f000 fd36 	bl	800dc9c <_sbrk_r>
 800d230:	4580      	cmp	r8, r0
 800d232:	d13a      	bne.n	800d2aa <_malloc_r+0xd2>
 800d234:	6821      	ldr	r1, [r4, #0]
 800d236:	3503      	adds	r5, #3
 800d238:	1a6d      	subs	r5, r5, r1
 800d23a:	f025 0503 	bic.w	r5, r5, #3
 800d23e:	3508      	adds	r5, #8
 800d240:	2d0c      	cmp	r5, #12
 800d242:	bf38      	it	cc
 800d244:	250c      	movcc	r5, #12
 800d246:	4638      	mov	r0, r7
 800d248:	4629      	mov	r1, r5
 800d24a:	f7ff ffa5 	bl	800d198 <sbrk_aligned>
 800d24e:	3001      	adds	r0, #1
 800d250:	d02b      	beq.n	800d2aa <_malloc_r+0xd2>
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	442b      	add	r3, r5
 800d256:	6023      	str	r3, [r4, #0]
 800d258:	e00e      	b.n	800d278 <_malloc_r+0xa0>
 800d25a:	6822      	ldr	r2, [r4, #0]
 800d25c:	1b52      	subs	r2, r2, r5
 800d25e:	d41e      	bmi.n	800d29e <_malloc_r+0xc6>
 800d260:	2a0b      	cmp	r2, #11
 800d262:	d916      	bls.n	800d292 <_malloc_r+0xba>
 800d264:	1961      	adds	r1, r4, r5
 800d266:	42a3      	cmp	r3, r4
 800d268:	6025      	str	r5, [r4, #0]
 800d26a:	bf18      	it	ne
 800d26c:	6059      	strne	r1, [r3, #4]
 800d26e:	6863      	ldr	r3, [r4, #4]
 800d270:	bf08      	it	eq
 800d272:	6031      	streq	r1, [r6, #0]
 800d274:	5162      	str	r2, [r4, r5]
 800d276:	604b      	str	r3, [r1, #4]
 800d278:	4638      	mov	r0, r7
 800d27a:	f104 060b 	add.w	r6, r4, #11
 800d27e:	f001 fead 	bl	800efdc <__malloc_unlock>
 800d282:	f026 0607 	bic.w	r6, r6, #7
 800d286:	1d23      	adds	r3, r4, #4
 800d288:	1af2      	subs	r2, r6, r3
 800d28a:	d0b6      	beq.n	800d1fa <_malloc_r+0x22>
 800d28c:	1b9b      	subs	r3, r3, r6
 800d28e:	50a3      	str	r3, [r4, r2]
 800d290:	e7b3      	b.n	800d1fa <_malloc_r+0x22>
 800d292:	6862      	ldr	r2, [r4, #4]
 800d294:	42a3      	cmp	r3, r4
 800d296:	bf0c      	ite	eq
 800d298:	6032      	streq	r2, [r6, #0]
 800d29a:	605a      	strne	r2, [r3, #4]
 800d29c:	e7ec      	b.n	800d278 <_malloc_r+0xa0>
 800d29e:	4623      	mov	r3, r4
 800d2a0:	6864      	ldr	r4, [r4, #4]
 800d2a2:	e7b2      	b.n	800d20a <_malloc_r+0x32>
 800d2a4:	4634      	mov	r4, r6
 800d2a6:	6876      	ldr	r6, [r6, #4]
 800d2a8:	e7b9      	b.n	800d21e <_malloc_r+0x46>
 800d2aa:	230c      	movs	r3, #12
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	603b      	str	r3, [r7, #0]
 800d2b0:	f001 fe94 	bl	800efdc <__malloc_unlock>
 800d2b4:	e7a1      	b.n	800d1fa <_malloc_r+0x22>
 800d2b6:	6025      	str	r5, [r4, #0]
 800d2b8:	e7de      	b.n	800d278 <_malloc_r+0xa0>
 800d2ba:	bf00      	nop
 800d2bc:	200010c4 	.word	0x200010c4

0800d2c0 <__cvt>:
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2c6:	461f      	mov	r7, r3
 800d2c8:	bfbb      	ittet	lt
 800d2ca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d2ce:	461f      	movlt	r7, r3
 800d2d0:	2300      	movge	r3, #0
 800d2d2:	232d      	movlt	r3, #45	; 0x2d
 800d2d4:	b088      	sub	sp, #32
 800d2d6:	4614      	mov	r4, r2
 800d2d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d2dc:	7013      	strb	r3, [r2, #0]
 800d2de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d2e4:	f023 0820 	bic.w	r8, r3, #32
 800d2e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d2ec:	d005      	beq.n	800d2fa <__cvt+0x3a>
 800d2ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d2f2:	d100      	bne.n	800d2f6 <__cvt+0x36>
 800d2f4:	3501      	adds	r5, #1
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	e000      	b.n	800d2fc <__cvt+0x3c>
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	aa07      	add	r2, sp, #28
 800d2fe:	9204      	str	r2, [sp, #16]
 800d300:	aa06      	add	r2, sp, #24
 800d302:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d306:	e9cd 3500 	strd	r3, r5, [sp]
 800d30a:	4622      	mov	r2, r4
 800d30c:	463b      	mov	r3, r7
 800d30e:	f000 fe43 	bl	800df98 <_dtoa_r>
 800d312:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d316:	4606      	mov	r6, r0
 800d318:	d102      	bne.n	800d320 <__cvt+0x60>
 800d31a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d31c:	07db      	lsls	r3, r3, #31
 800d31e:	d522      	bpl.n	800d366 <__cvt+0xa6>
 800d320:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d324:	eb06 0905 	add.w	r9, r6, r5
 800d328:	d110      	bne.n	800d34c <__cvt+0x8c>
 800d32a:	7833      	ldrb	r3, [r6, #0]
 800d32c:	2b30      	cmp	r3, #48	; 0x30
 800d32e:	d10a      	bne.n	800d346 <__cvt+0x86>
 800d330:	2200      	movs	r2, #0
 800d332:	2300      	movs	r3, #0
 800d334:	4620      	mov	r0, r4
 800d336:	4639      	mov	r1, r7
 800d338:	f7f3 fb36 	bl	80009a8 <__aeabi_dcmpeq>
 800d33c:	b918      	cbnz	r0, 800d346 <__cvt+0x86>
 800d33e:	f1c5 0501 	rsb	r5, r5, #1
 800d342:	f8ca 5000 	str.w	r5, [sl]
 800d346:	f8da 3000 	ldr.w	r3, [sl]
 800d34a:	4499      	add	r9, r3
 800d34c:	2200      	movs	r2, #0
 800d34e:	2300      	movs	r3, #0
 800d350:	4620      	mov	r0, r4
 800d352:	4639      	mov	r1, r7
 800d354:	f7f3 fb28 	bl	80009a8 <__aeabi_dcmpeq>
 800d358:	b108      	cbz	r0, 800d35e <__cvt+0x9e>
 800d35a:	f8cd 901c 	str.w	r9, [sp, #28]
 800d35e:	2230      	movs	r2, #48	; 0x30
 800d360:	9b07      	ldr	r3, [sp, #28]
 800d362:	454b      	cmp	r3, r9
 800d364:	d307      	bcc.n	800d376 <__cvt+0xb6>
 800d366:	4630      	mov	r0, r6
 800d368:	9b07      	ldr	r3, [sp, #28]
 800d36a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d36c:	1b9b      	subs	r3, r3, r6
 800d36e:	6013      	str	r3, [r2, #0]
 800d370:	b008      	add	sp, #32
 800d372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d376:	1c59      	adds	r1, r3, #1
 800d378:	9107      	str	r1, [sp, #28]
 800d37a:	701a      	strb	r2, [r3, #0]
 800d37c:	e7f0      	b.n	800d360 <__cvt+0xa0>

0800d37e <__exponent>:
 800d37e:	4603      	mov	r3, r0
 800d380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d382:	2900      	cmp	r1, #0
 800d384:	f803 2b02 	strb.w	r2, [r3], #2
 800d388:	bfb6      	itet	lt
 800d38a:	222d      	movlt	r2, #45	; 0x2d
 800d38c:	222b      	movge	r2, #43	; 0x2b
 800d38e:	4249      	neglt	r1, r1
 800d390:	2909      	cmp	r1, #9
 800d392:	7042      	strb	r2, [r0, #1]
 800d394:	dd2b      	ble.n	800d3ee <__exponent+0x70>
 800d396:	f10d 0407 	add.w	r4, sp, #7
 800d39a:	46a4      	mov	ip, r4
 800d39c:	270a      	movs	r7, #10
 800d39e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d3a2:	460a      	mov	r2, r1
 800d3a4:	46a6      	mov	lr, r4
 800d3a6:	fb07 1516 	mls	r5, r7, r6, r1
 800d3aa:	2a63      	cmp	r2, #99	; 0x63
 800d3ac:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d3b0:	4631      	mov	r1, r6
 800d3b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d3b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d3ba:	dcf0      	bgt.n	800d39e <__exponent+0x20>
 800d3bc:	3130      	adds	r1, #48	; 0x30
 800d3be:	f1ae 0502 	sub.w	r5, lr, #2
 800d3c2:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	1c44      	adds	r4, r0, #1
 800d3ca:	4561      	cmp	r1, ip
 800d3cc:	d30a      	bcc.n	800d3e4 <__exponent+0x66>
 800d3ce:	f10d 0209 	add.w	r2, sp, #9
 800d3d2:	eba2 020e 	sub.w	r2, r2, lr
 800d3d6:	4565      	cmp	r5, ip
 800d3d8:	bf88      	it	hi
 800d3da:	2200      	movhi	r2, #0
 800d3dc:	4413      	add	r3, r2
 800d3de:	1a18      	subs	r0, r3, r0
 800d3e0:	b003      	add	sp, #12
 800d3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3e8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d3ec:	e7ed      	b.n	800d3ca <__exponent+0x4c>
 800d3ee:	2330      	movs	r3, #48	; 0x30
 800d3f0:	3130      	adds	r1, #48	; 0x30
 800d3f2:	7083      	strb	r3, [r0, #2]
 800d3f4:	70c1      	strb	r1, [r0, #3]
 800d3f6:	1d03      	adds	r3, r0, #4
 800d3f8:	e7f1      	b.n	800d3de <__exponent+0x60>
	...

0800d3fc <_printf_float>:
 800d3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d400:	b091      	sub	sp, #68	; 0x44
 800d402:	460c      	mov	r4, r1
 800d404:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d408:	4616      	mov	r6, r2
 800d40a:	461f      	mov	r7, r3
 800d40c:	4605      	mov	r5, r0
 800d40e:	f001 fd65 	bl	800eedc <_localeconv_r>
 800d412:	6803      	ldr	r3, [r0, #0]
 800d414:	4618      	mov	r0, r3
 800d416:	9309      	str	r3, [sp, #36]	; 0x24
 800d418:	f7f2 fe9a 	bl	8000150 <strlen>
 800d41c:	2300      	movs	r3, #0
 800d41e:	930e      	str	r3, [sp, #56]	; 0x38
 800d420:	f8d8 3000 	ldr.w	r3, [r8]
 800d424:	900a      	str	r0, [sp, #40]	; 0x28
 800d426:	3307      	adds	r3, #7
 800d428:	f023 0307 	bic.w	r3, r3, #7
 800d42c:	f103 0208 	add.w	r2, r3, #8
 800d430:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d434:	f8d4 b000 	ldr.w	fp, [r4]
 800d438:	f8c8 2000 	str.w	r2, [r8]
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d444:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d448:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d44c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d44e:	f04f 32ff 	mov.w	r2, #4294967295
 800d452:	4640      	mov	r0, r8
 800d454:	4b9c      	ldr	r3, [pc, #624]	; (800d6c8 <_printf_float+0x2cc>)
 800d456:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d458:	f7f3 fad8 	bl	8000a0c <__aeabi_dcmpun>
 800d45c:	bb70      	cbnz	r0, 800d4bc <_printf_float+0xc0>
 800d45e:	f04f 32ff 	mov.w	r2, #4294967295
 800d462:	4640      	mov	r0, r8
 800d464:	4b98      	ldr	r3, [pc, #608]	; (800d6c8 <_printf_float+0x2cc>)
 800d466:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d468:	f7f3 fab2 	bl	80009d0 <__aeabi_dcmple>
 800d46c:	bb30      	cbnz	r0, 800d4bc <_printf_float+0xc0>
 800d46e:	2200      	movs	r2, #0
 800d470:	2300      	movs	r3, #0
 800d472:	4640      	mov	r0, r8
 800d474:	4651      	mov	r1, sl
 800d476:	f7f3 faa1 	bl	80009bc <__aeabi_dcmplt>
 800d47a:	b110      	cbz	r0, 800d482 <_printf_float+0x86>
 800d47c:	232d      	movs	r3, #45	; 0x2d
 800d47e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d482:	4b92      	ldr	r3, [pc, #584]	; (800d6cc <_printf_float+0x2d0>)
 800d484:	4892      	ldr	r0, [pc, #584]	; (800d6d0 <_printf_float+0x2d4>)
 800d486:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d48a:	bf94      	ite	ls
 800d48c:	4698      	movls	r8, r3
 800d48e:	4680      	movhi	r8, r0
 800d490:	2303      	movs	r3, #3
 800d492:	f04f 0a00 	mov.w	sl, #0
 800d496:	6123      	str	r3, [r4, #16]
 800d498:	f02b 0304 	bic.w	r3, fp, #4
 800d49c:	6023      	str	r3, [r4, #0]
 800d49e:	4633      	mov	r3, r6
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	9700      	str	r7, [sp, #0]
 800d4a6:	aa0f      	add	r2, sp, #60	; 0x3c
 800d4a8:	f000 f9d4 	bl	800d854 <_printf_common>
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	f040 8090 	bne.w	800d5d2 <_printf_float+0x1d6>
 800d4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b6:	b011      	add	sp, #68	; 0x44
 800d4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4bc:	4642      	mov	r2, r8
 800d4be:	4653      	mov	r3, sl
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	4651      	mov	r1, sl
 800d4c4:	f7f3 faa2 	bl	8000a0c <__aeabi_dcmpun>
 800d4c8:	b148      	cbz	r0, 800d4de <_printf_float+0xe2>
 800d4ca:	f1ba 0f00 	cmp.w	sl, #0
 800d4ce:	bfb8      	it	lt
 800d4d0:	232d      	movlt	r3, #45	; 0x2d
 800d4d2:	4880      	ldr	r0, [pc, #512]	; (800d6d4 <_printf_float+0x2d8>)
 800d4d4:	bfb8      	it	lt
 800d4d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d4da:	4b7f      	ldr	r3, [pc, #508]	; (800d6d8 <_printf_float+0x2dc>)
 800d4dc:	e7d3      	b.n	800d486 <_printf_float+0x8a>
 800d4de:	6863      	ldr	r3, [r4, #4]
 800d4e0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d4e4:	1c5a      	adds	r2, r3, #1
 800d4e6:	d142      	bne.n	800d56e <_printf_float+0x172>
 800d4e8:	2306      	movs	r3, #6
 800d4ea:	6063      	str	r3, [r4, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	9206      	str	r2, [sp, #24]
 800d4f0:	aa0e      	add	r2, sp, #56	; 0x38
 800d4f2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d4f6:	aa0d      	add	r2, sp, #52	; 0x34
 800d4f8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d4fc:	9203      	str	r2, [sp, #12]
 800d4fe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d502:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d506:	6023      	str	r3, [r4, #0]
 800d508:	6863      	ldr	r3, [r4, #4]
 800d50a:	4642      	mov	r2, r8
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	4628      	mov	r0, r5
 800d510:	4653      	mov	r3, sl
 800d512:	910b      	str	r1, [sp, #44]	; 0x2c
 800d514:	f7ff fed4 	bl	800d2c0 <__cvt>
 800d518:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d51a:	4680      	mov	r8, r0
 800d51c:	2947      	cmp	r1, #71	; 0x47
 800d51e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d520:	d108      	bne.n	800d534 <_printf_float+0x138>
 800d522:	1cc8      	adds	r0, r1, #3
 800d524:	db02      	blt.n	800d52c <_printf_float+0x130>
 800d526:	6863      	ldr	r3, [r4, #4]
 800d528:	4299      	cmp	r1, r3
 800d52a:	dd40      	ble.n	800d5ae <_printf_float+0x1b2>
 800d52c:	f1a9 0902 	sub.w	r9, r9, #2
 800d530:	fa5f f989 	uxtb.w	r9, r9
 800d534:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d538:	d81f      	bhi.n	800d57a <_printf_float+0x17e>
 800d53a:	464a      	mov	r2, r9
 800d53c:	3901      	subs	r1, #1
 800d53e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d542:	910d      	str	r1, [sp, #52]	; 0x34
 800d544:	f7ff ff1b 	bl	800d37e <__exponent>
 800d548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d54a:	4682      	mov	sl, r0
 800d54c:	1813      	adds	r3, r2, r0
 800d54e:	2a01      	cmp	r2, #1
 800d550:	6123      	str	r3, [r4, #16]
 800d552:	dc02      	bgt.n	800d55a <_printf_float+0x15e>
 800d554:	6822      	ldr	r2, [r4, #0]
 800d556:	07d2      	lsls	r2, r2, #31
 800d558:	d501      	bpl.n	800d55e <_printf_float+0x162>
 800d55a:	3301      	adds	r3, #1
 800d55c:	6123      	str	r3, [r4, #16]
 800d55e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d562:	2b00      	cmp	r3, #0
 800d564:	d09b      	beq.n	800d49e <_printf_float+0xa2>
 800d566:	232d      	movs	r3, #45	; 0x2d
 800d568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d56c:	e797      	b.n	800d49e <_printf_float+0xa2>
 800d56e:	2947      	cmp	r1, #71	; 0x47
 800d570:	d1bc      	bne.n	800d4ec <_printf_float+0xf0>
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1ba      	bne.n	800d4ec <_printf_float+0xf0>
 800d576:	2301      	movs	r3, #1
 800d578:	e7b7      	b.n	800d4ea <_printf_float+0xee>
 800d57a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d57e:	d118      	bne.n	800d5b2 <_printf_float+0x1b6>
 800d580:	2900      	cmp	r1, #0
 800d582:	6863      	ldr	r3, [r4, #4]
 800d584:	dd0b      	ble.n	800d59e <_printf_float+0x1a2>
 800d586:	6121      	str	r1, [r4, #16]
 800d588:	b913      	cbnz	r3, 800d590 <_printf_float+0x194>
 800d58a:	6822      	ldr	r2, [r4, #0]
 800d58c:	07d0      	lsls	r0, r2, #31
 800d58e:	d502      	bpl.n	800d596 <_printf_float+0x19a>
 800d590:	3301      	adds	r3, #1
 800d592:	440b      	add	r3, r1
 800d594:	6123      	str	r3, [r4, #16]
 800d596:	f04f 0a00 	mov.w	sl, #0
 800d59a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d59c:	e7df      	b.n	800d55e <_printf_float+0x162>
 800d59e:	b913      	cbnz	r3, 800d5a6 <_printf_float+0x1aa>
 800d5a0:	6822      	ldr	r2, [r4, #0]
 800d5a2:	07d2      	lsls	r2, r2, #31
 800d5a4:	d501      	bpl.n	800d5aa <_printf_float+0x1ae>
 800d5a6:	3302      	adds	r3, #2
 800d5a8:	e7f4      	b.n	800d594 <_printf_float+0x198>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e7f2      	b.n	800d594 <_printf_float+0x198>
 800d5ae:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d5b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5b4:	4299      	cmp	r1, r3
 800d5b6:	db05      	blt.n	800d5c4 <_printf_float+0x1c8>
 800d5b8:	6823      	ldr	r3, [r4, #0]
 800d5ba:	6121      	str	r1, [r4, #16]
 800d5bc:	07d8      	lsls	r0, r3, #31
 800d5be:	d5ea      	bpl.n	800d596 <_printf_float+0x19a>
 800d5c0:	1c4b      	adds	r3, r1, #1
 800d5c2:	e7e7      	b.n	800d594 <_printf_float+0x198>
 800d5c4:	2900      	cmp	r1, #0
 800d5c6:	bfcc      	ite	gt
 800d5c8:	2201      	movgt	r2, #1
 800d5ca:	f1c1 0202 	rsble	r2, r1, #2
 800d5ce:	4413      	add	r3, r2
 800d5d0:	e7e0      	b.n	800d594 <_printf_float+0x198>
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	055a      	lsls	r2, r3, #21
 800d5d6:	d407      	bmi.n	800d5e8 <_printf_float+0x1ec>
 800d5d8:	6923      	ldr	r3, [r4, #16]
 800d5da:	4642      	mov	r2, r8
 800d5dc:	4631      	mov	r1, r6
 800d5de:	4628      	mov	r0, r5
 800d5e0:	47b8      	blx	r7
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	d12b      	bne.n	800d63e <_printf_float+0x242>
 800d5e6:	e764      	b.n	800d4b2 <_printf_float+0xb6>
 800d5e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d5ec:	f240 80dd 	bls.w	800d7aa <_printf_float+0x3ae>
 800d5f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	f7f3 f9d6 	bl	80009a8 <__aeabi_dcmpeq>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d033      	beq.n	800d668 <_printf_float+0x26c>
 800d600:	2301      	movs	r3, #1
 800d602:	4631      	mov	r1, r6
 800d604:	4628      	mov	r0, r5
 800d606:	4a35      	ldr	r2, [pc, #212]	; (800d6dc <_printf_float+0x2e0>)
 800d608:	47b8      	blx	r7
 800d60a:	3001      	adds	r0, #1
 800d60c:	f43f af51 	beq.w	800d4b2 <_printf_float+0xb6>
 800d610:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d614:	429a      	cmp	r2, r3
 800d616:	db02      	blt.n	800d61e <_printf_float+0x222>
 800d618:	6823      	ldr	r3, [r4, #0]
 800d61a:	07d8      	lsls	r0, r3, #31
 800d61c:	d50f      	bpl.n	800d63e <_printf_float+0x242>
 800d61e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d622:	4631      	mov	r1, r6
 800d624:	4628      	mov	r0, r5
 800d626:	47b8      	blx	r7
 800d628:	3001      	adds	r0, #1
 800d62a:	f43f af42 	beq.w	800d4b2 <_printf_float+0xb6>
 800d62e:	f04f 0800 	mov.w	r8, #0
 800d632:	f104 091a 	add.w	r9, r4, #26
 800d636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d638:	3b01      	subs	r3, #1
 800d63a:	4543      	cmp	r3, r8
 800d63c:	dc09      	bgt.n	800d652 <_printf_float+0x256>
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	079b      	lsls	r3, r3, #30
 800d642:	f100 8102 	bmi.w	800d84a <_printf_float+0x44e>
 800d646:	68e0      	ldr	r0, [r4, #12]
 800d648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d64a:	4298      	cmp	r0, r3
 800d64c:	bfb8      	it	lt
 800d64e:	4618      	movlt	r0, r3
 800d650:	e731      	b.n	800d4b6 <_printf_float+0xba>
 800d652:	2301      	movs	r3, #1
 800d654:	464a      	mov	r2, r9
 800d656:	4631      	mov	r1, r6
 800d658:	4628      	mov	r0, r5
 800d65a:	47b8      	blx	r7
 800d65c:	3001      	adds	r0, #1
 800d65e:	f43f af28 	beq.w	800d4b2 <_printf_float+0xb6>
 800d662:	f108 0801 	add.w	r8, r8, #1
 800d666:	e7e6      	b.n	800d636 <_printf_float+0x23a>
 800d668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	dc38      	bgt.n	800d6e0 <_printf_float+0x2e4>
 800d66e:	2301      	movs	r3, #1
 800d670:	4631      	mov	r1, r6
 800d672:	4628      	mov	r0, r5
 800d674:	4a19      	ldr	r2, [pc, #100]	; (800d6dc <_printf_float+0x2e0>)
 800d676:	47b8      	blx	r7
 800d678:	3001      	adds	r0, #1
 800d67a:	f43f af1a 	beq.w	800d4b2 <_printf_float+0xb6>
 800d67e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d682:	4313      	orrs	r3, r2
 800d684:	d102      	bne.n	800d68c <_printf_float+0x290>
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	07d9      	lsls	r1, r3, #31
 800d68a:	d5d8      	bpl.n	800d63e <_printf_float+0x242>
 800d68c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d690:	4631      	mov	r1, r6
 800d692:	4628      	mov	r0, r5
 800d694:	47b8      	blx	r7
 800d696:	3001      	adds	r0, #1
 800d698:	f43f af0b 	beq.w	800d4b2 <_printf_float+0xb6>
 800d69c:	f04f 0900 	mov.w	r9, #0
 800d6a0:	f104 0a1a 	add.w	sl, r4, #26
 800d6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6a6:	425b      	negs	r3, r3
 800d6a8:	454b      	cmp	r3, r9
 800d6aa:	dc01      	bgt.n	800d6b0 <_printf_float+0x2b4>
 800d6ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6ae:	e794      	b.n	800d5da <_printf_float+0x1de>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	4652      	mov	r2, sl
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	47b8      	blx	r7
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	f43f aef9 	beq.w	800d4b2 <_printf_float+0xb6>
 800d6c0:	f109 0901 	add.w	r9, r9, #1
 800d6c4:	e7ee      	b.n	800d6a4 <_printf_float+0x2a8>
 800d6c6:	bf00      	nop
 800d6c8:	7fefffff 	.word	0x7fefffff
 800d6cc:	08012288 	.word	0x08012288
 800d6d0:	0801228c 	.word	0x0801228c
 800d6d4:	08012294 	.word	0x08012294
 800d6d8:	08012290 	.word	0x08012290
 800d6dc:	08012298 	.word	0x08012298
 800d6e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	bfa8      	it	ge
 800d6e8:	461a      	movge	r2, r3
 800d6ea:	2a00      	cmp	r2, #0
 800d6ec:	4691      	mov	r9, r2
 800d6ee:	dc37      	bgt.n	800d760 <_printf_float+0x364>
 800d6f0:	f04f 0b00 	mov.w	fp, #0
 800d6f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6f8:	f104 021a 	add.w	r2, r4, #26
 800d6fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d700:	ebaa 0309 	sub.w	r3, sl, r9
 800d704:	455b      	cmp	r3, fp
 800d706:	dc33      	bgt.n	800d770 <_printf_float+0x374>
 800d708:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d70c:	429a      	cmp	r2, r3
 800d70e:	db3b      	blt.n	800d788 <_printf_float+0x38c>
 800d710:	6823      	ldr	r3, [r4, #0]
 800d712:	07da      	lsls	r2, r3, #31
 800d714:	d438      	bmi.n	800d788 <_printf_float+0x38c>
 800d716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d718:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d71a:	eba3 020a 	sub.w	r2, r3, sl
 800d71e:	eba3 0901 	sub.w	r9, r3, r1
 800d722:	4591      	cmp	r9, r2
 800d724:	bfa8      	it	ge
 800d726:	4691      	movge	r9, r2
 800d728:	f1b9 0f00 	cmp.w	r9, #0
 800d72c:	dc34      	bgt.n	800d798 <_printf_float+0x39c>
 800d72e:	f04f 0800 	mov.w	r8, #0
 800d732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d736:	f104 0a1a 	add.w	sl, r4, #26
 800d73a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d73e:	1a9b      	subs	r3, r3, r2
 800d740:	eba3 0309 	sub.w	r3, r3, r9
 800d744:	4543      	cmp	r3, r8
 800d746:	f77f af7a 	ble.w	800d63e <_printf_float+0x242>
 800d74a:	2301      	movs	r3, #1
 800d74c:	4652      	mov	r2, sl
 800d74e:	4631      	mov	r1, r6
 800d750:	4628      	mov	r0, r5
 800d752:	47b8      	blx	r7
 800d754:	3001      	adds	r0, #1
 800d756:	f43f aeac 	beq.w	800d4b2 <_printf_float+0xb6>
 800d75a:	f108 0801 	add.w	r8, r8, #1
 800d75e:	e7ec      	b.n	800d73a <_printf_float+0x33e>
 800d760:	4613      	mov	r3, r2
 800d762:	4631      	mov	r1, r6
 800d764:	4642      	mov	r2, r8
 800d766:	4628      	mov	r0, r5
 800d768:	47b8      	blx	r7
 800d76a:	3001      	adds	r0, #1
 800d76c:	d1c0      	bne.n	800d6f0 <_printf_float+0x2f4>
 800d76e:	e6a0      	b.n	800d4b2 <_printf_float+0xb6>
 800d770:	2301      	movs	r3, #1
 800d772:	4631      	mov	r1, r6
 800d774:	4628      	mov	r0, r5
 800d776:	920b      	str	r2, [sp, #44]	; 0x2c
 800d778:	47b8      	blx	r7
 800d77a:	3001      	adds	r0, #1
 800d77c:	f43f ae99 	beq.w	800d4b2 <_printf_float+0xb6>
 800d780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d782:	f10b 0b01 	add.w	fp, fp, #1
 800d786:	e7b9      	b.n	800d6fc <_printf_float+0x300>
 800d788:	4631      	mov	r1, r6
 800d78a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d78e:	4628      	mov	r0, r5
 800d790:	47b8      	blx	r7
 800d792:	3001      	adds	r0, #1
 800d794:	d1bf      	bne.n	800d716 <_printf_float+0x31a>
 800d796:	e68c      	b.n	800d4b2 <_printf_float+0xb6>
 800d798:	464b      	mov	r3, r9
 800d79a:	4631      	mov	r1, r6
 800d79c:	4628      	mov	r0, r5
 800d79e:	eb08 020a 	add.w	r2, r8, sl
 800d7a2:	47b8      	blx	r7
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	d1c2      	bne.n	800d72e <_printf_float+0x332>
 800d7a8:	e683      	b.n	800d4b2 <_printf_float+0xb6>
 800d7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7ac:	2a01      	cmp	r2, #1
 800d7ae:	dc01      	bgt.n	800d7b4 <_printf_float+0x3b8>
 800d7b0:	07db      	lsls	r3, r3, #31
 800d7b2:	d537      	bpl.n	800d824 <_printf_float+0x428>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	4642      	mov	r2, r8
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	47b8      	blx	r7
 800d7be:	3001      	adds	r0, #1
 800d7c0:	f43f ae77 	beq.w	800d4b2 <_printf_float+0xb6>
 800d7c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7c8:	4631      	mov	r1, r6
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	47b8      	blx	r7
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	f43f ae6f 	beq.w	800d4b2 <_printf_float+0xb6>
 800d7d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f7f3 f8e4 	bl	80009a8 <__aeabi_dcmpeq>
 800d7e0:	b9d8      	cbnz	r0, 800d81a <_printf_float+0x41e>
 800d7e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7e4:	f108 0201 	add.w	r2, r8, #1
 800d7e8:	3b01      	subs	r3, #1
 800d7ea:	4631      	mov	r1, r6
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	47b8      	blx	r7
 800d7f0:	3001      	adds	r0, #1
 800d7f2:	d10e      	bne.n	800d812 <_printf_float+0x416>
 800d7f4:	e65d      	b.n	800d4b2 <_printf_float+0xb6>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	464a      	mov	r2, r9
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b8      	blx	r7
 800d800:	3001      	adds	r0, #1
 800d802:	f43f ae56 	beq.w	800d4b2 <_printf_float+0xb6>
 800d806:	f108 0801 	add.w	r8, r8, #1
 800d80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d80c:	3b01      	subs	r3, #1
 800d80e:	4543      	cmp	r3, r8
 800d810:	dcf1      	bgt.n	800d7f6 <_printf_float+0x3fa>
 800d812:	4653      	mov	r3, sl
 800d814:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d818:	e6e0      	b.n	800d5dc <_printf_float+0x1e0>
 800d81a:	f04f 0800 	mov.w	r8, #0
 800d81e:	f104 091a 	add.w	r9, r4, #26
 800d822:	e7f2      	b.n	800d80a <_printf_float+0x40e>
 800d824:	2301      	movs	r3, #1
 800d826:	4642      	mov	r2, r8
 800d828:	e7df      	b.n	800d7ea <_printf_float+0x3ee>
 800d82a:	2301      	movs	r3, #1
 800d82c:	464a      	mov	r2, r9
 800d82e:	4631      	mov	r1, r6
 800d830:	4628      	mov	r0, r5
 800d832:	47b8      	blx	r7
 800d834:	3001      	adds	r0, #1
 800d836:	f43f ae3c 	beq.w	800d4b2 <_printf_float+0xb6>
 800d83a:	f108 0801 	add.w	r8, r8, #1
 800d83e:	68e3      	ldr	r3, [r4, #12]
 800d840:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d842:	1a5b      	subs	r3, r3, r1
 800d844:	4543      	cmp	r3, r8
 800d846:	dcf0      	bgt.n	800d82a <_printf_float+0x42e>
 800d848:	e6fd      	b.n	800d646 <_printf_float+0x24a>
 800d84a:	f04f 0800 	mov.w	r8, #0
 800d84e:	f104 0919 	add.w	r9, r4, #25
 800d852:	e7f4      	b.n	800d83e <_printf_float+0x442>

0800d854 <_printf_common>:
 800d854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d858:	4616      	mov	r6, r2
 800d85a:	4699      	mov	r9, r3
 800d85c:	688a      	ldr	r2, [r1, #8]
 800d85e:	690b      	ldr	r3, [r1, #16]
 800d860:	4607      	mov	r7, r0
 800d862:	4293      	cmp	r3, r2
 800d864:	bfb8      	it	lt
 800d866:	4613      	movlt	r3, r2
 800d868:	6033      	str	r3, [r6, #0]
 800d86a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d86e:	460c      	mov	r4, r1
 800d870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d874:	b10a      	cbz	r2, 800d87a <_printf_common+0x26>
 800d876:	3301      	adds	r3, #1
 800d878:	6033      	str	r3, [r6, #0]
 800d87a:	6823      	ldr	r3, [r4, #0]
 800d87c:	0699      	lsls	r1, r3, #26
 800d87e:	bf42      	ittt	mi
 800d880:	6833      	ldrmi	r3, [r6, #0]
 800d882:	3302      	addmi	r3, #2
 800d884:	6033      	strmi	r3, [r6, #0]
 800d886:	6825      	ldr	r5, [r4, #0]
 800d888:	f015 0506 	ands.w	r5, r5, #6
 800d88c:	d106      	bne.n	800d89c <_printf_common+0x48>
 800d88e:	f104 0a19 	add.w	sl, r4, #25
 800d892:	68e3      	ldr	r3, [r4, #12]
 800d894:	6832      	ldr	r2, [r6, #0]
 800d896:	1a9b      	subs	r3, r3, r2
 800d898:	42ab      	cmp	r3, r5
 800d89a:	dc28      	bgt.n	800d8ee <_printf_common+0x9a>
 800d89c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8a0:	1e13      	subs	r3, r2, #0
 800d8a2:	6822      	ldr	r2, [r4, #0]
 800d8a4:	bf18      	it	ne
 800d8a6:	2301      	movne	r3, #1
 800d8a8:	0692      	lsls	r2, r2, #26
 800d8aa:	d42d      	bmi.n	800d908 <_printf_common+0xb4>
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8b4:	47c0      	blx	r8
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	d020      	beq.n	800d8fc <_printf_common+0xa8>
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	68e5      	ldr	r5, [r4, #12]
 800d8be:	f003 0306 	and.w	r3, r3, #6
 800d8c2:	2b04      	cmp	r3, #4
 800d8c4:	bf18      	it	ne
 800d8c6:	2500      	movne	r5, #0
 800d8c8:	6832      	ldr	r2, [r6, #0]
 800d8ca:	f04f 0600 	mov.w	r6, #0
 800d8ce:	68a3      	ldr	r3, [r4, #8]
 800d8d0:	bf08      	it	eq
 800d8d2:	1aad      	subeq	r5, r5, r2
 800d8d4:	6922      	ldr	r2, [r4, #16]
 800d8d6:	bf08      	it	eq
 800d8d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	bfc4      	itt	gt
 800d8e0:	1a9b      	subgt	r3, r3, r2
 800d8e2:	18ed      	addgt	r5, r5, r3
 800d8e4:	341a      	adds	r4, #26
 800d8e6:	42b5      	cmp	r5, r6
 800d8e8:	d11a      	bne.n	800d920 <_printf_common+0xcc>
 800d8ea:	2000      	movs	r0, #0
 800d8ec:	e008      	b.n	800d900 <_printf_common+0xac>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	4652      	mov	r2, sl
 800d8f2:	4649      	mov	r1, r9
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	47c0      	blx	r8
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	d103      	bne.n	800d904 <_printf_common+0xb0>
 800d8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d904:	3501      	adds	r5, #1
 800d906:	e7c4      	b.n	800d892 <_printf_common+0x3e>
 800d908:	2030      	movs	r0, #48	; 0x30
 800d90a:	18e1      	adds	r1, r4, r3
 800d90c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d916:	4422      	add	r2, r4
 800d918:	3302      	adds	r3, #2
 800d91a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d91e:	e7c5      	b.n	800d8ac <_printf_common+0x58>
 800d920:	2301      	movs	r3, #1
 800d922:	4622      	mov	r2, r4
 800d924:	4649      	mov	r1, r9
 800d926:	4638      	mov	r0, r7
 800d928:	47c0      	blx	r8
 800d92a:	3001      	adds	r0, #1
 800d92c:	d0e6      	beq.n	800d8fc <_printf_common+0xa8>
 800d92e:	3601      	adds	r6, #1
 800d930:	e7d9      	b.n	800d8e6 <_printf_common+0x92>
	...

0800d934 <_printf_i>:
 800d934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d938:	7e0f      	ldrb	r7, [r1, #24]
 800d93a:	4691      	mov	r9, r2
 800d93c:	2f78      	cmp	r7, #120	; 0x78
 800d93e:	4680      	mov	r8, r0
 800d940:	460c      	mov	r4, r1
 800d942:	469a      	mov	sl, r3
 800d944:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d94a:	d807      	bhi.n	800d95c <_printf_i+0x28>
 800d94c:	2f62      	cmp	r7, #98	; 0x62
 800d94e:	d80a      	bhi.n	800d966 <_printf_i+0x32>
 800d950:	2f00      	cmp	r7, #0
 800d952:	f000 80d9 	beq.w	800db08 <_printf_i+0x1d4>
 800d956:	2f58      	cmp	r7, #88	; 0x58
 800d958:	f000 80a4 	beq.w	800daa4 <_printf_i+0x170>
 800d95c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d964:	e03a      	b.n	800d9dc <_printf_i+0xa8>
 800d966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d96a:	2b15      	cmp	r3, #21
 800d96c:	d8f6      	bhi.n	800d95c <_printf_i+0x28>
 800d96e:	a101      	add	r1, pc, #4	; (adr r1, 800d974 <_printf_i+0x40>)
 800d970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d974:	0800d9cd 	.word	0x0800d9cd
 800d978:	0800d9e1 	.word	0x0800d9e1
 800d97c:	0800d95d 	.word	0x0800d95d
 800d980:	0800d95d 	.word	0x0800d95d
 800d984:	0800d95d 	.word	0x0800d95d
 800d988:	0800d95d 	.word	0x0800d95d
 800d98c:	0800d9e1 	.word	0x0800d9e1
 800d990:	0800d95d 	.word	0x0800d95d
 800d994:	0800d95d 	.word	0x0800d95d
 800d998:	0800d95d 	.word	0x0800d95d
 800d99c:	0800d95d 	.word	0x0800d95d
 800d9a0:	0800daef 	.word	0x0800daef
 800d9a4:	0800da11 	.word	0x0800da11
 800d9a8:	0800dad1 	.word	0x0800dad1
 800d9ac:	0800d95d 	.word	0x0800d95d
 800d9b0:	0800d95d 	.word	0x0800d95d
 800d9b4:	0800db11 	.word	0x0800db11
 800d9b8:	0800d95d 	.word	0x0800d95d
 800d9bc:	0800da11 	.word	0x0800da11
 800d9c0:	0800d95d 	.word	0x0800d95d
 800d9c4:	0800d95d 	.word	0x0800d95d
 800d9c8:	0800dad9 	.word	0x0800dad9
 800d9cc:	682b      	ldr	r3, [r5, #0]
 800d9ce:	1d1a      	adds	r2, r3, #4
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	602a      	str	r2, [r5, #0]
 800d9d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e0a4      	b.n	800db2a <_printf_i+0x1f6>
 800d9e0:	6820      	ldr	r0, [r4, #0]
 800d9e2:	6829      	ldr	r1, [r5, #0]
 800d9e4:	0606      	lsls	r6, r0, #24
 800d9e6:	f101 0304 	add.w	r3, r1, #4
 800d9ea:	d50a      	bpl.n	800da02 <_printf_i+0xce>
 800d9ec:	680e      	ldr	r6, [r1, #0]
 800d9ee:	602b      	str	r3, [r5, #0]
 800d9f0:	2e00      	cmp	r6, #0
 800d9f2:	da03      	bge.n	800d9fc <_printf_i+0xc8>
 800d9f4:	232d      	movs	r3, #45	; 0x2d
 800d9f6:	4276      	negs	r6, r6
 800d9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9fc:	230a      	movs	r3, #10
 800d9fe:	485e      	ldr	r0, [pc, #376]	; (800db78 <_printf_i+0x244>)
 800da00:	e019      	b.n	800da36 <_printf_i+0x102>
 800da02:	680e      	ldr	r6, [r1, #0]
 800da04:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da08:	602b      	str	r3, [r5, #0]
 800da0a:	bf18      	it	ne
 800da0c:	b236      	sxthne	r6, r6
 800da0e:	e7ef      	b.n	800d9f0 <_printf_i+0xbc>
 800da10:	682b      	ldr	r3, [r5, #0]
 800da12:	6820      	ldr	r0, [r4, #0]
 800da14:	1d19      	adds	r1, r3, #4
 800da16:	6029      	str	r1, [r5, #0]
 800da18:	0601      	lsls	r1, r0, #24
 800da1a:	d501      	bpl.n	800da20 <_printf_i+0xec>
 800da1c:	681e      	ldr	r6, [r3, #0]
 800da1e:	e002      	b.n	800da26 <_printf_i+0xf2>
 800da20:	0646      	lsls	r6, r0, #25
 800da22:	d5fb      	bpl.n	800da1c <_printf_i+0xe8>
 800da24:	881e      	ldrh	r6, [r3, #0]
 800da26:	2f6f      	cmp	r7, #111	; 0x6f
 800da28:	bf0c      	ite	eq
 800da2a:	2308      	moveq	r3, #8
 800da2c:	230a      	movne	r3, #10
 800da2e:	4852      	ldr	r0, [pc, #328]	; (800db78 <_printf_i+0x244>)
 800da30:	2100      	movs	r1, #0
 800da32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da36:	6865      	ldr	r5, [r4, #4]
 800da38:	2d00      	cmp	r5, #0
 800da3a:	bfa8      	it	ge
 800da3c:	6821      	ldrge	r1, [r4, #0]
 800da3e:	60a5      	str	r5, [r4, #8]
 800da40:	bfa4      	itt	ge
 800da42:	f021 0104 	bicge.w	r1, r1, #4
 800da46:	6021      	strge	r1, [r4, #0]
 800da48:	b90e      	cbnz	r6, 800da4e <_printf_i+0x11a>
 800da4a:	2d00      	cmp	r5, #0
 800da4c:	d04d      	beq.n	800daea <_printf_i+0x1b6>
 800da4e:	4615      	mov	r5, r2
 800da50:	fbb6 f1f3 	udiv	r1, r6, r3
 800da54:	fb03 6711 	mls	r7, r3, r1, r6
 800da58:	5dc7      	ldrb	r7, [r0, r7]
 800da5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da5e:	4637      	mov	r7, r6
 800da60:	42bb      	cmp	r3, r7
 800da62:	460e      	mov	r6, r1
 800da64:	d9f4      	bls.n	800da50 <_printf_i+0x11c>
 800da66:	2b08      	cmp	r3, #8
 800da68:	d10b      	bne.n	800da82 <_printf_i+0x14e>
 800da6a:	6823      	ldr	r3, [r4, #0]
 800da6c:	07de      	lsls	r6, r3, #31
 800da6e:	d508      	bpl.n	800da82 <_printf_i+0x14e>
 800da70:	6923      	ldr	r3, [r4, #16]
 800da72:	6861      	ldr	r1, [r4, #4]
 800da74:	4299      	cmp	r1, r3
 800da76:	bfde      	ittt	le
 800da78:	2330      	movle	r3, #48	; 0x30
 800da7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da82:	1b52      	subs	r2, r2, r5
 800da84:	6122      	str	r2, [r4, #16]
 800da86:	464b      	mov	r3, r9
 800da88:	4621      	mov	r1, r4
 800da8a:	4640      	mov	r0, r8
 800da8c:	f8cd a000 	str.w	sl, [sp]
 800da90:	aa03      	add	r2, sp, #12
 800da92:	f7ff fedf 	bl	800d854 <_printf_common>
 800da96:	3001      	adds	r0, #1
 800da98:	d14c      	bne.n	800db34 <_printf_i+0x200>
 800da9a:	f04f 30ff 	mov.w	r0, #4294967295
 800da9e:	b004      	add	sp, #16
 800daa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daa4:	4834      	ldr	r0, [pc, #208]	; (800db78 <_printf_i+0x244>)
 800daa6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800daaa:	6829      	ldr	r1, [r5, #0]
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	f851 6b04 	ldr.w	r6, [r1], #4
 800dab2:	6029      	str	r1, [r5, #0]
 800dab4:	061d      	lsls	r5, r3, #24
 800dab6:	d514      	bpl.n	800dae2 <_printf_i+0x1ae>
 800dab8:	07df      	lsls	r7, r3, #31
 800daba:	bf44      	itt	mi
 800dabc:	f043 0320 	orrmi.w	r3, r3, #32
 800dac0:	6023      	strmi	r3, [r4, #0]
 800dac2:	b91e      	cbnz	r6, 800dacc <_printf_i+0x198>
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	f023 0320 	bic.w	r3, r3, #32
 800daca:	6023      	str	r3, [r4, #0]
 800dacc:	2310      	movs	r3, #16
 800dace:	e7af      	b.n	800da30 <_printf_i+0xfc>
 800dad0:	6823      	ldr	r3, [r4, #0]
 800dad2:	f043 0320 	orr.w	r3, r3, #32
 800dad6:	6023      	str	r3, [r4, #0]
 800dad8:	2378      	movs	r3, #120	; 0x78
 800dada:	4828      	ldr	r0, [pc, #160]	; (800db7c <_printf_i+0x248>)
 800dadc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dae0:	e7e3      	b.n	800daaa <_printf_i+0x176>
 800dae2:	0659      	lsls	r1, r3, #25
 800dae4:	bf48      	it	mi
 800dae6:	b2b6      	uxthmi	r6, r6
 800dae8:	e7e6      	b.n	800dab8 <_printf_i+0x184>
 800daea:	4615      	mov	r5, r2
 800daec:	e7bb      	b.n	800da66 <_printf_i+0x132>
 800daee:	682b      	ldr	r3, [r5, #0]
 800daf0:	6826      	ldr	r6, [r4, #0]
 800daf2:	1d18      	adds	r0, r3, #4
 800daf4:	6961      	ldr	r1, [r4, #20]
 800daf6:	6028      	str	r0, [r5, #0]
 800daf8:	0635      	lsls	r5, r6, #24
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	d501      	bpl.n	800db02 <_printf_i+0x1ce>
 800dafe:	6019      	str	r1, [r3, #0]
 800db00:	e002      	b.n	800db08 <_printf_i+0x1d4>
 800db02:	0670      	lsls	r0, r6, #25
 800db04:	d5fb      	bpl.n	800dafe <_printf_i+0x1ca>
 800db06:	8019      	strh	r1, [r3, #0]
 800db08:	2300      	movs	r3, #0
 800db0a:	4615      	mov	r5, r2
 800db0c:	6123      	str	r3, [r4, #16]
 800db0e:	e7ba      	b.n	800da86 <_printf_i+0x152>
 800db10:	682b      	ldr	r3, [r5, #0]
 800db12:	2100      	movs	r1, #0
 800db14:	1d1a      	adds	r2, r3, #4
 800db16:	602a      	str	r2, [r5, #0]
 800db18:	681d      	ldr	r5, [r3, #0]
 800db1a:	6862      	ldr	r2, [r4, #4]
 800db1c:	4628      	mov	r0, r5
 800db1e:	f001 fa49 	bl	800efb4 <memchr>
 800db22:	b108      	cbz	r0, 800db28 <_printf_i+0x1f4>
 800db24:	1b40      	subs	r0, r0, r5
 800db26:	6060      	str	r0, [r4, #4]
 800db28:	6863      	ldr	r3, [r4, #4]
 800db2a:	6123      	str	r3, [r4, #16]
 800db2c:	2300      	movs	r3, #0
 800db2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db32:	e7a8      	b.n	800da86 <_printf_i+0x152>
 800db34:	462a      	mov	r2, r5
 800db36:	4649      	mov	r1, r9
 800db38:	4640      	mov	r0, r8
 800db3a:	6923      	ldr	r3, [r4, #16]
 800db3c:	47d0      	blx	sl
 800db3e:	3001      	adds	r0, #1
 800db40:	d0ab      	beq.n	800da9a <_printf_i+0x166>
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	079b      	lsls	r3, r3, #30
 800db46:	d413      	bmi.n	800db70 <_printf_i+0x23c>
 800db48:	68e0      	ldr	r0, [r4, #12]
 800db4a:	9b03      	ldr	r3, [sp, #12]
 800db4c:	4298      	cmp	r0, r3
 800db4e:	bfb8      	it	lt
 800db50:	4618      	movlt	r0, r3
 800db52:	e7a4      	b.n	800da9e <_printf_i+0x16a>
 800db54:	2301      	movs	r3, #1
 800db56:	4632      	mov	r2, r6
 800db58:	4649      	mov	r1, r9
 800db5a:	4640      	mov	r0, r8
 800db5c:	47d0      	blx	sl
 800db5e:	3001      	adds	r0, #1
 800db60:	d09b      	beq.n	800da9a <_printf_i+0x166>
 800db62:	3501      	adds	r5, #1
 800db64:	68e3      	ldr	r3, [r4, #12]
 800db66:	9903      	ldr	r1, [sp, #12]
 800db68:	1a5b      	subs	r3, r3, r1
 800db6a:	42ab      	cmp	r3, r5
 800db6c:	dcf2      	bgt.n	800db54 <_printf_i+0x220>
 800db6e:	e7eb      	b.n	800db48 <_printf_i+0x214>
 800db70:	2500      	movs	r5, #0
 800db72:	f104 0619 	add.w	r6, r4, #25
 800db76:	e7f5      	b.n	800db64 <_printf_i+0x230>
 800db78:	0801229a 	.word	0x0801229a
 800db7c:	080122ab 	.word	0x080122ab

0800db80 <iprintf>:
 800db80:	b40f      	push	{r0, r1, r2, r3}
 800db82:	4b0a      	ldr	r3, [pc, #40]	; (800dbac <iprintf+0x2c>)
 800db84:	b513      	push	{r0, r1, r4, lr}
 800db86:	681c      	ldr	r4, [r3, #0]
 800db88:	b124      	cbz	r4, 800db94 <iprintf+0x14>
 800db8a:	69a3      	ldr	r3, [r4, #24]
 800db8c:	b913      	cbnz	r3, 800db94 <iprintf+0x14>
 800db8e:	4620      	mov	r0, r4
 800db90:	f001 f906 	bl	800eda0 <__sinit>
 800db94:	ab05      	add	r3, sp, #20
 800db96:	4620      	mov	r0, r4
 800db98:	9a04      	ldr	r2, [sp, #16]
 800db9a:	68a1      	ldr	r1, [r4, #8]
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	f001 ff29 	bl	800f9f4 <_vfiprintf_r>
 800dba2:	b002      	add	sp, #8
 800dba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dba8:	b004      	add	sp, #16
 800dbaa:	4770      	bx	lr
 800dbac:	20000030 	.word	0x20000030

0800dbb0 <_puts_r>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	460e      	mov	r6, r1
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	b118      	cbz	r0, 800dbc0 <_puts_r+0x10>
 800dbb8:	6983      	ldr	r3, [r0, #24]
 800dbba:	b90b      	cbnz	r3, 800dbc0 <_puts_r+0x10>
 800dbbc:	f001 f8f0 	bl	800eda0 <__sinit>
 800dbc0:	69ab      	ldr	r3, [r5, #24]
 800dbc2:	68ac      	ldr	r4, [r5, #8]
 800dbc4:	b913      	cbnz	r3, 800dbcc <_puts_r+0x1c>
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f001 f8ea 	bl	800eda0 <__sinit>
 800dbcc:	4b2c      	ldr	r3, [pc, #176]	; (800dc80 <_puts_r+0xd0>)
 800dbce:	429c      	cmp	r4, r3
 800dbd0:	d120      	bne.n	800dc14 <_puts_r+0x64>
 800dbd2:	686c      	ldr	r4, [r5, #4]
 800dbd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbd6:	07db      	lsls	r3, r3, #31
 800dbd8:	d405      	bmi.n	800dbe6 <_puts_r+0x36>
 800dbda:	89a3      	ldrh	r3, [r4, #12]
 800dbdc:	0598      	lsls	r0, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_puts_r+0x36>
 800dbe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbe2:	f001 f980 	bl	800eee6 <__retarget_lock_acquire_recursive>
 800dbe6:	89a3      	ldrh	r3, [r4, #12]
 800dbe8:	0719      	lsls	r1, r3, #28
 800dbea:	d51d      	bpl.n	800dc28 <_puts_r+0x78>
 800dbec:	6923      	ldr	r3, [r4, #16]
 800dbee:	b1db      	cbz	r3, 800dc28 <_puts_r+0x78>
 800dbf0:	3e01      	subs	r6, #1
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	60a3      	str	r3, [r4, #8]
 800dbfc:	bb39      	cbnz	r1, 800dc4e <_puts_r+0x9e>
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	da38      	bge.n	800dc74 <_puts_r+0xc4>
 800dc02:	4622      	mov	r2, r4
 800dc04:	210a      	movs	r1, #10
 800dc06:	4628      	mov	r0, r5
 800dc08:	f000 f878 	bl	800dcfc <__swbuf_r>
 800dc0c:	3001      	adds	r0, #1
 800dc0e:	d011      	beq.n	800dc34 <_puts_r+0x84>
 800dc10:	250a      	movs	r5, #10
 800dc12:	e011      	b.n	800dc38 <_puts_r+0x88>
 800dc14:	4b1b      	ldr	r3, [pc, #108]	; (800dc84 <_puts_r+0xd4>)
 800dc16:	429c      	cmp	r4, r3
 800dc18:	d101      	bne.n	800dc1e <_puts_r+0x6e>
 800dc1a:	68ac      	ldr	r4, [r5, #8]
 800dc1c:	e7da      	b.n	800dbd4 <_puts_r+0x24>
 800dc1e:	4b1a      	ldr	r3, [pc, #104]	; (800dc88 <_puts_r+0xd8>)
 800dc20:	429c      	cmp	r4, r3
 800dc22:	bf08      	it	eq
 800dc24:	68ec      	ldreq	r4, [r5, #12]
 800dc26:	e7d5      	b.n	800dbd4 <_puts_r+0x24>
 800dc28:	4621      	mov	r1, r4
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	f000 f8b8 	bl	800dda0 <__swsetup_r>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d0dd      	beq.n	800dbf0 <_puts_r+0x40>
 800dc34:	f04f 35ff 	mov.w	r5, #4294967295
 800dc38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc3a:	07da      	lsls	r2, r3, #31
 800dc3c:	d405      	bmi.n	800dc4a <_puts_r+0x9a>
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	059b      	lsls	r3, r3, #22
 800dc42:	d402      	bmi.n	800dc4a <_puts_r+0x9a>
 800dc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc46:	f001 f94f 	bl	800eee8 <__retarget_lock_release_recursive>
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	bd70      	pop	{r4, r5, r6, pc}
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	da04      	bge.n	800dc5c <_puts_r+0xac>
 800dc52:	69a2      	ldr	r2, [r4, #24]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	dc06      	bgt.n	800dc66 <_puts_r+0xb6>
 800dc58:	290a      	cmp	r1, #10
 800dc5a:	d004      	beq.n	800dc66 <_puts_r+0xb6>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	1c5a      	adds	r2, r3, #1
 800dc60:	6022      	str	r2, [r4, #0]
 800dc62:	7019      	strb	r1, [r3, #0]
 800dc64:	e7c5      	b.n	800dbf2 <_puts_r+0x42>
 800dc66:	4622      	mov	r2, r4
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f000 f847 	bl	800dcfc <__swbuf_r>
 800dc6e:	3001      	adds	r0, #1
 800dc70:	d1bf      	bne.n	800dbf2 <_puts_r+0x42>
 800dc72:	e7df      	b.n	800dc34 <_puts_r+0x84>
 800dc74:	250a      	movs	r5, #10
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	6022      	str	r2, [r4, #0]
 800dc7c:	701d      	strb	r5, [r3, #0]
 800dc7e:	e7db      	b.n	800dc38 <_puts_r+0x88>
 800dc80:	0801236c 	.word	0x0801236c
 800dc84:	0801238c 	.word	0x0801238c
 800dc88:	0801234c 	.word	0x0801234c

0800dc8c <puts>:
 800dc8c:	4b02      	ldr	r3, [pc, #8]	; (800dc98 <puts+0xc>)
 800dc8e:	4601      	mov	r1, r0
 800dc90:	6818      	ldr	r0, [r3, #0]
 800dc92:	f7ff bf8d 	b.w	800dbb0 <_puts_r>
 800dc96:	bf00      	nop
 800dc98:	20000030 	.word	0x20000030

0800dc9c <_sbrk_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	2300      	movs	r3, #0
 800dca0:	4d05      	ldr	r5, [pc, #20]	; (800dcb8 <_sbrk_r+0x1c>)
 800dca2:	4604      	mov	r4, r0
 800dca4:	4608      	mov	r0, r1
 800dca6:	602b      	str	r3, [r5, #0]
 800dca8:	f7f7 fa38 	bl	800511c <_sbrk>
 800dcac:	1c43      	adds	r3, r0, #1
 800dcae:	d102      	bne.n	800dcb6 <_sbrk_r+0x1a>
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	b103      	cbz	r3, 800dcb6 <_sbrk_r+0x1a>
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}
 800dcb8:	200010d0 	.word	0x200010d0

0800dcbc <siprintf>:
 800dcbc:	b40e      	push	{r1, r2, r3}
 800dcbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dcc2:	b500      	push	{lr}
 800dcc4:	b09c      	sub	sp, #112	; 0x70
 800dcc6:	ab1d      	add	r3, sp, #116	; 0x74
 800dcc8:	9002      	str	r0, [sp, #8]
 800dcca:	9006      	str	r0, [sp, #24]
 800dccc:	9107      	str	r1, [sp, #28]
 800dcce:	9104      	str	r1, [sp, #16]
 800dcd0:	4808      	ldr	r0, [pc, #32]	; (800dcf4 <siprintf+0x38>)
 800dcd2:	4909      	ldr	r1, [pc, #36]	; (800dcf8 <siprintf+0x3c>)
 800dcd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcd8:	9105      	str	r1, [sp, #20]
 800dcda:	6800      	ldr	r0, [r0, #0]
 800dcdc:	a902      	add	r1, sp, #8
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	f001 fd60 	bl	800f7a4 <_svfiprintf_r>
 800dce4:	2200      	movs	r2, #0
 800dce6:	9b02      	ldr	r3, [sp, #8]
 800dce8:	701a      	strb	r2, [r3, #0]
 800dcea:	b01c      	add	sp, #112	; 0x70
 800dcec:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcf0:	b003      	add	sp, #12
 800dcf2:	4770      	bx	lr
 800dcf4:	20000030 	.word	0x20000030
 800dcf8:	ffff0208 	.word	0xffff0208

0800dcfc <__swbuf_r>:
 800dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfe:	460e      	mov	r6, r1
 800dd00:	4614      	mov	r4, r2
 800dd02:	4605      	mov	r5, r0
 800dd04:	b118      	cbz	r0, 800dd0e <__swbuf_r+0x12>
 800dd06:	6983      	ldr	r3, [r0, #24]
 800dd08:	b90b      	cbnz	r3, 800dd0e <__swbuf_r+0x12>
 800dd0a:	f001 f849 	bl	800eda0 <__sinit>
 800dd0e:	4b21      	ldr	r3, [pc, #132]	; (800dd94 <__swbuf_r+0x98>)
 800dd10:	429c      	cmp	r4, r3
 800dd12:	d12b      	bne.n	800dd6c <__swbuf_r+0x70>
 800dd14:	686c      	ldr	r4, [r5, #4]
 800dd16:	69a3      	ldr	r3, [r4, #24]
 800dd18:	60a3      	str	r3, [r4, #8]
 800dd1a:	89a3      	ldrh	r3, [r4, #12]
 800dd1c:	071a      	lsls	r2, r3, #28
 800dd1e:	d52f      	bpl.n	800dd80 <__swbuf_r+0x84>
 800dd20:	6923      	ldr	r3, [r4, #16]
 800dd22:	b36b      	cbz	r3, 800dd80 <__swbuf_r+0x84>
 800dd24:	6923      	ldr	r3, [r4, #16]
 800dd26:	6820      	ldr	r0, [r4, #0]
 800dd28:	b2f6      	uxtb	r6, r6
 800dd2a:	1ac0      	subs	r0, r0, r3
 800dd2c:	6963      	ldr	r3, [r4, #20]
 800dd2e:	4637      	mov	r7, r6
 800dd30:	4283      	cmp	r3, r0
 800dd32:	dc04      	bgt.n	800dd3e <__swbuf_r+0x42>
 800dd34:	4621      	mov	r1, r4
 800dd36:	4628      	mov	r0, r5
 800dd38:	f000 ff9e 	bl	800ec78 <_fflush_r>
 800dd3c:	bb30      	cbnz	r0, 800dd8c <__swbuf_r+0x90>
 800dd3e:	68a3      	ldr	r3, [r4, #8]
 800dd40:	3001      	adds	r0, #1
 800dd42:	3b01      	subs	r3, #1
 800dd44:	60a3      	str	r3, [r4, #8]
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	6022      	str	r2, [r4, #0]
 800dd4c:	701e      	strb	r6, [r3, #0]
 800dd4e:	6963      	ldr	r3, [r4, #20]
 800dd50:	4283      	cmp	r3, r0
 800dd52:	d004      	beq.n	800dd5e <__swbuf_r+0x62>
 800dd54:	89a3      	ldrh	r3, [r4, #12]
 800dd56:	07db      	lsls	r3, r3, #31
 800dd58:	d506      	bpl.n	800dd68 <__swbuf_r+0x6c>
 800dd5a:	2e0a      	cmp	r6, #10
 800dd5c:	d104      	bne.n	800dd68 <__swbuf_r+0x6c>
 800dd5e:	4621      	mov	r1, r4
 800dd60:	4628      	mov	r0, r5
 800dd62:	f000 ff89 	bl	800ec78 <_fflush_r>
 800dd66:	b988      	cbnz	r0, 800dd8c <__swbuf_r+0x90>
 800dd68:	4638      	mov	r0, r7
 800dd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd6c:	4b0a      	ldr	r3, [pc, #40]	; (800dd98 <__swbuf_r+0x9c>)
 800dd6e:	429c      	cmp	r4, r3
 800dd70:	d101      	bne.n	800dd76 <__swbuf_r+0x7a>
 800dd72:	68ac      	ldr	r4, [r5, #8]
 800dd74:	e7cf      	b.n	800dd16 <__swbuf_r+0x1a>
 800dd76:	4b09      	ldr	r3, [pc, #36]	; (800dd9c <__swbuf_r+0xa0>)
 800dd78:	429c      	cmp	r4, r3
 800dd7a:	bf08      	it	eq
 800dd7c:	68ec      	ldreq	r4, [r5, #12]
 800dd7e:	e7ca      	b.n	800dd16 <__swbuf_r+0x1a>
 800dd80:	4621      	mov	r1, r4
 800dd82:	4628      	mov	r0, r5
 800dd84:	f000 f80c 	bl	800dda0 <__swsetup_r>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d0cb      	beq.n	800dd24 <__swbuf_r+0x28>
 800dd8c:	f04f 37ff 	mov.w	r7, #4294967295
 800dd90:	e7ea      	b.n	800dd68 <__swbuf_r+0x6c>
 800dd92:	bf00      	nop
 800dd94:	0801236c 	.word	0x0801236c
 800dd98:	0801238c 	.word	0x0801238c
 800dd9c:	0801234c 	.word	0x0801234c

0800dda0 <__swsetup_r>:
 800dda0:	4b32      	ldr	r3, [pc, #200]	; (800de6c <__swsetup_r+0xcc>)
 800dda2:	b570      	push	{r4, r5, r6, lr}
 800dda4:	681d      	ldr	r5, [r3, #0]
 800dda6:	4606      	mov	r6, r0
 800dda8:	460c      	mov	r4, r1
 800ddaa:	b125      	cbz	r5, 800ddb6 <__swsetup_r+0x16>
 800ddac:	69ab      	ldr	r3, [r5, #24]
 800ddae:	b913      	cbnz	r3, 800ddb6 <__swsetup_r+0x16>
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	f000 fff5 	bl	800eda0 <__sinit>
 800ddb6:	4b2e      	ldr	r3, [pc, #184]	; (800de70 <__swsetup_r+0xd0>)
 800ddb8:	429c      	cmp	r4, r3
 800ddba:	d10f      	bne.n	800dddc <__swsetup_r+0x3c>
 800ddbc:	686c      	ldr	r4, [r5, #4]
 800ddbe:	89a3      	ldrh	r3, [r4, #12]
 800ddc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddc4:	0719      	lsls	r1, r3, #28
 800ddc6:	d42c      	bmi.n	800de22 <__swsetup_r+0x82>
 800ddc8:	06dd      	lsls	r5, r3, #27
 800ddca:	d411      	bmi.n	800ddf0 <__swsetup_r+0x50>
 800ddcc:	2309      	movs	r3, #9
 800ddce:	6033      	str	r3, [r6, #0]
 800ddd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd8:	81a3      	strh	r3, [r4, #12]
 800ddda:	e03e      	b.n	800de5a <__swsetup_r+0xba>
 800dddc:	4b25      	ldr	r3, [pc, #148]	; (800de74 <__swsetup_r+0xd4>)
 800ddde:	429c      	cmp	r4, r3
 800dde0:	d101      	bne.n	800dde6 <__swsetup_r+0x46>
 800dde2:	68ac      	ldr	r4, [r5, #8]
 800dde4:	e7eb      	b.n	800ddbe <__swsetup_r+0x1e>
 800dde6:	4b24      	ldr	r3, [pc, #144]	; (800de78 <__swsetup_r+0xd8>)
 800dde8:	429c      	cmp	r4, r3
 800ddea:	bf08      	it	eq
 800ddec:	68ec      	ldreq	r4, [r5, #12]
 800ddee:	e7e6      	b.n	800ddbe <__swsetup_r+0x1e>
 800ddf0:	0758      	lsls	r0, r3, #29
 800ddf2:	d512      	bpl.n	800de1a <__swsetup_r+0x7a>
 800ddf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddf6:	b141      	cbz	r1, 800de0a <__swsetup_r+0x6a>
 800ddf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddfc:	4299      	cmp	r1, r3
 800ddfe:	d002      	beq.n	800de06 <__swsetup_r+0x66>
 800de00:	4630      	mov	r0, r6
 800de02:	f7ff f981 	bl	800d108 <_free_r>
 800de06:	2300      	movs	r3, #0
 800de08:	6363      	str	r3, [r4, #52]	; 0x34
 800de0a:	89a3      	ldrh	r3, [r4, #12]
 800de0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de10:	81a3      	strh	r3, [r4, #12]
 800de12:	2300      	movs	r3, #0
 800de14:	6063      	str	r3, [r4, #4]
 800de16:	6923      	ldr	r3, [r4, #16]
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	89a3      	ldrh	r3, [r4, #12]
 800de1c:	f043 0308 	orr.w	r3, r3, #8
 800de20:	81a3      	strh	r3, [r4, #12]
 800de22:	6923      	ldr	r3, [r4, #16]
 800de24:	b94b      	cbnz	r3, 800de3a <__swsetup_r+0x9a>
 800de26:	89a3      	ldrh	r3, [r4, #12]
 800de28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de30:	d003      	beq.n	800de3a <__swsetup_r+0x9a>
 800de32:	4621      	mov	r1, r4
 800de34:	4630      	mov	r0, r6
 800de36:	f001 f87d 	bl	800ef34 <__smakebuf_r>
 800de3a:	89a0      	ldrh	r0, [r4, #12]
 800de3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de40:	f010 0301 	ands.w	r3, r0, #1
 800de44:	d00a      	beq.n	800de5c <__swsetup_r+0xbc>
 800de46:	2300      	movs	r3, #0
 800de48:	60a3      	str	r3, [r4, #8]
 800de4a:	6963      	ldr	r3, [r4, #20]
 800de4c:	425b      	negs	r3, r3
 800de4e:	61a3      	str	r3, [r4, #24]
 800de50:	6923      	ldr	r3, [r4, #16]
 800de52:	b943      	cbnz	r3, 800de66 <__swsetup_r+0xc6>
 800de54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de58:	d1ba      	bne.n	800ddd0 <__swsetup_r+0x30>
 800de5a:	bd70      	pop	{r4, r5, r6, pc}
 800de5c:	0781      	lsls	r1, r0, #30
 800de5e:	bf58      	it	pl
 800de60:	6963      	ldrpl	r3, [r4, #20]
 800de62:	60a3      	str	r3, [r4, #8]
 800de64:	e7f4      	b.n	800de50 <__swsetup_r+0xb0>
 800de66:	2000      	movs	r0, #0
 800de68:	e7f7      	b.n	800de5a <__swsetup_r+0xba>
 800de6a:	bf00      	nop
 800de6c:	20000030 	.word	0x20000030
 800de70:	0801236c 	.word	0x0801236c
 800de74:	0801238c 	.word	0x0801238c
 800de78:	0801234c 	.word	0x0801234c

0800de7c <quorem>:
 800de7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de80:	6903      	ldr	r3, [r0, #16]
 800de82:	690c      	ldr	r4, [r1, #16]
 800de84:	4607      	mov	r7, r0
 800de86:	42a3      	cmp	r3, r4
 800de88:	f2c0 8082 	blt.w	800df90 <quorem+0x114>
 800de8c:	3c01      	subs	r4, #1
 800de8e:	f100 0514 	add.w	r5, r0, #20
 800de92:	f101 0814 	add.w	r8, r1, #20
 800de96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de9a:	9301      	str	r3, [sp, #4]
 800de9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dea0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dea4:	3301      	adds	r3, #1
 800dea6:	429a      	cmp	r2, r3
 800dea8:	fbb2 f6f3 	udiv	r6, r2, r3
 800deac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800deb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800deb4:	d331      	bcc.n	800df1a <quorem+0x9e>
 800deb6:	f04f 0e00 	mov.w	lr, #0
 800deba:	4640      	mov	r0, r8
 800debc:	46ac      	mov	ip, r5
 800debe:	46f2      	mov	sl, lr
 800dec0:	f850 2b04 	ldr.w	r2, [r0], #4
 800dec4:	b293      	uxth	r3, r2
 800dec6:	fb06 e303 	mla	r3, r6, r3, lr
 800deca:	0c12      	lsrs	r2, r2, #16
 800decc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	fb06 e202 	mla	r2, r6, r2, lr
 800ded6:	ebaa 0303 	sub.w	r3, sl, r3
 800deda:	f8dc a000 	ldr.w	sl, [ip]
 800dede:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dee2:	fa1f fa8a 	uxth.w	sl, sl
 800dee6:	4453      	add	r3, sl
 800dee8:	f8dc a000 	ldr.w	sl, [ip]
 800deec:	b292      	uxth	r2, r2
 800deee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800def2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800def6:	b29b      	uxth	r3, r3
 800def8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800defc:	4581      	cmp	r9, r0
 800defe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800df02:	f84c 3b04 	str.w	r3, [ip], #4
 800df06:	d2db      	bcs.n	800dec0 <quorem+0x44>
 800df08:	f855 300b 	ldr.w	r3, [r5, fp]
 800df0c:	b92b      	cbnz	r3, 800df1a <quorem+0x9e>
 800df0e:	9b01      	ldr	r3, [sp, #4]
 800df10:	3b04      	subs	r3, #4
 800df12:	429d      	cmp	r5, r3
 800df14:	461a      	mov	r2, r3
 800df16:	d32f      	bcc.n	800df78 <quorem+0xfc>
 800df18:	613c      	str	r4, [r7, #16]
 800df1a:	4638      	mov	r0, r7
 800df1c:	f001 fae2 	bl	800f4e4 <__mcmp>
 800df20:	2800      	cmp	r0, #0
 800df22:	db25      	blt.n	800df70 <quorem+0xf4>
 800df24:	4628      	mov	r0, r5
 800df26:	f04f 0c00 	mov.w	ip, #0
 800df2a:	3601      	adds	r6, #1
 800df2c:	f858 1b04 	ldr.w	r1, [r8], #4
 800df30:	f8d0 e000 	ldr.w	lr, [r0]
 800df34:	b28b      	uxth	r3, r1
 800df36:	ebac 0303 	sub.w	r3, ip, r3
 800df3a:	fa1f f28e 	uxth.w	r2, lr
 800df3e:	4413      	add	r3, r2
 800df40:	0c0a      	lsrs	r2, r1, #16
 800df42:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800df46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df50:	45c1      	cmp	r9, r8
 800df52:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800df56:	f840 3b04 	str.w	r3, [r0], #4
 800df5a:	d2e7      	bcs.n	800df2c <quorem+0xb0>
 800df5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df64:	b922      	cbnz	r2, 800df70 <quorem+0xf4>
 800df66:	3b04      	subs	r3, #4
 800df68:	429d      	cmp	r5, r3
 800df6a:	461a      	mov	r2, r3
 800df6c:	d30a      	bcc.n	800df84 <quorem+0x108>
 800df6e:	613c      	str	r4, [r7, #16]
 800df70:	4630      	mov	r0, r6
 800df72:	b003      	add	sp, #12
 800df74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df78:	6812      	ldr	r2, [r2, #0]
 800df7a:	3b04      	subs	r3, #4
 800df7c:	2a00      	cmp	r2, #0
 800df7e:	d1cb      	bne.n	800df18 <quorem+0x9c>
 800df80:	3c01      	subs	r4, #1
 800df82:	e7c6      	b.n	800df12 <quorem+0x96>
 800df84:	6812      	ldr	r2, [r2, #0]
 800df86:	3b04      	subs	r3, #4
 800df88:	2a00      	cmp	r2, #0
 800df8a:	d1f0      	bne.n	800df6e <quorem+0xf2>
 800df8c:	3c01      	subs	r4, #1
 800df8e:	e7eb      	b.n	800df68 <quorem+0xec>
 800df90:	2000      	movs	r0, #0
 800df92:	e7ee      	b.n	800df72 <quorem+0xf6>
 800df94:	0000      	movs	r0, r0
	...

0800df98 <_dtoa_r>:
 800df98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df9c:	4616      	mov	r6, r2
 800df9e:	461f      	mov	r7, r3
 800dfa0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dfa2:	b099      	sub	sp, #100	; 0x64
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800dfaa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800dfae:	b974      	cbnz	r4, 800dfce <_dtoa_r+0x36>
 800dfb0:	2010      	movs	r0, #16
 800dfb2:	f7ff f855 	bl	800d060 <malloc>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	6268      	str	r0, [r5, #36]	; 0x24
 800dfba:	b920      	cbnz	r0, 800dfc6 <_dtoa_r+0x2e>
 800dfbc:	21ea      	movs	r1, #234	; 0xea
 800dfbe:	4ba8      	ldr	r3, [pc, #672]	; (800e260 <_dtoa_r+0x2c8>)
 800dfc0:	48a8      	ldr	r0, [pc, #672]	; (800e264 <_dtoa_r+0x2cc>)
 800dfc2:	f001 fe9d 	bl	800fd00 <__assert_func>
 800dfc6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfca:	6004      	str	r4, [r0, #0]
 800dfcc:	60c4      	str	r4, [r0, #12]
 800dfce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dfd0:	6819      	ldr	r1, [r3, #0]
 800dfd2:	b151      	cbz	r1, 800dfea <_dtoa_r+0x52>
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	4093      	lsls	r3, r2
 800dfda:	604a      	str	r2, [r1, #4]
 800dfdc:	608b      	str	r3, [r1, #8]
 800dfde:	4628      	mov	r0, r5
 800dfe0:	f001 f842 	bl	800f068 <_Bfree>
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dfe8:	601a      	str	r2, [r3, #0]
 800dfea:	1e3b      	subs	r3, r7, #0
 800dfec:	bfaf      	iteee	ge
 800dfee:	2300      	movge	r3, #0
 800dff0:	2201      	movlt	r2, #1
 800dff2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dff6:	9305      	strlt	r3, [sp, #20]
 800dff8:	bfa8      	it	ge
 800dffa:	f8c8 3000 	strge.w	r3, [r8]
 800dffe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e002:	4b99      	ldr	r3, [pc, #612]	; (800e268 <_dtoa_r+0x2d0>)
 800e004:	bfb8      	it	lt
 800e006:	f8c8 2000 	strlt.w	r2, [r8]
 800e00a:	ea33 0309 	bics.w	r3, r3, r9
 800e00e:	d119      	bne.n	800e044 <_dtoa_r+0xac>
 800e010:	f242 730f 	movw	r3, #9999	; 0x270f
 800e014:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e016:	6013      	str	r3, [r2, #0]
 800e018:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e01c:	4333      	orrs	r3, r6
 800e01e:	f000 857f 	beq.w	800eb20 <_dtoa_r+0xb88>
 800e022:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e024:	b953      	cbnz	r3, 800e03c <_dtoa_r+0xa4>
 800e026:	4b91      	ldr	r3, [pc, #580]	; (800e26c <_dtoa_r+0x2d4>)
 800e028:	e022      	b.n	800e070 <_dtoa_r+0xd8>
 800e02a:	4b91      	ldr	r3, [pc, #580]	; (800e270 <_dtoa_r+0x2d8>)
 800e02c:	9303      	str	r3, [sp, #12]
 800e02e:	3308      	adds	r3, #8
 800e030:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e032:	6013      	str	r3, [r2, #0]
 800e034:	9803      	ldr	r0, [sp, #12]
 800e036:	b019      	add	sp, #100	; 0x64
 800e038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03c:	4b8b      	ldr	r3, [pc, #556]	; (800e26c <_dtoa_r+0x2d4>)
 800e03e:	9303      	str	r3, [sp, #12]
 800e040:	3303      	adds	r3, #3
 800e042:	e7f5      	b.n	800e030 <_dtoa_r+0x98>
 800e044:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e048:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800e04c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e050:	2200      	movs	r2, #0
 800e052:	2300      	movs	r3, #0
 800e054:	f7f2 fca8 	bl	80009a8 <__aeabi_dcmpeq>
 800e058:	4680      	mov	r8, r0
 800e05a:	b158      	cbz	r0, 800e074 <_dtoa_r+0xdc>
 800e05c:	2301      	movs	r3, #1
 800e05e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e060:	6013      	str	r3, [r2, #0]
 800e062:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e064:	2b00      	cmp	r3, #0
 800e066:	f000 8558 	beq.w	800eb1a <_dtoa_r+0xb82>
 800e06a:	4882      	ldr	r0, [pc, #520]	; (800e274 <_dtoa_r+0x2dc>)
 800e06c:	6018      	str	r0, [r3, #0]
 800e06e:	1e43      	subs	r3, r0, #1
 800e070:	9303      	str	r3, [sp, #12]
 800e072:	e7df      	b.n	800e034 <_dtoa_r+0x9c>
 800e074:	ab16      	add	r3, sp, #88	; 0x58
 800e076:	9301      	str	r3, [sp, #4]
 800e078:	ab17      	add	r3, sp, #92	; 0x5c
 800e07a:	9300      	str	r3, [sp, #0]
 800e07c:	4628      	mov	r0, r5
 800e07e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e082:	f001 fad7 	bl	800f634 <__d2b>
 800e086:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e08a:	4683      	mov	fp, r0
 800e08c:	2c00      	cmp	r4, #0
 800e08e:	d07f      	beq.n	800e190 <_dtoa_r+0x1f8>
 800e090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e096:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e09a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e09e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e0a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e0a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	4b72      	ldr	r3, [pc, #456]	; (800e278 <_dtoa_r+0x2e0>)
 800e0ae:	f7f2 f85b 	bl	8000168 <__aeabi_dsub>
 800e0b2:	a365      	add	r3, pc, #404	; (adr r3, 800e248 <_dtoa_r+0x2b0>)
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	f7f2 fa0e 	bl	80004d8 <__aeabi_dmul>
 800e0bc:	a364      	add	r3, pc, #400	; (adr r3, 800e250 <_dtoa_r+0x2b8>)
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	f7f2 f853 	bl	800016c <__adddf3>
 800e0c6:	4606      	mov	r6, r0
 800e0c8:	4620      	mov	r0, r4
 800e0ca:	460f      	mov	r7, r1
 800e0cc:	f7f2 f99a 	bl	8000404 <__aeabi_i2d>
 800e0d0:	a361      	add	r3, pc, #388	; (adr r3, 800e258 <_dtoa_r+0x2c0>)
 800e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d6:	f7f2 f9ff 	bl	80004d8 <__aeabi_dmul>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4630      	mov	r0, r6
 800e0e0:	4639      	mov	r1, r7
 800e0e2:	f7f2 f843 	bl	800016c <__adddf3>
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	460f      	mov	r7, r1
 800e0ea:	f7f2 fca5 	bl	8000a38 <__aeabi_d2iz>
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	4682      	mov	sl, r0
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	4639      	mov	r1, r7
 800e0f8:	f7f2 fc60 	bl	80009bc <__aeabi_dcmplt>
 800e0fc:	b148      	cbz	r0, 800e112 <_dtoa_r+0x17a>
 800e0fe:	4650      	mov	r0, sl
 800e100:	f7f2 f980 	bl	8000404 <__aeabi_i2d>
 800e104:	4632      	mov	r2, r6
 800e106:	463b      	mov	r3, r7
 800e108:	f7f2 fc4e 	bl	80009a8 <__aeabi_dcmpeq>
 800e10c:	b908      	cbnz	r0, 800e112 <_dtoa_r+0x17a>
 800e10e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e112:	f1ba 0f16 	cmp.w	sl, #22
 800e116:	d858      	bhi.n	800e1ca <_dtoa_r+0x232>
 800e118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e11c:	4b57      	ldr	r3, [pc, #348]	; (800e27c <_dtoa_r+0x2e4>)
 800e11e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e126:	f7f2 fc49 	bl	80009bc <__aeabi_dcmplt>
 800e12a:	2800      	cmp	r0, #0
 800e12c:	d04f      	beq.n	800e1ce <_dtoa_r+0x236>
 800e12e:	2300      	movs	r3, #0
 800e130:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e134:	930f      	str	r3, [sp, #60]	; 0x3c
 800e136:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e138:	1b1c      	subs	r4, r3, r4
 800e13a:	1e63      	subs	r3, r4, #1
 800e13c:	9309      	str	r3, [sp, #36]	; 0x24
 800e13e:	bf49      	itett	mi
 800e140:	f1c4 0301 	rsbmi	r3, r4, #1
 800e144:	2300      	movpl	r3, #0
 800e146:	9306      	strmi	r3, [sp, #24]
 800e148:	2300      	movmi	r3, #0
 800e14a:	bf54      	ite	pl
 800e14c:	9306      	strpl	r3, [sp, #24]
 800e14e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e150:	f1ba 0f00 	cmp.w	sl, #0
 800e154:	db3d      	blt.n	800e1d2 <_dtoa_r+0x23a>
 800e156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e158:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e15c:	4453      	add	r3, sl
 800e15e:	9309      	str	r3, [sp, #36]	; 0x24
 800e160:	2300      	movs	r3, #0
 800e162:	930a      	str	r3, [sp, #40]	; 0x28
 800e164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e166:	2b09      	cmp	r3, #9
 800e168:	f200 808c 	bhi.w	800e284 <_dtoa_r+0x2ec>
 800e16c:	2b05      	cmp	r3, #5
 800e16e:	bfc4      	itt	gt
 800e170:	3b04      	subgt	r3, #4
 800e172:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e176:	bfc8      	it	gt
 800e178:	2400      	movgt	r4, #0
 800e17a:	f1a3 0302 	sub.w	r3, r3, #2
 800e17e:	bfd8      	it	le
 800e180:	2401      	movle	r4, #1
 800e182:	2b03      	cmp	r3, #3
 800e184:	f200 808a 	bhi.w	800e29c <_dtoa_r+0x304>
 800e188:	e8df f003 	tbb	[pc, r3]
 800e18c:	5b4d4f2d 	.word	0x5b4d4f2d
 800e190:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e194:	441c      	add	r4, r3
 800e196:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e19a:	2b20      	cmp	r3, #32
 800e19c:	bfc3      	ittte	gt
 800e19e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e1a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e1a6:	fa09 f303 	lslgt.w	r3, r9, r3
 800e1aa:	f1c3 0320 	rsble	r3, r3, #32
 800e1ae:	bfc6      	itte	gt
 800e1b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e1b4:	4318      	orrgt	r0, r3
 800e1b6:	fa06 f003 	lslle.w	r0, r6, r3
 800e1ba:	f7f2 f913 	bl	80003e4 <__aeabi_ui2d>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e1c4:	3c01      	subs	r4, #1
 800e1c6:	9313      	str	r3, [sp, #76]	; 0x4c
 800e1c8:	e76f      	b.n	800e0aa <_dtoa_r+0x112>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e7b2      	b.n	800e134 <_dtoa_r+0x19c>
 800e1ce:	900f      	str	r0, [sp, #60]	; 0x3c
 800e1d0:	e7b1      	b.n	800e136 <_dtoa_r+0x19e>
 800e1d2:	9b06      	ldr	r3, [sp, #24]
 800e1d4:	eba3 030a 	sub.w	r3, r3, sl
 800e1d8:	9306      	str	r3, [sp, #24]
 800e1da:	f1ca 0300 	rsb	r3, sl, #0
 800e1de:	930a      	str	r3, [sp, #40]	; 0x28
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	930e      	str	r3, [sp, #56]	; 0x38
 800e1e4:	e7be      	b.n	800e164 <_dtoa_r+0x1cc>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	dc58      	bgt.n	800e2a2 <_dtoa_r+0x30a>
 800e1f0:	f04f 0901 	mov.w	r9, #1
 800e1f4:	464b      	mov	r3, r9
 800e1f6:	f8cd 9020 	str.w	r9, [sp, #32]
 800e1fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800e1fe:	2200      	movs	r2, #0
 800e200:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e202:	6042      	str	r2, [r0, #4]
 800e204:	2204      	movs	r2, #4
 800e206:	f102 0614 	add.w	r6, r2, #20
 800e20a:	429e      	cmp	r6, r3
 800e20c:	6841      	ldr	r1, [r0, #4]
 800e20e:	d94e      	bls.n	800e2ae <_dtoa_r+0x316>
 800e210:	4628      	mov	r0, r5
 800e212:	f000 fee9 	bl	800efe8 <_Balloc>
 800e216:	9003      	str	r0, [sp, #12]
 800e218:	2800      	cmp	r0, #0
 800e21a:	d14c      	bne.n	800e2b6 <_dtoa_r+0x31e>
 800e21c:	4602      	mov	r2, r0
 800e21e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e222:	4b17      	ldr	r3, [pc, #92]	; (800e280 <_dtoa_r+0x2e8>)
 800e224:	e6cc      	b.n	800dfc0 <_dtoa_r+0x28>
 800e226:	2301      	movs	r3, #1
 800e228:	e7de      	b.n	800e1e8 <_dtoa_r+0x250>
 800e22a:	2300      	movs	r3, #0
 800e22c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e22e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e230:	eb0a 0903 	add.w	r9, sl, r3
 800e234:	f109 0301 	add.w	r3, r9, #1
 800e238:	2b01      	cmp	r3, #1
 800e23a:	9308      	str	r3, [sp, #32]
 800e23c:	bfb8      	it	lt
 800e23e:	2301      	movlt	r3, #1
 800e240:	e7dd      	b.n	800e1fe <_dtoa_r+0x266>
 800e242:	2301      	movs	r3, #1
 800e244:	e7f2      	b.n	800e22c <_dtoa_r+0x294>
 800e246:	bf00      	nop
 800e248:	636f4361 	.word	0x636f4361
 800e24c:	3fd287a7 	.word	0x3fd287a7
 800e250:	8b60c8b3 	.word	0x8b60c8b3
 800e254:	3fc68a28 	.word	0x3fc68a28
 800e258:	509f79fb 	.word	0x509f79fb
 800e25c:	3fd34413 	.word	0x3fd34413
 800e260:	080122c9 	.word	0x080122c9
 800e264:	080122e0 	.word	0x080122e0
 800e268:	7ff00000 	.word	0x7ff00000
 800e26c:	080122c5 	.word	0x080122c5
 800e270:	080122bc 	.word	0x080122bc
 800e274:	08012299 	.word	0x08012299
 800e278:	3ff80000 	.word	0x3ff80000
 800e27c:	08012430 	.word	0x08012430
 800e280:	0801233b 	.word	0x0801233b
 800e284:	2401      	movs	r4, #1
 800e286:	2300      	movs	r3, #0
 800e288:	940b      	str	r4, [sp, #44]	; 0x2c
 800e28a:	9322      	str	r3, [sp, #136]	; 0x88
 800e28c:	f04f 39ff 	mov.w	r9, #4294967295
 800e290:	2200      	movs	r2, #0
 800e292:	2312      	movs	r3, #18
 800e294:	f8cd 9020 	str.w	r9, [sp, #32]
 800e298:	9223      	str	r2, [sp, #140]	; 0x8c
 800e29a:	e7b0      	b.n	800e1fe <_dtoa_r+0x266>
 800e29c:	2301      	movs	r3, #1
 800e29e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2a0:	e7f4      	b.n	800e28c <_dtoa_r+0x2f4>
 800e2a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800e2a6:	464b      	mov	r3, r9
 800e2a8:	f8cd 9020 	str.w	r9, [sp, #32]
 800e2ac:	e7a7      	b.n	800e1fe <_dtoa_r+0x266>
 800e2ae:	3101      	adds	r1, #1
 800e2b0:	6041      	str	r1, [r0, #4]
 800e2b2:	0052      	lsls	r2, r2, #1
 800e2b4:	e7a7      	b.n	800e206 <_dtoa_r+0x26e>
 800e2b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e2b8:	9a03      	ldr	r2, [sp, #12]
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	9b08      	ldr	r3, [sp, #32]
 800e2be:	2b0e      	cmp	r3, #14
 800e2c0:	f200 80a8 	bhi.w	800e414 <_dtoa_r+0x47c>
 800e2c4:	2c00      	cmp	r4, #0
 800e2c6:	f000 80a5 	beq.w	800e414 <_dtoa_r+0x47c>
 800e2ca:	f1ba 0f00 	cmp.w	sl, #0
 800e2ce:	dd34      	ble.n	800e33a <_dtoa_r+0x3a2>
 800e2d0:	4a9a      	ldr	r2, [pc, #616]	; (800e53c <_dtoa_r+0x5a4>)
 800e2d2:	f00a 030f 	and.w	r3, sl, #15
 800e2d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e2da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e2de:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e2e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e2e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800e2ea:	d016      	beq.n	800e31a <_dtoa_r+0x382>
 800e2ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e2f0:	4b93      	ldr	r3, [pc, #588]	; (800e540 <_dtoa_r+0x5a8>)
 800e2f2:	2703      	movs	r7, #3
 800e2f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2f8:	f7f2 fa18 	bl	800072c <__aeabi_ddiv>
 800e2fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e300:	f004 040f 	and.w	r4, r4, #15
 800e304:	4e8e      	ldr	r6, [pc, #568]	; (800e540 <_dtoa_r+0x5a8>)
 800e306:	b954      	cbnz	r4, 800e31e <_dtoa_r+0x386>
 800e308:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e30c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e310:	f7f2 fa0c 	bl	800072c <__aeabi_ddiv>
 800e314:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e318:	e029      	b.n	800e36e <_dtoa_r+0x3d6>
 800e31a:	2702      	movs	r7, #2
 800e31c:	e7f2      	b.n	800e304 <_dtoa_r+0x36c>
 800e31e:	07e1      	lsls	r1, r4, #31
 800e320:	d508      	bpl.n	800e334 <_dtoa_r+0x39c>
 800e322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e326:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e32a:	f7f2 f8d5 	bl	80004d8 <__aeabi_dmul>
 800e32e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e332:	3701      	adds	r7, #1
 800e334:	1064      	asrs	r4, r4, #1
 800e336:	3608      	adds	r6, #8
 800e338:	e7e5      	b.n	800e306 <_dtoa_r+0x36e>
 800e33a:	f000 80a5 	beq.w	800e488 <_dtoa_r+0x4f0>
 800e33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e342:	f1ca 0400 	rsb	r4, sl, #0
 800e346:	4b7d      	ldr	r3, [pc, #500]	; (800e53c <_dtoa_r+0x5a4>)
 800e348:	f004 020f 	and.w	r2, r4, #15
 800e34c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e354:	f7f2 f8c0 	bl	80004d8 <__aeabi_dmul>
 800e358:	2702      	movs	r7, #2
 800e35a:	2300      	movs	r3, #0
 800e35c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e360:	4e77      	ldr	r6, [pc, #476]	; (800e540 <_dtoa_r+0x5a8>)
 800e362:	1124      	asrs	r4, r4, #4
 800e364:	2c00      	cmp	r4, #0
 800e366:	f040 8084 	bne.w	800e472 <_dtoa_r+0x4da>
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1d2      	bne.n	800e314 <_dtoa_r+0x37c>
 800e36e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 808b 	beq.w	800e48c <_dtoa_r+0x4f4>
 800e376:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e37a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e37e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e382:	2200      	movs	r2, #0
 800e384:	4b6f      	ldr	r3, [pc, #444]	; (800e544 <_dtoa_r+0x5ac>)
 800e386:	f7f2 fb19 	bl	80009bc <__aeabi_dcmplt>
 800e38a:	2800      	cmp	r0, #0
 800e38c:	d07e      	beq.n	800e48c <_dtoa_r+0x4f4>
 800e38e:	9b08      	ldr	r3, [sp, #32]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d07b      	beq.n	800e48c <_dtoa_r+0x4f4>
 800e394:	f1b9 0f00 	cmp.w	r9, #0
 800e398:	dd38      	ble.n	800e40c <_dtoa_r+0x474>
 800e39a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e39e:	2200      	movs	r2, #0
 800e3a0:	4b69      	ldr	r3, [pc, #420]	; (800e548 <_dtoa_r+0x5b0>)
 800e3a2:	f7f2 f899 	bl	80004d8 <__aeabi_dmul>
 800e3a6:	464c      	mov	r4, r9
 800e3a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3ac:	f10a 38ff 	add.w	r8, sl, #4294967295
 800e3b0:	3701      	adds	r7, #1
 800e3b2:	4638      	mov	r0, r7
 800e3b4:	f7f2 f826 	bl	8000404 <__aeabi_i2d>
 800e3b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3bc:	f7f2 f88c 	bl	80004d8 <__aeabi_dmul>
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	4b62      	ldr	r3, [pc, #392]	; (800e54c <_dtoa_r+0x5b4>)
 800e3c4:	f7f1 fed2 	bl	800016c <__adddf3>
 800e3c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e3cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e3d0:	9611      	str	r6, [sp, #68]	; 0x44
 800e3d2:	2c00      	cmp	r4, #0
 800e3d4:	d15d      	bne.n	800e492 <_dtoa_r+0x4fa>
 800e3d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	4b5c      	ldr	r3, [pc, #368]	; (800e550 <_dtoa_r+0x5b8>)
 800e3de:	f7f1 fec3 	bl	8000168 <__aeabi_dsub>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3ea:	4633      	mov	r3, r6
 800e3ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e3ee:	f7f2 fb03 	bl	80009f8 <__aeabi_dcmpgt>
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	f040 829c 	bne.w	800e930 <_dtoa_r+0x998>
 800e3f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e3fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e402:	f7f2 fadb 	bl	80009bc <__aeabi_dcmplt>
 800e406:	2800      	cmp	r0, #0
 800e408:	f040 8290 	bne.w	800e92c <_dtoa_r+0x994>
 800e40c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800e410:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e414:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e416:	2b00      	cmp	r3, #0
 800e418:	f2c0 8152 	blt.w	800e6c0 <_dtoa_r+0x728>
 800e41c:	f1ba 0f0e 	cmp.w	sl, #14
 800e420:	f300 814e 	bgt.w	800e6c0 <_dtoa_r+0x728>
 800e424:	4b45      	ldr	r3, [pc, #276]	; (800e53c <_dtoa_r+0x5a4>)
 800e426:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e42a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e42e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e432:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e434:	2b00      	cmp	r3, #0
 800e436:	f280 80db 	bge.w	800e5f0 <_dtoa_r+0x658>
 800e43a:	9b08      	ldr	r3, [sp, #32]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f300 80d7 	bgt.w	800e5f0 <_dtoa_r+0x658>
 800e442:	f040 8272 	bne.w	800e92a <_dtoa_r+0x992>
 800e446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e44a:	2200      	movs	r2, #0
 800e44c:	4b40      	ldr	r3, [pc, #256]	; (800e550 <_dtoa_r+0x5b8>)
 800e44e:	f7f2 f843 	bl	80004d8 <__aeabi_dmul>
 800e452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e456:	f7f2 fac5 	bl	80009e4 <__aeabi_dcmpge>
 800e45a:	9c08      	ldr	r4, [sp, #32]
 800e45c:	4626      	mov	r6, r4
 800e45e:	2800      	cmp	r0, #0
 800e460:	f040 8248 	bne.w	800e8f4 <_dtoa_r+0x95c>
 800e464:	2331      	movs	r3, #49	; 0x31
 800e466:	9f03      	ldr	r7, [sp, #12]
 800e468:	f10a 0a01 	add.w	sl, sl, #1
 800e46c:	f807 3b01 	strb.w	r3, [r7], #1
 800e470:	e244      	b.n	800e8fc <_dtoa_r+0x964>
 800e472:	07e2      	lsls	r2, r4, #31
 800e474:	d505      	bpl.n	800e482 <_dtoa_r+0x4ea>
 800e476:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e47a:	f7f2 f82d 	bl	80004d8 <__aeabi_dmul>
 800e47e:	2301      	movs	r3, #1
 800e480:	3701      	adds	r7, #1
 800e482:	1064      	asrs	r4, r4, #1
 800e484:	3608      	adds	r6, #8
 800e486:	e76d      	b.n	800e364 <_dtoa_r+0x3cc>
 800e488:	2702      	movs	r7, #2
 800e48a:	e770      	b.n	800e36e <_dtoa_r+0x3d6>
 800e48c:	46d0      	mov	r8, sl
 800e48e:	9c08      	ldr	r4, [sp, #32]
 800e490:	e78f      	b.n	800e3b2 <_dtoa_r+0x41a>
 800e492:	9903      	ldr	r1, [sp, #12]
 800e494:	4b29      	ldr	r3, [pc, #164]	; (800e53c <_dtoa_r+0x5a4>)
 800e496:	4421      	add	r1, r4
 800e498:	9112      	str	r1, [sp, #72]	; 0x48
 800e49a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e49c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e4a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4a8:	2900      	cmp	r1, #0
 800e4aa:	d055      	beq.n	800e558 <_dtoa_r+0x5c0>
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	4929      	ldr	r1, [pc, #164]	; (800e554 <_dtoa_r+0x5bc>)
 800e4b0:	f7f2 f93c 	bl	800072c <__aeabi_ddiv>
 800e4b4:	463b      	mov	r3, r7
 800e4b6:	4632      	mov	r2, r6
 800e4b8:	f7f1 fe56 	bl	8000168 <__aeabi_dsub>
 800e4bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e4c0:	9f03      	ldr	r7, [sp, #12]
 800e4c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4c6:	f7f2 fab7 	bl	8000a38 <__aeabi_d2iz>
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	f7f1 ff9a 	bl	8000404 <__aeabi_i2d>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4d8:	f7f1 fe46 	bl	8000168 <__aeabi_dsub>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	3430      	adds	r4, #48	; 0x30
 800e4e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e4ea:	f807 4b01 	strb.w	r4, [r7], #1
 800e4ee:	f7f2 fa65 	bl	80009bc <__aeabi_dcmplt>
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d174      	bne.n	800e5e0 <_dtoa_r+0x648>
 800e4f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	4911      	ldr	r1, [pc, #68]	; (800e544 <_dtoa_r+0x5ac>)
 800e4fe:	f7f1 fe33 	bl	8000168 <__aeabi_dsub>
 800e502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e506:	f7f2 fa59 	bl	80009bc <__aeabi_dcmplt>
 800e50a:	2800      	cmp	r0, #0
 800e50c:	f040 80b7 	bne.w	800e67e <_dtoa_r+0x6e6>
 800e510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e512:	429f      	cmp	r7, r3
 800e514:	f43f af7a 	beq.w	800e40c <_dtoa_r+0x474>
 800e518:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e51c:	2200      	movs	r2, #0
 800e51e:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <_dtoa_r+0x5b0>)
 800e520:	f7f1 ffda 	bl	80004d8 <__aeabi_dmul>
 800e524:	2200      	movs	r2, #0
 800e526:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e52a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e52e:	4b06      	ldr	r3, [pc, #24]	; (800e548 <_dtoa_r+0x5b0>)
 800e530:	f7f1 ffd2 	bl	80004d8 <__aeabi_dmul>
 800e534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e538:	e7c3      	b.n	800e4c2 <_dtoa_r+0x52a>
 800e53a:	bf00      	nop
 800e53c:	08012430 	.word	0x08012430
 800e540:	08012408 	.word	0x08012408
 800e544:	3ff00000 	.word	0x3ff00000
 800e548:	40240000 	.word	0x40240000
 800e54c:	401c0000 	.word	0x401c0000
 800e550:	40140000 	.word	0x40140000
 800e554:	3fe00000 	.word	0x3fe00000
 800e558:	4630      	mov	r0, r6
 800e55a:	4639      	mov	r1, r7
 800e55c:	f7f1 ffbc 	bl	80004d8 <__aeabi_dmul>
 800e560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e562:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e566:	9c03      	ldr	r4, [sp, #12]
 800e568:	9314      	str	r3, [sp, #80]	; 0x50
 800e56a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e56e:	f7f2 fa63 	bl	8000a38 <__aeabi_d2iz>
 800e572:	9015      	str	r0, [sp, #84]	; 0x54
 800e574:	f7f1 ff46 	bl	8000404 <__aeabi_i2d>
 800e578:	4602      	mov	r2, r0
 800e57a:	460b      	mov	r3, r1
 800e57c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e580:	f7f1 fdf2 	bl	8000168 <__aeabi_dsub>
 800e584:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e586:	4606      	mov	r6, r0
 800e588:	3330      	adds	r3, #48	; 0x30
 800e58a:	f804 3b01 	strb.w	r3, [r4], #1
 800e58e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e590:	460f      	mov	r7, r1
 800e592:	429c      	cmp	r4, r3
 800e594:	f04f 0200 	mov.w	r2, #0
 800e598:	d124      	bne.n	800e5e4 <_dtoa_r+0x64c>
 800e59a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e59e:	4bb0      	ldr	r3, [pc, #704]	; (800e860 <_dtoa_r+0x8c8>)
 800e5a0:	f7f1 fde4 	bl	800016c <__adddf3>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	4639      	mov	r1, r7
 800e5ac:	f7f2 fa24 	bl	80009f8 <__aeabi_dcmpgt>
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d163      	bne.n	800e67c <_dtoa_r+0x6e4>
 800e5b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	49a9      	ldr	r1, [pc, #676]	; (800e860 <_dtoa_r+0x8c8>)
 800e5bc:	f7f1 fdd4 	bl	8000168 <__aeabi_dsub>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	f7f2 f9f8 	bl	80009bc <__aeabi_dcmplt>
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	f43f af1d 	beq.w	800e40c <_dtoa_r+0x474>
 800e5d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e5d4:	1e7b      	subs	r3, r7, #1
 800e5d6:	9314      	str	r3, [sp, #80]	; 0x50
 800e5d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e5dc:	2b30      	cmp	r3, #48	; 0x30
 800e5de:	d0f8      	beq.n	800e5d2 <_dtoa_r+0x63a>
 800e5e0:	46c2      	mov	sl, r8
 800e5e2:	e03b      	b.n	800e65c <_dtoa_r+0x6c4>
 800e5e4:	4b9f      	ldr	r3, [pc, #636]	; (800e864 <_dtoa_r+0x8cc>)
 800e5e6:	f7f1 ff77 	bl	80004d8 <__aeabi_dmul>
 800e5ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5ee:	e7bc      	b.n	800e56a <_dtoa_r+0x5d2>
 800e5f0:	9f03      	ldr	r7, [sp, #12]
 800e5f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e5f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5fa:	4640      	mov	r0, r8
 800e5fc:	4649      	mov	r1, r9
 800e5fe:	f7f2 f895 	bl	800072c <__aeabi_ddiv>
 800e602:	f7f2 fa19 	bl	8000a38 <__aeabi_d2iz>
 800e606:	4604      	mov	r4, r0
 800e608:	f7f1 fefc 	bl	8000404 <__aeabi_i2d>
 800e60c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e610:	f7f1 ff62 	bl	80004d8 <__aeabi_dmul>
 800e614:	4602      	mov	r2, r0
 800e616:	460b      	mov	r3, r1
 800e618:	4640      	mov	r0, r8
 800e61a:	4649      	mov	r1, r9
 800e61c:	f7f1 fda4 	bl	8000168 <__aeabi_dsub>
 800e620:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e624:	f807 6b01 	strb.w	r6, [r7], #1
 800e628:	9e03      	ldr	r6, [sp, #12]
 800e62a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e62e:	1bbe      	subs	r6, r7, r6
 800e630:	45b4      	cmp	ip, r6
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	d136      	bne.n	800e6a6 <_dtoa_r+0x70e>
 800e638:	f7f1 fd98 	bl	800016c <__adddf3>
 800e63c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e640:	4680      	mov	r8, r0
 800e642:	4689      	mov	r9, r1
 800e644:	f7f2 f9d8 	bl	80009f8 <__aeabi_dcmpgt>
 800e648:	bb58      	cbnz	r0, 800e6a2 <_dtoa_r+0x70a>
 800e64a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e64e:	4640      	mov	r0, r8
 800e650:	4649      	mov	r1, r9
 800e652:	f7f2 f9a9 	bl	80009a8 <__aeabi_dcmpeq>
 800e656:	b108      	cbz	r0, 800e65c <_dtoa_r+0x6c4>
 800e658:	07e1      	lsls	r1, r4, #31
 800e65a:	d422      	bmi.n	800e6a2 <_dtoa_r+0x70a>
 800e65c:	4628      	mov	r0, r5
 800e65e:	4659      	mov	r1, fp
 800e660:	f000 fd02 	bl	800f068 <_Bfree>
 800e664:	2300      	movs	r3, #0
 800e666:	703b      	strb	r3, [r7, #0]
 800e668:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e66a:	f10a 0001 	add.w	r0, sl, #1
 800e66e:	6018      	str	r0, [r3, #0]
 800e670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e672:	2b00      	cmp	r3, #0
 800e674:	f43f acde 	beq.w	800e034 <_dtoa_r+0x9c>
 800e678:	601f      	str	r7, [r3, #0]
 800e67a:	e4db      	b.n	800e034 <_dtoa_r+0x9c>
 800e67c:	4627      	mov	r7, r4
 800e67e:	463b      	mov	r3, r7
 800e680:	461f      	mov	r7, r3
 800e682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e686:	2a39      	cmp	r2, #57	; 0x39
 800e688:	d107      	bne.n	800e69a <_dtoa_r+0x702>
 800e68a:	9a03      	ldr	r2, [sp, #12]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d1f7      	bne.n	800e680 <_dtoa_r+0x6e8>
 800e690:	2230      	movs	r2, #48	; 0x30
 800e692:	9903      	ldr	r1, [sp, #12]
 800e694:	f108 0801 	add.w	r8, r8, #1
 800e698:	700a      	strb	r2, [r1, #0]
 800e69a:	781a      	ldrb	r2, [r3, #0]
 800e69c:	3201      	adds	r2, #1
 800e69e:	701a      	strb	r2, [r3, #0]
 800e6a0:	e79e      	b.n	800e5e0 <_dtoa_r+0x648>
 800e6a2:	46d0      	mov	r8, sl
 800e6a4:	e7eb      	b.n	800e67e <_dtoa_r+0x6e6>
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	4b6e      	ldr	r3, [pc, #440]	; (800e864 <_dtoa_r+0x8cc>)
 800e6aa:	f7f1 ff15 	bl	80004d8 <__aeabi_dmul>
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	4680      	mov	r8, r0
 800e6b4:	4689      	mov	r9, r1
 800e6b6:	f7f2 f977 	bl	80009a8 <__aeabi_dcmpeq>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d09b      	beq.n	800e5f6 <_dtoa_r+0x65e>
 800e6be:	e7cd      	b.n	800e65c <_dtoa_r+0x6c4>
 800e6c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6c2:	2a00      	cmp	r2, #0
 800e6c4:	f000 80d0 	beq.w	800e868 <_dtoa_r+0x8d0>
 800e6c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e6ca:	2a01      	cmp	r2, #1
 800e6cc:	f300 80ae 	bgt.w	800e82c <_dtoa_r+0x894>
 800e6d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e6d2:	2a00      	cmp	r2, #0
 800e6d4:	f000 80a6 	beq.w	800e824 <_dtoa_r+0x88c>
 800e6d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e6dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e6de:	9f06      	ldr	r7, [sp, #24]
 800e6e0:	9a06      	ldr	r2, [sp, #24]
 800e6e2:	2101      	movs	r1, #1
 800e6e4:	441a      	add	r2, r3
 800e6e6:	9206      	str	r2, [sp, #24]
 800e6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	441a      	add	r2, r3
 800e6ee:	9209      	str	r2, [sp, #36]	; 0x24
 800e6f0:	f000 fd70 	bl	800f1d4 <__i2b>
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	2f00      	cmp	r7, #0
 800e6f8:	dd0c      	ble.n	800e714 <_dtoa_r+0x77c>
 800e6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dd09      	ble.n	800e714 <_dtoa_r+0x77c>
 800e700:	42bb      	cmp	r3, r7
 800e702:	bfa8      	it	ge
 800e704:	463b      	movge	r3, r7
 800e706:	9a06      	ldr	r2, [sp, #24]
 800e708:	1aff      	subs	r7, r7, r3
 800e70a:	1ad2      	subs	r2, r2, r3
 800e70c:	9206      	str	r2, [sp, #24]
 800e70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	9309      	str	r3, [sp, #36]	; 0x24
 800e714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e716:	b1f3      	cbz	r3, 800e756 <_dtoa_r+0x7be>
 800e718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 80a8 	beq.w	800e870 <_dtoa_r+0x8d8>
 800e720:	2c00      	cmp	r4, #0
 800e722:	dd10      	ble.n	800e746 <_dtoa_r+0x7ae>
 800e724:	4631      	mov	r1, r6
 800e726:	4622      	mov	r2, r4
 800e728:	4628      	mov	r0, r5
 800e72a:	f000 fe11 	bl	800f350 <__pow5mult>
 800e72e:	465a      	mov	r2, fp
 800e730:	4601      	mov	r1, r0
 800e732:	4606      	mov	r6, r0
 800e734:	4628      	mov	r0, r5
 800e736:	f000 fd63 	bl	800f200 <__multiply>
 800e73a:	4680      	mov	r8, r0
 800e73c:	4659      	mov	r1, fp
 800e73e:	4628      	mov	r0, r5
 800e740:	f000 fc92 	bl	800f068 <_Bfree>
 800e744:	46c3      	mov	fp, r8
 800e746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e748:	1b1a      	subs	r2, r3, r4
 800e74a:	d004      	beq.n	800e756 <_dtoa_r+0x7be>
 800e74c:	4659      	mov	r1, fp
 800e74e:	4628      	mov	r0, r5
 800e750:	f000 fdfe 	bl	800f350 <__pow5mult>
 800e754:	4683      	mov	fp, r0
 800e756:	2101      	movs	r1, #1
 800e758:	4628      	mov	r0, r5
 800e75a:	f000 fd3b 	bl	800f1d4 <__i2b>
 800e75e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e760:	4604      	mov	r4, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	f340 8086 	ble.w	800e874 <_dtoa_r+0x8dc>
 800e768:	461a      	mov	r2, r3
 800e76a:	4601      	mov	r1, r0
 800e76c:	4628      	mov	r0, r5
 800e76e:	f000 fdef 	bl	800f350 <__pow5mult>
 800e772:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e774:	4604      	mov	r4, r0
 800e776:	2b01      	cmp	r3, #1
 800e778:	dd7f      	ble.n	800e87a <_dtoa_r+0x8e2>
 800e77a:	f04f 0800 	mov.w	r8, #0
 800e77e:	6923      	ldr	r3, [r4, #16]
 800e780:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e784:	6918      	ldr	r0, [r3, #16]
 800e786:	f000 fcd7 	bl	800f138 <__hi0bits>
 800e78a:	f1c0 0020 	rsb	r0, r0, #32
 800e78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e790:	4418      	add	r0, r3
 800e792:	f010 001f 	ands.w	r0, r0, #31
 800e796:	f000 8092 	beq.w	800e8be <_dtoa_r+0x926>
 800e79a:	f1c0 0320 	rsb	r3, r0, #32
 800e79e:	2b04      	cmp	r3, #4
 800e7a0:	f340 808a 	ble.w	800e8b8 <_dtoa_r+0x920>
 800e7a4:	f1c0 001c 	rsb	r0, r0, #28
 800e7a8:	9b06      	ldr	r3, [sp, #24]
 800e7aa:	4407      	add	r7, r0
 800e7ac:	4403      	add	r3, r0
 800e7ae:	9306      	str	r3, [sp, #24]
 800e7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7b2:	4403      	add	r3, r0
 800e7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7b6:	9b06      	ldr	r3, [sp, #24]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	dd05      	ble.n	800e7c8 <_dtoa_r+0x830>
 800e7bc:	4659      	mov	r1, fp
 800e7be:	461a      	mov	r2, r3
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	f000 fe1f 	bl	800f404 <__lshift>
 800e7c6:	4683      	mov	fp, r0
 800e7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	dd05      	ble.n	800e7da <_dtoa_r+0x842>
 800e7ce:	4621      	mov	r1, r4
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f000 fe16 	bl	800f404 <__lshift>
 800e7d8:	4604      	mov	r4, r0
 800e7da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d070      	beq.n	800e8c2 <_dtoa_r+0x92a>
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	4658      	mov	r0, fp
 800e7e4:	f000 fe7e 	bl	800f4e4 <__mcmp>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	da6a      	bge.n	800e8c2 <_dtoa_r+0x92a>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	4659      	mov	r1, fp
 800e7f0:	220a      	movs	r2, #10
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	f000 fc5a 	bl	800f0ac <__multadd>
 800e7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7fa:	4683      	mov	fp, r0
 800e7fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e800:	2b00      	cmp	r3, #0
 800e802:	f000 8194 	beq.w	800eb2e <_dtoa_r+0xb96>
 800e806:	4631      	mov	r1, r6
 800e808:	2300      	movs	r3, #0
 800e80a:	220a      	movs	r2, #10
 800e80c:	4628      	mov	r0, r5
 800e80e:	f000 fc4d 	bl	800f0ac <__multadd>
 800e812:	f1b9 0f00 	cmp.w	r9, #0
 800e816:	4606      	mov	r6, r0
 800e818:	f300 8093 	bgt.w	800e942 <_dtoa_r+0x9aa>
 800e81c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e81e:	2b02      	cmp	r3, #2
 800e820:	dc57      	bgt.n	800e8d2 <_dtoa_r+0x93a>
 800e822:	e08e      	b.n	800e942 <_dtoa_r+0x9aa>
 800e824:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e82a:	e757      	b.n	800e6dc <_dtoa_r+0x744>
 800e82c:	9b08      	ldr	r3, [sp, #32]
 800e82e:	1e5c      	subs	r4, r3, #1
 800e830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e832:	42a3      	cmp	r3, r4
 800e834:	bfb7      	itett	lt
 800e836:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e838:	1b1c      	subge	r4, r3, r4
 800e83a:	1ae2      	sublt	r2, r4, r3
 800e83c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e83e:	bfbe      	ittt	lt
 800e840:	940a      	strlt	r4, [sp, #40]	; 0x28
 800e842:	189b      	addlt	r3, r3, r2
 800e844:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e846:	9b08      	ldr	r3, [sp, #32]
 800e848:	bfb8      	it	lt
 800e84a:	2400      	movlt	r4, #0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	bfbb      	ittet	lt
 800e850:	9b06      	ldrlt	r3, [sp, #24]
 800e852:	9a08      	ldrlt	r2, [sp, #32]
 800e854:	9f06      	ldrge	r7, [sp, #24]
 800e856:	1a9f      	sublt	r7, r3, r2
 800e858:	bfac      	ite	ge
 800e85a:	9b08      	ldrge	r3, [sp, #32]
 800e85c:	2300      	movlt	r3, #0
 800e85e:	e73f      	b.n	800e6e0 <_dtoa_r+0x748>
 800e860:	3fe00000 	.word	0x3fe00000
 800e864:	40240000 	.word	0x40240000
 800e868:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e86a:	9f06      	ldr	r7, [sp, #24]
 800e86c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e86e:	e742      	b.n	800e6f6 <_dtoa_r+0x75e>
 800e870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e872:	e76b      	b.n	800e74c <_dtoa_r+0x7b4>
 800e874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e876:	2b01      	cmp	r3, #1
 800e878:	dc19      	bgt.n	800e8ae <_dtoa_r+0x916>
 800e87a:	9b04      	ldr	r3, [sp, #16]
 800e87c:	b9bb      	cbnz	r3, 800e8ae <_dtoa_r+0x916>
 800e87e:	9b05      	ldr	r3, [sp, #20]
 800e880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e884:	b99b      	cbnz	r3, 800e8ae <_dtoa_r+0x916>
 800e886:	9b05      	ldr	r3, [sp, #20]
 800e888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e88c:	0d1b      	lsrs	r3, r3, #20
 800e88e:	051b      	lsls	r3, r3, #20
 800e890:	b183      	cbz	r3, 800e8b4 <_dtoa_r+0x91c>
 800e892:	f04f 0801 	mov.w	r8, #1
 800e896:	9b06      	ldr	r3, [sp, #24]
 800e898:	3301      	adds	r3, #1
 800e89a:	9306      	str	r3, [sp, #24]
 800e89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e89e:	3301      	adds	r3, #1
 800e8a0:	9309      	str	r3, [sp, #36]	; 0x24
 800e8a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	f47f af6a 	bne.w	800e77e <_dtoa_r+0x7e6>
 800e8aa:	2001      	movs	r0, #1
 800e8ac:	e76f      	b.n	800e78e <_dtoa_r+0x7f6>
 800e8ae:	f04f 0800 	mov.w	r8, #0
 800e8b2:	e7f6      	b.n	800e8a2 <_dtoa_r+0x90a>
 800e8b4:	4698      	mov	r8, r3
 800e8b6:	e7f4      	b.n	800e8a2 <_dtoa_r+0x90a>
 800e8b8:	f43f af7d 	beq.w	800e7b6 <_dtoa_r+0x81e>
 800e8bc:	4618      	mov	r0, r3
 800e8be:	301c      	adds	r0, #28
 800e8c0:	e772      	b.n	800e7a8 <_dtoa_r+0x810>
 800e8c2:	9b08      	ldr	r3, [sp, #32]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	dc36      	bgt.n	800e936 <_dtoa_r+0x99e>
 800e8c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	dd33      	ble.n	800e936 <_dtoa_r+0x99e>
 800e8ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8d2:	f1b9 0f00 	cmp.w	r9, #0
 800e8d6:	d10d      	bne.n	800e8f4 <_dtoa_r+0x95c>
 800e8d8:	4621      	mov	r1, r4
 800e8da:	464b      	mov	r3, r9
 800e8dc:	2205      	movs	r2, #5
 800e8de:	4628      	mov	r0, r5
 800e8e0:	f000 fbe4 	bl	800f0ac <__multadd>
 800e8e4:	4601      	mov	r1, r0
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	4658      	mov	r0, fp
 800e8ea:	f000 fdfb 	bl	800f4e4 <__mcmp>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	f73f adb8 	bgt.w	800e464 <_dtoa_r+0x4cc>
 800e8f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e8f6:	9f03      	ldr	r7, [sp, #12]
 800e8f8:	ea6f 0a03 	mvn.w	sl, r3
 800e8fc:	f04f 0800 	mov.w	r8, #0
 800e900:	4621      	mov	r1, r4
 800e902:	4628      	mov	r0, r5
 800e904:	f000 fbb0 	bl	800f068 <_Bfree>
 800e908:	2e00      	cmp	r6, #0
 800e90a:	f43f aea7 	beq.w	800e65c <_dtoa_r+0x6c4>
 800e90e:	f1b8 0f00 	cmp.w	r8, #0
 800e912:	d005      	beq.n	800e920 <_dtoa_r+0x988>
 800e914:	45b0      	cmp	r8, r6
 800e916:	d003      	beq.n	800e920 <_dtoa_r+0x988>
 800e918:	4641      	mov	r1, r8
 800e91a:	4628      	mov	r0, r5
 800e91c:	f000 fba4 	bl	800f068 <_Bfree>
 800e920:	4631      	mov	r1, r6
 800e922:	4628      	mov	r0, r5
 800e924:	f000 fba0 	bl	800f068 <_Bfree>
 800e928:	e698      	b.n	800e65c <_dtoa_r+0x6c4>
 800e92a:	2400      	movs	r4, #0
 800e92c:	4626      	mov	r6, r4
 800e92e:	e7e1      	b.n	800e8f4 <_dtoa_r+0x95c>
 800e930:	46c2      	mov	sl, r8
 800e932:	4626      	mov	r6, r4
 800e934:	e596      	b.n	800e464 <_dtoa_r+0x4cc>
 800e936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 80fd 	beq.w	800eb3c <_dtoa_r+0xba4>
 800e942:	2f00      	cmp	r7, #0
 800e944:	dd05      	ble.n	800e952 <_dtoa_r+0x9ba>
 800e946:	4631      	mov	r1, r6
 800e948:	463a      	mov	r2, r7
 800e94a:	4628      	mov	r0, r5
 800e94c:	f000 fd5a 	bl	800f404 <__lshift>
 800e950:	4606      	mov	r6, r0
 800e952:	f1b8 0f00 	cmp.w	r8, #0
 800e956:	d05c      	beq.n	800ea12 <_dtoa_r+0xa7a>
 800e958:	4628      	mov	r0, r5
 800e95a:	6871      	ldr	r1, [r6, #4]
 800e95c:	f000 fb44 	bl	800efe8 <_Balloc>
 800e960:	4607      	mov	r7, r0
 800e962:	b928      	cbnz	r0, 800e970 <_dtoa_r+0x9d8>
 800e964:	4602      	mov	r2, r0
 800e966:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e96a:	4b7f      	ldr	r3, [pc, #508]	; (800eb68 <_dtoa_r+0xbd0>)
 800e96c:	f7ff bb28 	b.w	800dfc0 <_dtoa_r+0x28>
 800e970:	6932      	ldr	r2, [r6, #16]
 800e972:	f106 010c 	add.w	r1, r6, #12
 800e976:	3202      	adds	r2, #2
 800e978:	0092      	lsls	r2, r2, #2
 800e97a:	300c      	adds	r0, #12
 800e97c:	f7fe fb80 	bl	800d080 <memcpy>
 800e980:	2201      	movs	r2, #1
 800e982:	4639      	mov	r1, r7
 800e984:	4628      	mov	r0, r5
 800e986:	f000 fd3d 	bl	800f404 <__lshift>
 800e98a:	46b0      	mov	r8, r6
 800e98c:	4606      	mov	r6, r0
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	3301      	adds	r3, #1
 800e992:	9308      	str	r3, [sp, #32]
 800e994:	9b03      	ldr	r3, [sp, #12]
 800e996:	444b      	add	r3, r9
 800e998:	930a      	str	r3, [sp, #40]	; 0x28
 800e99a:	9b04      	ldr	r3, [sp, #16]
 800e99c:	f003 0301 	and.w	r3, r3, #1
 800e9a0:	9309      	str	r3, [sp, #36]	; 0x24
 800e9a2:	9b08      	ldr	r3, [sp, #32]
 800e9a4:	4621      	mov	r1, r4
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	4658      	mov	r0, fp
 800e9aa:	9304      	str	r3, [sp, #16]
 800e9ac:	f7ff fa66 	bl	800de7c <quorem>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	4641      	mov	r1, r8
 800e9b4:	3330      	adds	r3, #48	; 0x30
 800e9b6:	9006      	str	r0, [sp, #24]
 800e9b8:	4658      	mov	r0, fp
 800e9ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9bc:	f000 fd92 	bl	800f4e4 <__mcmp>
 800e9c0:	4632      	mov	r2, r6
 800e9c2:	4681      	mov	r9, r0
 800e9c4:	4621      	mov	r1, r4
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f000 fda8 	bl	800f51c <__mdiff>
 800e9cc:	68c2      	ldr	r2, [r0, #12]
 800e9ce:	4607      	mov	r7, r0
 800e9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9d2:	bb02      	cbnz	r2, 800ea16 <_dtoa_r+0xa7e>
 800e9d4:	4601      	mov	r1, r0
 800e9d6:	4658      	mov	r0, fp
 800e9d8:	f000 fd84 	bl	800f4e4 <__mcmp>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9e0:	4639      	mov	r1, r7
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800e9e8:	f000 fb3e 	bl	800f068 <_Bfree>
 800e9ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e9ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9f0:	9f08      	ldr	r7, [sp, #32]
 800e9f2:	ea43 0102 	orr.w	r1, r3, r2
 800e9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9f8:	430b      	orrs	r3, r1
 800e9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9fc:	d10d      	bne.n	800ea1a <_dtoa_r+0xa82>
 800e9fe:	2b39      	cmp	r3, #57	; 0x39
 800ea00:	d029      	beq.n	800ea56 <_dtoa_r+0xabe>
 800ea02:	f1b9 0f00 	cmp.w	r9, #0
 800ea06:	dd01      	ble.n	800ea0c <_dtoa_r+0xa74>
 800ea08:	9b06      	ldr	r3, [sp, #24]
 800ea0a:	3331      	adds	r3, #49	; 0x31
 800ea0c:	9a04      	ldr	r2, [sp, #16]
 800ea0e:	7013      	strb	r3, [r2, #0]
 800ea10:	e776      	b.n	800e900 <_dtoa_r+0x968>
 800ea12:	4630      	mov	r0, r6
 800ea14:	e7b9      	b.n	800e98a <_dtoa_r+0x9f2>
 800ea16:	2201      	movs	r2, #1
 800ea18:	e7e2      	b.n	800e9e0 <_dtoa_r+0xa48>
 800ea1a:	f1b9 0f00 	cmp.w	r9, #0
 800ea1e:	db06      	blt.n	800ea2e <_dtoa_r+0xa96>
 800ea20:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ea22:	ea41 0909 	orr.w	r9, r1, r9
 800ea26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea28:	ea59 0101 	orrs.w	r1, r9, r1
 800ea2c:	d120      	bne.n	800ea70 <_dtoa_r+0xad8>
 800ea2e:	2a00      	cmp	r2, #0
 800ea30:	ddec      	ble.n	800ea0c <_dtoa_r+0xa74>
 800ea32:	4659      	mov	r1, fp
 800ea34:	2201      	movs	r2, #1
 800ea36:	4628      	mov	r0, r5
 800ea38:	9308      	str	r3, [sp, #32]
 800ea3a:	f000 fce3 	bl	800f404 <__lshift>
 800ea3e:	4621      	mov	r1, r4
 800ea40:	4683      	mov	fp, r0
 800ea42:	f000 fd4f 	bl	800f4e4 <__mcmp>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	9b08      	ldr	r3, [sp, #32]
 800ea4a:	dc02      	bgt.n	800ea52 <_dtoa_r+0xaba>
 800ea4c:	d1de      	bne.n	800ea0c <_dtoa_r+0xa74>
 800ea4e:	07da      	lsls	r2, r3, #31
 800ea50:	d5dc      	bpl.n	800ea0c <_dtoa_r+0xa74>
 800ea52:	2b39      	cmp	r3, #57	; 0x39
 800ea54:	d1d8      	bne.n	800ea08 <_dtoa_r+0xa70>
 800ea56:	2339      	movs	r3, #57	; 0x39
 800ea58:	9a04      	ldr	r2, [sp, #16]
 800ea5a:	7013      	strb	r3, [r2, #0]
 800ea5c:	463b      	mov	r3, r7
 800ea5e:	461f      	mov	r7, r3
 800ea60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ea64:	3b01      	subs	r3, #1
 800ea66:	2a39      	cmp	r2, #57	; 0x39
 800ea68:	d050      	beq.n	800eb0c <_dtoa_r+0xb74>
 800ea6a:	3201      	adds	r2, #1
 800ea6c:	701a      	strb	r2, [r3, #0]
 800ea6e:	e747      	b.n	800e900 <_dtoa_r+0x968>
 800ea70:	2a00      	cmp	r2, #0
 800ea72:	dd03      	ble.n	800ea7c <_dtoa_r+0xae4>
 800ea74:	2b39      	cmp	r3, #57	; 0x39
 800ea76:	d0ee      	beq.n	800ea56 <_dtoa_r+0xabe>
 800ea78:	3301      	adds	r3, #1
 800ea7a:	e7c7      	b.n	800ea0c <_dtoa_r+0xa74>
 800ea7c:	9a08      	ldr	r2, [sp, #32]
 800ea7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ea80:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ea84:	428a      	cmp	r2, r1
 800ea86:	d02a      	beq.n	800eade <_dtoa_r+0xb46>
 800ea88:	4659      	mov	r1, fp
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	220a      	movs	r2, #10
 800ea8e:	4628      	mov	r0, r5
 800ea90:	f000 fb0c 	bl	800f0ac <__multadd>
 800ea94:	45b0      	cmp	r8, r6
 800ea96:	4683      	mov	fp, r0
 800ea98:	f04f 0300 	mov.w	r3, #0
 800ea9c:	f04f 020a 	mov.w	r2, #10
 800eaa0:	4641      	mov	r1, r8
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	d107      	bne.n	800eab6 <_dtoa_r+0xb1e>
 800eaa6:	f000 fb01 	bl	800f0ac <__multadd>
 800eaaa:	4680      	mov	r8, r0
 800eaac:	4606      	mov	r6, r0
 800eaae:	9b08      	ldr	r3, [sp, #32]
 800eab0:	3301      	adds	r3, #1
 800eab2:	9308      	str	r3, [sp, #32]
 800eab4:	e775      	b.n	800e9a2 <_dtoa_r+0xa0a>
 800eab6:	f000 faf9 	bl	800f0ac <__multadd>
 800eaba:	4631      	mov	r1, r6
 800eabc:	4680      	mov	r8, r0
 800eabe:	2300      	movs	r3, #0
 800eac0:	220a      	movs	r2, #10
 800eac2:	4628      	mov	r0, r5
 800eac4:	f000 faf2 	bl	800f0ac <__multadd>
 800eac8:	4606      	mov	r6, r0
 800eaca:	e7f0      	b.n	800eaae <_dtoa_r+0xb16>
 800eacc:	f1b9 0f00 	cmp.w	r9, #0
 800ead0:	bfcc      	ite	gt
 800ead2:	464f      	movgt	r7, r9
 800ead4:	2701      	movle	r7, #1
 800ead6:	f04f 0800 	mov.w	r8, #0
 800eada:	9a03      	ldr	r2, [sp, #12]
 800eadc:	4417      	add	r7, r2
 800eade:	4659      	mov	r1, fp
 800eae0:	2201      	movs	r2, #1
 800eae2:	4628      	mov	r0, r5
 800eae4:	9308      	str	r3, [sp, #32]
 800eae6:	f000 fc8d 	bl	800f404 <__lshift>
 800eaea:	4621      	mov	r1, r4
 800eaec:	4683      	mov	fp, r0
 800eaee:	f000 fcf9 	bl	800f4e4 <__mcmp>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	dcb2      	bgt.n	800ea5c <_dtoa_r+0xac4>
 800eaf6:	d102      	bne.n	800eafe <_dtoa_r+0xb66>
 800eaf8:	9b08      	ldr	r3, [sp, #32]
 800eafa:	07db      	lsls	r3, r3, #31
 800eafc:	d4ae      	bmi.n	800ea5c <_dtoa_r+0xac4>
 800eafe:	463b      	mov	r3, r7
 800eb00:	461f      	mov	r7, r3
 800eb02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb06:	2a30      	cmp	r2, #48	; 0x30
 800eb08:	d0fa      	beq.n	800eb00 <_dtoa_r+0xb68>
 800eb0a:	e6f9      	b.n	800e900 <_dtoa_r+0x968>
 800eb0c:	9a03      	ldr	r2, [sp, #12]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d1a5      	bne.n	800ea5e <_dtoa_r+0xac6>
 800eb12:	2331      	movs	r3, #49	; 0x31
 800eb14:	f10a 0a01 	add.w	sl, sl, #1
 800eb18:	e779      	b.n	800ea0e <_dtoa_r+0xa76>
 800eb1a:	4b14      	ldr	r3, [pc, #80]	; (800eb6c <_dtoa_r+0xbd4>)
 800eb1c:	f7ff baa8 	b.w	800e070 <_dtoa_r+0xd8>
 800eb20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	f47f aa81 	bne.w	800e02a <_dtoa_r+0x92>
 800eb28:	4b11      	ldr	r3, [pc, #68]	; (800eb70 <_dtoa_r+0xbd8>)
 800eb2a:	f7ff baa1 	b.w	800e070 <_dtoa_r+0xd8>
 800eb2e:	f1b9 0f00 	cmp.w	r9, #0
 800eb32:	dc03      	bgt.n	800eb3c <_dtoa_r+0xba4>
 800eb34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	f73f aecb 	bgt.w	800e8d2 <_dtoa_r+0x93a>
 800eb3c:	9f03      	ldr	r7, [sp, #12]
 800eb3e:	4621      	mov	r1, r4
 800eb40:	4658      	mov	r0, fp
 800eb42:	f7ff f99b 	bl	800de7c <quorem>
 800eb46:	9a03      	ldr	r2, [sp, #12]
 800eb48:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800eb4c:	f807 3b01 	strb.w	r3, [r7], #1
 800eb50:	1aba      	subs	r2, r7, r2
 800eb52:	4591      	cmp	r9, r2
 800eb54:	ddba      	ble.n	800eacc <_dtoa_r+0xb34>
 800eb56:	4659      	mov	r1, fp
 800eb58:	2300      	movs	r3, #0
 800eb5a:	220a      	movs	r2, #10
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f000 faa5 	bl	800f0ac <__multadd>
 800eb62:	4683      	mov	fp, r0
 800eb64:	e7eb      	b.n	800eb3e <_dtoa_r+0xba6>
 800eb66:	bf00      	nop
 800eb68:	0801233b 	.word	0x0801233b
 800eb6c:	08012298 	.word	0x08012298
 800eb70:	080122bc 	.word	0x080122bc

0800eb74 <__sflush_r>:
 800eb74:	898a      	ldrh	r2, [r1, #12]
 800eb76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb78:	4605      	mov	r5, r0
 800eb7a:	0710      	lsls	r0, r2, #28
 800eb7c:	460c      	mov	r4, r1
 800eb7e:	d457      	bmi.n	800ec30 <__sflush_r+0xbc>
 800eb80:	684b      	ldr	r3, [r1, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	dc04      	bgt.n	800eb90 <__sflush_r+0x1c>
 800eb86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	dc01      	bgt.n	800eb90 <__sflush_r+0x1c>
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb92:	2e00      	cmp	r6, #0
 800eb94:	d0fa      	beq.n	800eb8c <__sflush_r+0x18>
 800eb96:	2300      	movs	r3, #0
 800eb98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb9c:	682f      	ldr	r7, [r5, #0]
 800eb9e:	602b      	str	r3, [r5, #0]
 800eba0:	d032      	beq.n	800ec08 <__sflush_r+0x94>
 800eba2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eba4:	89a3      	ldrh	r3, [r4, #12]
 800eba6:	075a      	lsls	r2, r3, #29
 800eba8:	d505      	bpl.n	800ebb6 <__sflush_r+0x42>
 800ebaa:	6863      	ldr	r3, [r4, #4]
 800ebac:	1ac0      	subs	r0, r0, r3
 800ebae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebb0:	b10b      	cbz	r3, 800ebb6 <__sflush_r+0x42>
 800ebb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebb4:	1ac0      	subs	r0, r0, r3
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	4602      	mov	r2, r0
 800ebba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	6a21      	ldr	r1, [r4, #32]
 800ebc0:	47b0      	blx	r6
 800ebc2:	1c43      	adds	r3, r0, #1
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	d106      	bne.n	800ebd6 <__sflush_r+0x62>
 800ebc8:	6829      	ldr	r1, [r5, #0]
 800ebca:	291d      	cmp	r1, #29
 800ebcc:	d82c      	bhi.n	800ec28 <__sflush_r+0xb4>
 800ebce:	4a29      	ldr	r2, [pc, #164]	; (800ec74 <__sflush_r+0x100>)
 800ebd0:	40ca      	lsrs	r2, r1
 800ebd2:	07d6      	lsls	r6, r2, #31
 800ebd4:	d528      	bpl.n	800ec28 <__sflush_r+0xb4>
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	6062      	str	r2, [r4, #4]
 800ebda:	6922      	ldr	r2, [r4, #16]
 800ebdc:	04d9      	lsls	r1, r3, #19
 800ebde:	6022      	str	r2, [r4, #0]
 800ebe0:	d504      	bpl.n	800ebec <__sflush_r+0x78>
 800ebe2:	1c42      	adds	r2, r0, #1
 800ebe4:	d101      	bne.n	800ebea <__sflush_r+0x76>
 800ebe6:	682b      	ldr	r3, [r5, #0]
 800ebe8:	b903      	cbnz	r3, 800ebec <__sflush_r+0x78>
 800ebea:	6560      	str	r0, [r4, #84]	; 0x54
 800ebec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebee:	602f      	str	r7, [r5, #0]
 800ebf0:	2900      	cmp	r1, #0
 800ebf2:	d0cb      	beq.n	800eb8c <__sflush_r+0x18>
 800ebf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebf8:	4299      	cmp	r1, r3
 800ebfa:	d002      	beq.n	800ec02 <__sflush_r+0x8e>
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f7fe fa83 	bl	800d108 <_free_r>
 800ec02:	2000      	movs	r0, #0
 800ec04:	6360      	str	r0, [r4, #52]	; 0x34
 800ec06:	e7c2      	b.n	800eb8e <__sflush_r+0x1a>
 800ec08:	6a21      	ldr	r1, [r4, #32]
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	47b0      	blx	r6
 800ec10:	1c41      	adds	r1, r0, #1
 800ec12:	d1c7      	bne.n	800eba4 <__sflush_r+0x30>
 800ec14:	682b      	ldr	r3, [r5, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0c4      	beq.n	800eba4 <__sflush_r+0x30>
 800ec1a:	2b1d      	cmp	r3, #29
 800ec1c:	d001      	beq.n	800ec22 <__sflush_r+0xae>
 800ec1e:	2b16      	cmp	r3, #22
 800ec20:	d101      	bne.n	800ec26 <__sflush_r+0xb2>
 800ec22:	602f      	str	r7, [r5, #0]
 800ec24:	e7b2      	b.n	800eb8c <__sflush_r+0x18>
 800ec26:	89a3      	ldrh	r3, [r4, #12]
 800ec28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec2c:	81a3      	strh	r3, [r4, #12]
 800ec2e:	e7ae      	b.n	800eb8e <__sflush_r+0x1a>
 800ec30:	690f      	ldr	r7, [r1, #16]
 800ec32:	2f00      	cmp	r7, #0
 800ec34:	d0aa      	beq.n	800eb8c <__sflush_r+0x18>
 800ec36:	0793      	lsls	r3, r2, #30
 800ec38:	bf18      	it	ne
 800ec3a:	2300      	movne	r3, #0
 800ec3c:	680e      	ldr	r6, [r1, #0]
 800ec3e:	bf08      	it	eq
 800ec40:	694b      	ldreq	r3, [r1, #20]
 800ec42:	1bf6      	subs	r6, r6, r7
 800ec44:	600f      	str	r7, [r1, #0]
 800ec46:	608b      	str	r3, [r1, #8]
 800ec48:	2e00      	cmp	r6, #0
 800ec4a:	dd9f      	ble.n	800eb8c <__sflush_r+0x18>
 800ec4c:	4633      	mov	r3, r6
 800ec4e:	463a      	mov	r2, r7
 800ec50:	4628      	mov	r0, r5
 800ec52:	6a21      	ldr	r1, [r4, #32]
 800ec54:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ec58:	47e0      	blx	ip
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	dc06      	bgt.n	800ec6c <__sflush_r+0xf8>
 800ec5e:	89a3      	ldrh	r3, [r4, #12]
 800ec60:	f04f 30ff 	mov.w	r0, #4294967295
 800ec64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec68:	81a3      	strh	r3, [r4, #12]
 800ec6a:	e790      	b.n	800eb8e <__sflush_r+0x1a>
 800ec6c:	4407      	add	r7, r0
 800ec6e:	1a36      	subs	r6, r6, r0
 800ec70:	e7ea      	b.n	800ec48 <__sflush_r+0xd4>
 800ec72:	bf00      	nop
 800ec74:	20400001 	.word	0x20400001

0800ec78 <_fflush_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	690b      	ldr	r3, [r1, #16]
 800ec7c:	4605      	mov	r5, r0
 800ec7e:	460c      	mov	r4, r1
 800ec80:	b913      	cbnz	r3, 800ec88 <_fflush_r+0x10>
 800ec82:	2500      	movs	r5, #0
 800ec84:	4628      	mov	r0, r5
 800ec86:	bd38      	pop	{r3, r4, r5, pc}
 800ec88:	b118      	cbz	r0, 800ec92 <_fflush_r+0x1a>
 800ec8a:	6983      	ldr	r3, [r0, #24]
 800ec8c:	b90b      	cbnz	r3, 800ec92 <_fflush_r+0x1a>
 800ec8e:	f000 f887 	bl	800eda0 <__sinit>
 800ec92:	4b14      	ldr	r3, [pc, #80]	; (800ece4 <_fflush_r+0x6c>)
 800ec94:	429c      	cmp	r4, r3
 800ec96:	d11b      	bne.n	800ecd0 <_fflush_r+0x58>
 800ec98:	686c      	ldr	r4, [r5, #4]
 800ec9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d0ef      	beq.n	800ec82 <_fflush_r+0xa>
 800eca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eca4:	07d0      	lsls	r0, r2, #31
 800eca6:	d404      	bmi.n	800ecb2 <_fflush_r+0x3a>
 800eca8:	0599      	lsls	r1, r3, #22
 800ecaa:	d402      	bmi.n	800ecb2 <_fflush_r+0x3a>
 800ecac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecae:	f000 f91a 	bl	800eee6 <__retarget_lock_acquire_recursive>
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	f7ff ff5d 	bl	800eb74 <__sflush_r>
 800ecba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecbc:	4605      	mov	r5, r0
 800ecbe:	07da      	lsls	r2, r3, #31
 800ecc0:	d4e0      	bmi.n	800ec84 <_fflush_r+0xc>
 800ecc2:	89a3      	ldrh	r3, [r4, #12]
 800ecc4:	059b      	lsls	r3, r3, #22
 800ecc6:	d4dd      	bmi.n	800ec84 <_fflush_r+0xc>
 800ecc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecca:	f000 f90d 	bl	800eee8 <__retarget_lock_release_recursive>
 800ecce:	e7d9      	b.n	800ec84 <_fflush_r+0xc>
 800ecd0:	4b05      	ldr	r3, [pc, #20]	; (800ece8 <_fflush_r+0x70>)
 800ecd2:	429c      	cmp	r4, r3
 800ecd4:	d101      	bne.n	800ecda <_fflush_r+0x62>
 800ecd6:	68ac      	ldr	r4, [r5, #8]
 800ecd8:	e7df      	b.n	800ec9a <_fflush_r+0x22>
 800ecda:	4b04      	ldr	r3, [pc, #16]	; (800ecec <_fflush_r+0x74>)
 800ecdc:	429c      	cmp	r4, r3
 800ecde:	bf08      	it	eq
 800ece0:	68ec      	ldreq	r4, [r5, #12]
 800ece2:	e7da      	b.n	800ec9a <_fflush_r+0x22>
 800ece4:	0801236c 	.word	0x0801236c
 800ece8:	0801238c 	.word	0x0801238c
 800ecec:	0801234c 	.word	0x0801234c

0800ecf0 <std>:
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	b510      	push	{r4, lr}
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	e9c0 3300 	strd	r3, r3, [r0]
 800ecfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecfe:	6083      	str	r3, [r0, #8]
 800ed00:	8181      	strh	r1, [r0, #12]
 800ed02:	6643      	str	r3, [r0, #100]	; 0x64
 800ed04:	81c2      	strh	r2, [r0, #14]
 800ed06:	6183      	str	r3, [r0, #24]
 800ed08:	4619      	mov	r1, r3
 800ed0a:	2208      	movs	r2, #8
 800ed0c:	305c      	adds	r0, #92	; 0x5c
 800ed0e:	f7fe f9df 	bl	800d0d0 <memset>
 800ed12:	4b05      	ldr	r3, [pc, #20]	; (800ed28 <std+0x38>)
 800ed14:	6224      	str	r4, [r4, #32]
 800ed16:	6263      	str	r3, [r4, #36]	; 0x24
 800ed18:	4b04      	ldr	r3, [pc, #16]	; (800ed2c <std+0x3c>)
 800ed1a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed1c:	4b04      	ldr	r3, [pc, #16]	; (800ed30 <std+0x40>)
 800ed1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed20:	4b04      	ldr	r3, [pc, #16]	; (800ed34 <std+0x44>)
 800ed22:	6323      	str	r3, [r4, #48]	; 0x30
 800ed24:	bd10      	pop	{r4, pc}
 800ed26:	bf00      	nop
 800ed28:	0800fc55 	.word	0x0800fc55
 800ed2c:	0800fc77 	.word	0x0800fc77
 800ed30:	0800fcaf 	.word	0x0800fcaf
 800ed34:	0800fcd3 	.word	0x0800fcd3

0800ed38 <_cleanup_r>:
 800ed38:	4901      	ldr	r1, [pc, #4]	; (800ed40 <_cleanup_r+0x8>)
 800ed3a:	f000 b8af 	b.w	800ee9c <_fwalk_reent>
 800ed3e:	bf00      	nop
 800ed40:	0800ec79 	.word	0x0800ec79

0800ed44 <__sfmoreglue>:
 800ed44:	2268      	movs	r2, #104	; 0x68
 800ed46:	b570      	push	{r4, r5, r6, lr}
 800ed48:	1e4d      	subs	r5, r1, #1
 800ed4a:	4355      	muls	r5, r2
 800ed4c:	460e      	mov	r6, r1
 800ed4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed52:	f7fe fa41 	bl	800d1d8 <_malloc_r>
 800ed56:	4604      	mov	r4, r0
 800ed58:	b140      	cbz	r0, 800ed6c <__sfmoreglue+0x28>
 800ed5a:	2100      	movs	r1, #0
 800ed5c:	e9c0 1600 	strd	r1, r6, [r0]
 800ed60:	300c      	adds	r0, #12
 800ed62:	60a0      	str	r0, [r4, #8]
 800ed64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed68:	f7fe f9b2 	bl	800d0d0 <memset>
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	bd70      	pop	{r4, r5, r6, pc}

0800ed70 <__sfp_lock_acquire>:
 800ed70:	4801      	ldr	r0, [pc, #4]	; (800ed78 <__sfp_lock_acquire+0x8>)
 800ed72:	f000 b8b8 	b.w	800eee6 <__retarget_lock_acquire_recursive>
 800ed76:	bf00      	nop
 800ed78:	200010cd 	.word	0x200010cd

0800ed7c <__sfp_lock_release>:
 800ed7c:	4801      	ldr	r0, [pc, #4]	; (800ed84 <__sfp_lock_release+0x8>)
 800ed7e:	f000 b8b3 	b.w	800eee8 <__retarget_lock_release_recursive>
 800ed82:	bf00      	nop
 800ed84:	200010cd 	.word	0x200010cd

0800ed88 <__sinit_lock_acquire>:
 800ed88:	4801      	ldr	r0, [pc, #4]	; (800ed90 <__sinit_lock_acquire+0x8>)
 800ed8a:	f000 b8ac 	b.w	800eee6 <__retarget_lock_acquire_recursive>
 800ed8e:	bf00      	nop
 800ed90:	200010ce 	.word	0x200010ce

0800ed94 <__sinit_lock_release>:
 800ed94:	4801      	ldr	r0, [pc, #4]	; (800ed9c <__sinit_lock_release+0x8>)
 800ed96:	f000 b8a7 	b.w	800eee8 <__retarget_lock_release_recursive>
 800ed9a:	bf00      	nop
 800ed9c:	200010ce 	.word	0x200010ce

0800eda0 <__sinit>:
 800eda0:	b510      	push	{r4, lr}
 800eda2:	4604      	mov	r4, r0
 800eda4:	f7ff fff0 	bl	800ed88 <__sinit_lock_acquire>
 800eda8:	69a3      	ldr	r3, [r4, #24]
 800edaa:	b11b      	cbz	r3, 800edb4 <__sinit+0x14>
 800edac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edb0:	f7ff bff0 	b.w	800ed94 <__sinit_lock_release>
 800edb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800edb8:	6523      	str	r3, [r4, #80]	; 0x50
 800edba:	4b13      	ldr	r3, [pc, #76]	; (800ee08 <__sinit+0x68>)
 800edbc:	4a13      	ldr	r2, [pc, #76]	; (800ee0c <__sinit+0x6c>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800edc2:	42a3      	cmp	r3, r4
 800edc4:	bf08      	it	eq
 800edc6:	2301      	moveq	r3, #1
 800edc8:	4620      	mov	r0, r4
 800edca:	bf08      	it	eq
 800edcc:	61a3      	streq	r3, [r4, #24]
 800edce:	f000 f81f 	bl	800ee10 <__sfp>
 800edd2:	6060      	str	r0, [r4, #4]
 800edd4:	4620      	mov	r0, r4
 800edd6:	f000 f81b 	bl	800ee10 <__sfp>
 800edda:	60a0      	str	r0, [r4, #8]
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 f817 	bl	800ee10 <__sfp>
 800ede2:	2200      	movs	r2, #0
 800ede4:	2104      	movs	r1, #4
 800ede6:	60e0      	str	r0, [r4, #12]
 800ede8:	6860      	ldr	r0, [r4, #4]
 800edea:	f7ff ff81 	bl	800ecf0 <std>
 800edee:	2201      	movs	r2, #1
 800edf0:	2109      	movs	r1, #9
 800edf2:	68a0      	ldr	r0, [r4, #8]
 800edf4:	f7ff ff7c 	bl	800ecf0 <std>
 800edf8:	2202      	movs	r2, #2
 800edfa:	2112      	movs	r1, #18
 800edfc:	68e0      	ldr	r0, [r4, #12]
 800edfe:	f7ff ff77 	bl	800ecf0 <std>
 800ee02:	2301      	movs	r3, #1
 800ee04:	61a3      	str	r3, [r4, #24]
 800ee06:	e7d1      	b.n	800edac <__sinit+0xc>
 800ee08:	08012284 	.word	0x08012284
 800ee0c:	0800ed39 	.word	0x0800ed39

0800ee10 <__sfp>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	4607      	mov	r7, r0
 800ee14:	f7ff ffac 	bl	800ed70 <__sfp_lock_acquire>
 800ee18:	4b1e      	ldr	r3, [pc, #120]	; (800ee94 <__sfp+0x84>)
 800ee1a:	681e      	ldr	r6, [r3, #0]
 800ee1c:	69b3      	ldr	r3, [r6, #24]
 800ee1e:	b913      	cbnz	r3, 800ee26 <__sfp+0x16>
 800ee20:	4630      	mov	r0, r6
 800ee22:	f7ff ffbd 	bl	800eda0 <__sinit>
 800ee26:	3648      	adds	r6, #72	; 0x48
 800ee28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee2c:	3b01      	subs	r3, #1
 800ee2e:	d503      	bpl.n	800ee38 <__sfp+0x28>
 800ee30:	6833      	ldr	r3, [r6, #0]
 800ee32:	b30b      	cbz	r3, 800ee78 <__sfp+0x68>
 800ee34:	6836      	ldr	r6, [r6, #0]
 800ee36:	e7f7      	b.n	800ee28 <__sfp+0x18>
 800ee38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee3c:	b9d5      	cbnz	r5, 800ee74 <__sfp+0x64>
 800ee3e:	4b16      	ldr	r3, [pc, #88]	; (800ee98 <__sfp+0x88>)
 800ee40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee44:	60e3      	str	r3, [r4, #12]
 800ee46:	6665      	str	r5, [r4, #100]	; 0x64
 800ee48:	f000 f84c 	bl	800eee4 <__retarget_lock_init_recursive>
 800ee4c:	f7ff ff96 	bl	800ed7c <__sfp_lock_release>
 800ee50:	2208      	movs	r2, #8
 800ee52:	4629      	mov	r1, r5
 800ee54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee5c:	6025      	str	r5, [r4, #0]
 800ee5e:	61a5      	str	r5, [r4, #24]
 800ee60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee64:	f7fe f934 	bl	800d0d0 <memset>
 800ee68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee70:	4620      	mov	r0, r4
 800ee72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee74:	3468      	adds	r4, #104	; 0x68
 800ee76:	e7d9      	b.n	800ee2c <__sfp+0x1c>
 800ee78:	2104      	movs	r1, #4
 800ee7a:	4638      	mov	r0, r7
 800ee7c:	f7ff ff62 	bl	800ed44 <__sfmoreglue>
 800ee80:	4604      	mov	r4, r0
 800ee82:	6030      	str	r0, [r6, #0]
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d1d5      	bne.n	800ee34 <__sfp+0x24>
 800ee88:	f7ff ff78 	bl	800ed7c <__sfp_lock_release>
 800ee8c:	230c      	movs	r3, #12
 800ee8e:	603b      	str	r3, [r7, #0]
 800ee90:	e7ee      	b.n	800ee70 <__sfp+0x60>
 800ee92:	bf00      	nop
 800ee94:	08012284 	.word	0x08012284
 800ee98:	ffff0001 	.word	0xffff0001

0800ee9c <_fwalk_reent>:
 800ee9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eea0:	4606      	mov	r6, r0
 800eea2:	4688      	mov	r8, r1
 800eea4:	2700      	movs	r7, #0
 800eea6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eeaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eeae:	f1b9 0901 	subs.w	r9, r9, #1
 800eeb2:	d505      	bpl.n	800eec0 <_fwalk_reent+0x24>
 800eeb4:	6824      	ldr	r4, [r4, #0]
 800eeb6:	2c00      	cmp	r4, #0
 800eeb8:	d1f7      	bne.n	800eeaa <_fwalk_reent+0xe>
 800eeba:	4638      	mov	r0, r7
 800eebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eec0:	89ab      	ldrh	r3, [r5, #12]
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d907      	bls.n	800eed6 <_fwalk_reent+0x3a>
 800eec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eeca:	3301      	adds	r3, #1
 800eecc:	d003      	beq.n	800eed6 <_fwalk_reent+0x3a>
 800eece:	4629      	mov	r1, r5
 800eed0:	4630      	mov	r0, r6
 800eed2:	47c0      	blx	r8
 800eed4:	4307      	orrs	r7, r0
 800eed6:	3568      	adds	r5, #104	; 0x68
 800eed8:	e7e9      	b.n	800eeae <_fwalk_reent+0x12>
	...

0800eedc <_localeconv_r>:
 800eedc:	4800      	ldr	r0, [pc, #0]	; (800eee0 <_localeconv_r+0x4>)
 800eede:	4770      	bx	lr
 800eee0:	20000184 	.word	0x20000184

0800eee4 <__retarget_lock_init_recursive>:
 800eee4:	4770      	bx	lr

0800eee6 <__retarget_lock_acquire_recursive>:
 800eee6:	4770      	bx	lr

0800eee8 <__retarget_lock_release_recursive>:
 800eee8:	4770      	bx	lr

0800eeea <__swhatbuf_r>:
 800eeea:	b570      	push	{r4, r5, r6, lr}
 800eeec:	460e      	mov	r6, r1
 800eeee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef2:	4614      	mov	r4, r2
 800eef4:	2900      	cmp	r1, #0
 800eef6:	461d      	mov	r5, r3
 800eef8:	b096      	sub	sp, #88	; 0x58
 800eefa:	da08      	bge.n	800ef0e <__swhatbuf_r+0x24>
 800eefc:	2200      	movs	r2, #0
 800eefe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef02:	602a      	str	r2, [r5, #0]
 800ef04:	061a      	lsls	r2, r3, #24
 800ef06:	d410      	bmi.n	800ef2a <__swhatbuf_r+0x40>
 800ef08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef0c:	e00e      	b.n	800ef2c <__swhatbuf_r+0x42>
 800ef0e:	466a      	mov	r2, sp
 800ef10:	f000 ff36 	bl	800fd80 <_fstat_r>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	dbf1      	blt.n	800eefc <__swhatbuf_r+0x12>
 800ef18:	9a01      	ldr	r2, [sp, #4]
 800ef1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef22:	425a      	negs	r2, r3
 800ef24:	415a      	adcs	r2, r3
 800ef26:	602a      	str	r2, [r5, #0]
 800ef28:	e7ee      	b.n	800ef08 <__swhatbuf_r+0x1e>
 800ef2a:	2340      	movs	r3, #64	; 0x40
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	6023      	str	r3, [r4, #0]
 800ef30:	b016      	add	sp, #88	; 0x58
 800ef32:	bd70      	pop	{r4, r5, r6, pc}

0800ef34 <__smakebuf_r>:
 800ef34:	898b      	ldrh	r3, [r1, #12]
 800ef36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef38:	079d      	lsls	r5, r3, #30
 800ef3a:	4606      	mov	r6, r0
 800ef3c:	460c      	mov	r4, r1
 800ef3e:	d507      	bpl.n	800ef50 <__smakebuf_r+0x1c>
 800ef40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef44:	6023      	str	r3, [r4, #0]
 800ef46:	6123      	str	r3, [r4, #16]
 800ef48:	2301      	movs	r3, #1
 800ef4a:	6163      	str	r3, [r4, #20]
 800ef4c:	b002      	add	sp, #8
 800ef4e:	bd70      	pop	{r4, r5, r6, pc}
 800ef50:	466a      	mov	r2, sp
 800ef52:	ab01      	add	r3, sp, #4
 800ef54:	f7ff ffc9 	bl	800eeea <__swhatbuf_r>
 800ef58:	9900      	ldr	r1, [sp, #0]
 800ef5a:	4605      	mov	r5, r0
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	f7fe f93b 	bl	800d1d8 <_malloc_r>
 800ef62:	b948      	cbnz	r0, 800ef78 <__smakebuf_r+0x44>
 800ef64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef68:	059a      	lsls	r2, r3, #22
 800ef6a:	d4ef      	bmi.n	800ef4c <__smakebuf_r+0x18>
 800ef6c:	f023 0303 	bic.w	r3, r3, #3
 800ef70:	f043 0302 	orr.w	r3, r3, #2
 800ef74:	81a3      	strh	r3, [r4, #12]
 800ef76:	e7e3      	b.n	800ef40 <__smakebuf_r+0xc>
 800ef78:	4b0d      	ldr	r3, [pc, #52]	; (800efb0 <__smakebuf_r+0x7c>)
 800ef7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef7c:	89a3      	ldrh	r3, [r4, #12]
 800ef7e:	6020      	str	r0, [r4, #0]
 800ef80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef84:	81a3      	strh	r3, [r4, #12]
 800ef86:	9b00      	ldr	r3, [sp, #0]
 800ef88:	6120      	str	r0, [r4, #16]
 800ef8a:	6163      	str	r3, [r4, #20]
 800ef8c:	9b01      	ldr	r3, [sp, #4]
 800ef8e:	b15b      	cbz	r3, 800efa8 <__smakebuf_r+0x74>
 800ef90:	4630      	mov	r0, r6
 800ef92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef96:	f000 ff05 	bl	800fda4 <_isatty_r>
 800ef9a:	b128      	cbz	r0, 800efa8 <__smakebuf_r+0x74>
 800ef9c:	89a3      	ldrh	r3, [r4, #12]
 800ef9e:	f023 0303 	bic.w	r3, r3, #3
 800efa2:	f043 0301 	orr.w	r3, r3, #1
 800efa6:	81a3      	strh	r3, [r4, #12]
 800efa8:	89a0      	ldrh	r0, [r4, #12]
 800efaa:	4305      	orrs	r5, r0
 800efac:	81a5      	strh	r5, [r4, #12]
 800efae:	e7cd      	b.n	800ef4c <__smakebuf_r+0x18>
 800efb0:	0800ed39 	.word	0x0800ed39

0800efb4 <memchr>:
 800efb4:	4603      	mov	r3, r0
 800efb6:	b510      	push	{r4, lr}
 800efb8:	b2c9      	uxtb	r1, r1
 800efba:	4402      	add	r2, r0
 800efbc:	4293      	cmp	r3, r2
 800efbe:	4618      	mov	r0, r3
 800efc0:	d101      	bne.n	800efc6 <memchr+0x12>
 800efc2:	2000      	movs	r0, #0
 800efc4:	e003      	b.n	800efce <memchr+0x1a>
 800efc6:	7804      	ldrb	r4, [r0, #0]
 800efc8:	3301      	adds	r3, #1
 800efca:	428c      	cmp	r4, r1
 800efcc:	d1f6      	bne.n	800efbc <memchr+0x8>
 800efce:	bd10      	pop	{r4, pc}

0800efd0 <__malloc_lock>:
 800efd0:	4801      	ldr	r0, [pc, #4]	; (800efd8 <__malloc_lock+0x8>)
 800efd2:	f7ff bf88 	b.w	800eee6 <__retarget_lock_acquire_recursive>
 800efd6:	bf00      	nop
 800efd8:	200010cc 	.word	0x200010cc

0800efdc <__malloc_unlock>:
 800efdc:	4801      	ldr	r0, [pc, #4]	; (800efe4 <__malloc_unlock+0x8>)
 800efde:	f7ff bf83 	b.w	800eee8 <__retarget_lock_release_recursive>
 800efe2:	bf00      	nop
 800efe4:	200010cc 	.word	0x200010cc

0800efe8 <_Balloc>:
 800efe8:	b570      	push	{r4, r5, r6, lr}
 800efea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800efec:	4604      	mov	r4, r0
 800efee:	460d      	mov	r5, r1
 800eff0:	b976      	cbnz	r6, 800f010 <_Balloc+0x28>
 800eff2:	2010      	movs	r0, #16
 800eff4:	f7fe f834 	bl	800d060 <malloc>
 800eff8:	4602      	mov	r2, r0
 800effa:	6260      	str	r0, [r4, #36]	; 0x24
 800effc:	b920      	cbnz	r0, 800f008 <_Balloc+0x20>
 800effe:	2166      	movs	r1, #102	; 0x66
 800f000:	4b17      	ldr	r3, [pc, #92]	; (800f060 <_Balloc+0x78>)
 800f002:	4818      	ldr	r0, [pc, #96]	; (800f064 <_Balloc+0x7c>)
 800f004:	f000 fe7c 	bl	800fd00 <__assert_func>
 800f008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f00c:	6006      	str	r6, [r0, #0]
 800f00e:	60c6      	str	r6, [r0, #12]
 800f010:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f012:	68f3      	ldr	r3, [r6, #12]
 800f014:	b183      	cbz	r3, 800f038 <_Balloc+0x50>
 800f016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f01e:	b9b8      	cbnz	r0, 800f050 <_Balloc+0x68>
 800f020:	2101      	movs	r1, #1
 800f022:	fa01 f605 	lsl.w	r6, r1, r5
 800f026:	1d72      	adds	r2, r6, #5
 800f028:	4620      	mov	r0, r4
 800f02a:	0092      	lsls	r2, r2, #2
 800f02c:	f7fe f858 	bl	800d0e0 <_calloc_r>
 800f030:	b160      	cbz	r0, 800f04c <_Balloc+0x64>
 800f032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f036:	e00e      	b.n	800f056 <_Balloc+0x6e>
 800f038:	2221      	movs	r2, #33	; 0x21
 800f03a:	2104      	movs	r1, #4
 800f03c:	4620      	mov	r0, r4
 800f03e:	f7fe f84f 	bl	800d0e0 <_calloc_r>
 800f042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f044:	60f0      	str	r0, [r6, #12]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1e4      	bne.n	800f016 <_Balloc+0x2e>
 800f04c:	2000      	movs	r0, #0
 800f04e:	bd70      	pop	{r4, r5, r6, pc}
 800f050:	6802      	ldr	r2, [r0, #0]
 800f052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f056:	2300      	movs	r3, #0
 800f058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f05c:	e7f7      	b.n	800f04e <_Balloc+0x66>
 800f05e:	bf00      	nop
 800f060:	080122c9 	.word	0x080122c9
 800f064:	080123ac 	.word	0x080123ac

0800f068 <_Bfree>:
 800f068:	b570      	push	{r4, r5, r6, lr}
 800f06a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f06c:	4605      	mov	r5, r0
 800f06e:	460c      	mov	r4, r1
 800f070:	b976      	cbnz	r6, 800f090 <_Bfree+0x28>
 800f072:	2010      	movs	r0, #16
 800f074:	f7fd fff4 	bl	800d060 <malloc>
 800f078:	4602      	mov	r2, r0
 800f07a:	6268      	str	r0, [r5, #36]	; 0x24
 800f07c:	b920      	cbnz	r0, 800f088 <_Bfree+0x20>
 800f07e:	218a      	movs	r1, #138	; 0x8a
 800f080:	4b08      	ldr	r3, [pc, #32]	; (800f0a4 <_Bfree+0x3c>)
 800f082:	4809      	ldr	r0, [pc, #36]	; (800f0a8 <_Bfree+0x40>)
 800f084:	f000 fe3c 	bl	800fd00 <__assert_func>
 800f088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f08c:	6006      	str	r6, [r0, #0]
 800f08e:	60c6      	str	r6, [r0, #12]
 800f090:	b13c      	cbz	r4, 800f0a2 <_Bfree+0x3a>
 800f092:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f094:	6862      	ldr	r2, [r4, #4]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f09c:	6021      	str	r1, [r4, #0]
 800f09e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0a2:	bd70      	pop	{r4, r5, r6, pc}
 800f0a4:	080122c9 	.word	0x080122c9
 800f0a8:	080123ac 	.word	0x080123ac

0800f0ac <__multadd>:
 800f0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b0:	4607      	mov	r7, r0
 800f0b2:	460c      	mov	r4, r1
 800f0b4:	461e      	mov	r6, r3
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	690d      	ldr	r5, [r1, #16]
 800f0ba:	f101 0c14 	add.w	ip, r1, #20
 800f0be:	f8dc 3000 	ldr.w	r3, [ip]
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	b299      	uxth	r1, r3
 800f0c6:	fb02 6101 	mla	r1, r2, r1, r6
 800f0ca:	0c1e      	lsrs	r6, r3, #16
 800f0cc:	0c0b      	lsrs	r3, r1, #16
 800f0ce:	fb02 3306 	mla	r3, r2, r6, r3
 800f0d2:	b289      	uxth	r1, r1
 800f0d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0d8:	4285      	cmp	r5, r0
 800f0da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0de:	f84c 1b04 	str.w	r1, [ip], #4
 800f0e2:	dcec      	bgt.n	800f0be <__multadd+0x12>
 800f0e4:	b30e      	cbz	r6, 800f12a <__multadd+0x7e>
 800f0e6:	68a3      	ldr	r3, [r4, #8]
 800f0e8:	42ab      	cmp	r3, r5
 800f0ea:	dc19      	bgt.n	800f120 <__multadd+0x74>
 800f0ec:	6861      	ldr	r1, [r4, #4]
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	3101      	adds	r1, #1
 800f0f2:	f7ff ff79 	bl	800efe8 <_Balloc>
 800f0f6:	4680      	mov	r8, r0
 800f0f8:	b928      	cbnz	r0, 800f106 <__multadd+0x5a>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	21b5      	movs	r1, #181	; 0xb5
 800f0fe:	4b0c      	ldr	r3, [pc, #48]	; (800f130 <__multadd+0x84>)
 800f100:	480c      	ldr	r0, [pc, #48]	; (800f134 <__multadd+0x88>)
 800f102:	f000 fdfd 	bl	800fd00 <__assert_func>
 800f106:	6922      	ldr	r2, [r4, #16]
 800f108:	f104 010c 	add.w	r1, r4, #12
 800f10c:	3202      	adds	r2, #2
 800f10e:	0092      	lsls	r2, r2, #2
 800f110:	300c      	adds	r0, #12
 800f112:	f7fd ffb5 	bl	800d080 <memcpy>
 800f116:	4621      	mov	r1, r4
 800f118:	4638      	mov	r0, r7
 800f11a:	f7ff ffa5 	bl	800f068 <_Bfree>
 800f11e:	4644      	mov	r4, r8
 800f120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f124:	3501      	adds	r5, #1
 800f126:	615e      	str	r6, [r3, #20]
 800f128:	6125      	str	r5, [r4, #16]
 800f12a:	4620      	mov	r0, r4
 800f12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f130:	0801233b 	.word	0x0801233b
 800f134:	080123ac 	.word	0x080123ac

0800f138 <__hi0bits>:
 800f138:	0c02      	lsrs	r2, r0, #16
 800f13a:	0412      	lsls	r2, r2, #16
 800f13c:	4603      	mov	r3, r0
 800f13e:	b9ca      	cbnz	r2, 800f174 <__hi0bits+0x3c>
 800f140:	0403      	lsls	r3, r0, #16
 800f142:	2010      	movs	r0, #16
 800f144:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f148:	bf04      	itt	eq
 800f14a:	021b      	lsleq	r3, r3, #8
 800f14c:	3008      	addeq	r0, #8
 800f14e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f152:	bf04      	itt	eq
 800f154:	011b      	lsleq	r3, r3, #4
 800f156:	3004      	addeq	r0, #4
 800f158:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f15c:	bf04      	itt	eq
 800f15e:	009b      	lsleq	r3, r3, #2
 800f160:	3002      	addeq	r0, #2
 800f162:	2b00      	cmp	r3, #0
 800f164:	db05      	blt.n	800f172 <__hi0bits+0x3a>
 800f166:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800f16a:	f100 0001 	add.w	r0, r0, #1
 800f16e:	bf08      	it	eq
 800f170:	2020      	moveq	r0, #32
 800f172:	4770      	bx	lr
 800f174:	2000      	movs	r0, #0
 800f176:	e7e5      	b.n	800f144 <__hi0bits+0xc>

0800f178 <__lo0bits>:
 800f178:	6803      	ldr	r3, [r0, #0]
 800f17a:	4602      	mov	r2, r0
 800f17c:	f013 0007 	ands.w	r0, r3, #7
 800f180:	d00b      	beq.n	800f19a <__lo0bits+0x22>
 800f182:	07d9      	lsls	r1, r3, #31
 800f184:	d421      	bmi.n	800f1ca <__lo0bits+0x52>
 800f186:	0798      	lsls	r0, r3, #30
 800f188:	bf49      	itett	mi
 800f18a:	085b      	lsrmi	r3, r3, #1
 800f18c:	089b      	lsrpl	r3, r3, #2
 800f18e:	2001      	movmi	r0, #1
 800f190:	6013      	strmi	r3, [r2, #0]
 800f192:	bf5c      	itt	pl
 800f194:	2002      	movpl	r0, #2
 800f196:	6013      	strpl	r3, [r2, #0]
 800f198:	4770      	bx	lr
 800f19a:	b299      	uxth	r1, r3
 800f19c:	b909      	cbnz	r1, 800f1a2 <__lo0bits+0x2a>
 800f19e:	2010      	movs	r0, #16
 800f1a0:	0c1b      	lsrs	r3, r3, #16
 800f1a2:	b2d9      	uxtb	r1, r3
 800f1a4:	b909      	cbnz	r1, 800f1aa <__lo0bits+0x32>
 800f1a6:	3008      	adds	r0, #8
 800f1a8:	0a1b      	lsrs	r3, r3, #8
 800f1aa:	0719      	lsls	r1, r3, #28
 800f1ac:	bf04      	itt	eq
 800f1ae:	091b      	lsreq	r3, r3, #4
 800f1b0:	3004      	addeq	r0, #4
 800f1b2:	0799      	lsls	r1, r3, #30
 800f1b4:	bf04      	itt	eq
 800f1b6:	089b      	lsreq	r3, r3, #2
 800f1b8:	3002      	addeq	r0, #2
 800f1ba:	07d9      	lsls	r1, r3, #31
 800f1bc:	d403      	bmi.n	800f1c6 <__lo0bits+0x4e>
 800f1be:	085b      	lsrs	r3, r3, #1
 800f1c0:	f100 0001 	add.w	r0, r0, #1
 800f1c4:	d003      	beq.n	800f1ce <__lo0bits+0x56>
 800f1c6:	6013      	str	r3, [r2, #0]
 800f1c8:	4770      	bx	lr
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	4770      	bx	lr
 800f1ce:	2020      	movs	r0, #32
 800f1d0:	4770      	bx	lr
	...

0800f1d4 <__i2b>:
 800f1d4:	b510      	push	{r4, lr}
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	2101      	movs	r1, #1
 800f1da:	f7ff ff05 	bl	800efe8 <_Balloc>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	b928      	cbnz	r0, 800f1ee <__i2b+0x1a>
 800f1e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f1e6:	4b04      	ldr	r3, [pc, #16]	; (800f1f8 <__i2b+0x24>)
 800f1e8:	4804      	ldr	r0, [pc, #16]	; (800f1fc <__i2b+0x28>)
 800f1ea:	f000 fd89 	bl	800fd00 <__assert_func>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	6144      	str	r4, [r0, #20]
 800f1f2:	6103      	str	r3, [r0, #16]
 800f1f4:	bd10      	pop	{r4, pc}
 800f1f6:	bf00      	nop
 800f1f8:	0801233b 	.word	0x0801233b
 800f1fc:	080123ac 	.word	0x080123ac

0800f200 <__multiply>:
 800f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f204:	4691      	mov	r9, r2
 800f206:	690a      	ldr	r2, [r1, #16]
 800f208:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f20c:	460c      	mov	r4, r1
 800f20e:	429a      	cmp	r2, r3
 800f210:	bfbe      	ittt	lt
 800f212:	460b      	movlt	r3, r1
 800f214:	464c      	movlt	r4, r9
 800f216:	4699      	movlt	r9, r3
 800f218:	6927      	ldr	r7, [r4, #16]
 800f21a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f21e:	68a3      	ldr	r3, [r4, #8]
 800f220:	6861      	ldr	r1, [r4, #4]
 800f222:	eb07 060a 	add.w	r6, r7, sl
 800f226:	42b3      	cmp	r3, r6
 800f228:	b085      	sub	sp, #20
 800f22a:	bfb8      	it	lt
 800f22c:	3101      	addlt	r1, #1
 800f22e:	f7ff fedb 	bl	800efe8 <_Balloc>
 800f232:	b930      	cbnz	r0, 800f242 <__multiply+0x42>
 800f234:	4602      	mov	r2, r0
 800f236:	f240 115d 	movw	r1, #349	; 0x15d
 800f23a:	4b43      	ldr	r3, [pc, #268]	; (800f348 <__multiply+0x148>)
 800f23c:	4843      	ldr	r0, [pc, #268]	; (800f34c <__multiply+0x14c>)
 800f23e:	f000 fd5f 	bl	800fd00 <__assert_func>
 800f242:	f100 0514 	add.w	r5, r0, #20
 800f246:	462b      	mov	r3, r5
 800f248:	2200      	movs	r2, #0
 800f24a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f24e:	4543      	cmp	r3, r8
 800f250:	d321      	bcc.n	800f296 <__multiply+0x96>
 800f252:	f104 0314 	add.w	r3, r4, #20
 800f256:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f25a:	f109 0314 	add.w	r3, r9, #20
 800f25e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f262:	9202      	str	r2, [sp, #8]
 800f264:	1b3a      	subs	r2, r7, r4
 800f266:	3a15      	subs	r2, #21
 800f268:	f022 0203 	bic.w	r2, r2, #3
 800f26c:	3204      	adds	r2, #4
 800f26e:	f104 0115 	add.w	r1, r4, #21
 800f272:	428f      	cmp	r7, r1
 800f274:	bf38      	it	cc
 800f276:	2204      	movcc	r2, #4
 800f278:	9201      	str	r2, [sp, #4]
 800f27a:	9a02      	ldr	r2, [sp, #8]
 800f27c:	9303      	str	r3, [sp, #12]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d80c      	bhi.n	800f29c <__multiply+0x9c>
 800f282:	2e00      	cmp	r6, #0
 800f284:	dd03      	ble.n	800f28e <__multiply+0x8e>
 800f286:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d059      	beq.n	800f342 <__multiply+0x142>
 800f28e:	6106      	str	r6, [r0, #16]
 800f290:	b005      	add	sp, #20
 800f292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f296:	f843 2b04 	str.w	r2, [r3], #4
 800f29a:	e7d8      	b.n	800f24e <__multiply+0x4e>
 800f29c:	f8b3 a000 	ldrh.w	sl, [r3]
 800f2a0:	f1ba 0f00 	cmp.w	sl, #0
 800f2a4:	d023      	beq.n	800f2ee <__multiply+0xee>
 800f2a6:	46a9      	mov	r9, r5
 800f2a8:	f04f 0c00 	mov.w	ip, #0
 800f2ac:	f104 0e14 	add.w	lr, r4, #20
 800f2b0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f2b4:	f8d9 1000 	ldr.w	r1, [r9]
 800f2b8:	fa1f fb82 	uxth.w	fp, r2
 800f2bc:	b289      	uxth	r1, r1
 800f2be:	fb0a 110b 	mla	r1, sl, fp, r1
 800f2c2:	4461      	add	r1, ip
 800f2c4:	f8d9 c000 	ldr.w	ip, [r9]
 800f2c8:	0c12      	lsrs	r2, r2, #16
 800f2ca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f2ce:	fb0a c202 	mla	r2, sl, r2, ip
 800f2d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f2d6:	b289      	uxth	r1, r1
 800f2d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f2dc:	4577      	cmp	r7, lr
 800f2de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f2e2:	f849 1b04 	str.w	r1, [r9], #4
 800f2e6:	d8e3      	bhi.n	800f2b0 <__multiply+0xb0>
 800f2e8:	9a01      	ldr	r2, [sp, #4]
 800f2ea:	f845 c002 	str.w	ip, [r5, r2]
 800f2ee:	9a03      	ldr	r2, [sp, #12]
 800f2f0:	3304      	adds	r3, #4
 800f2f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f2f6:	f1b9 0f00 	cmp.w	r9, #0
 800f2fa:	d020      	beq.n	800f33e <__multiply+0x13e>
 800f2fc:	46ae      	mov	lr, r5
 800f2fe:	f04f 0a00 	mov.w	sl, #0
 800f302:	6829      	ldr	r1, [r5, #0]
 800f304:	f104 0c14 	add.w	ip, r4, #20
 800f308:	f8bc b000 	ldrh.w	fp, [ip]
 800f30c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f310:	b289      	uxth	r1, r1
 800f312:	fb09 220b 	mla	r2, r9, fp, r2
 800f316:	4492      	add	sl, r2
 800f318:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f31c:	f84e 1b04 	str.w	r1, [lr], #4
 800f320:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f324:	f8be 1000 	ldrh.w	r1, [lr]
 800f328:	0c12      	lsrs	r2, r2, #16
 800f32a:	fb09 1102 	mla	r1, r9, r2, r1
 800f32e:	4567      	cmp	r7, ip
 800f330:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f334:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f338:	d8e6      	bhi.n	800f308 <__multiply+0x108>
 800f33a:	9a01      	ldr	r2, [sp, #4]
 800f33c:	50a9      	str	r1, [r5, r2]
 800f33e:	3504      	adds	r5, #4
 800f340:	e79b      	b.n	800f27a <__multiply+0x7a>
 800f342:	3e01      	subs	r6, #1
 800f344:	e79d      	b.n	800f282 <__multiply+0x82>
 800f346:	bf00      	nop
 800f348:	0801233b 	.word	0x0801233b
 800f34c:	080123ac 	.word	0x080123ac

0800f350 <__pow5mult>:
 800f350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f354:	4615      	mov	r5, r2
 800f356:	f012 0203 	ands.w	r2, r2, #3
 800f35a:	4606      	mov	r6, r0
 800f35c:	460f      	mov	r7, r1
 800f35e:	d007      	beq.n	800f370 <__pow5mult+0x20>
 800f360:	4c25      	ldr	r4, [pc, #148]	; (800f3f8 <__pow5mult+0xa8>)
 800f362:	3a01      	subs	r2, #1
 800f364:	2300      	movs	r3, #0
 800f366:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f36a:	f7ff fe9f 	bl	800f0ac <__multadd>
 800f36e:	4607      	mov	r7, r0
 800f370:	10ad      	asrs	r5, r5, #2
 800f372:	d03d      	beq.n	800f3f0 <__pow5mult+0xa0>
 800f374:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f376:	b97c      	cbnz	r4, 800f398 <__pow5mult+0x48>
 800f378:	2010      	movs	r0, #16
 800f37a:	f7fd fe71 	bl	800d060 <malloc>
 800f37e:	4602      	mov	r2, r0
 800f380:	6270      	str	r0, [r6, #36]	; 0x24
 800f382:	b928      	cbnz	r0, 800f390 <__pow5mult+0x40>
 800f384:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f388:	4b1c      	ldr	r3, [pc, #112]	; (800f3fc <__pow5mult+0xac>)
 800f38a:	481d      	ldr	r0, [pc, #116]	; (800f400 <__pow5mult+0xb0>)
 800f38c:	f000 fcb8 	bl	800fd00 <__assert_func>
 800f390:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f394:	6004      	str	r4, [r0, #0]
 800f396:	60c4      	str	r4, [r0, #12]
 800f398:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f39c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f3a0:	b94c      	cbnz	r4, 800f3b6 <__pow5mult+0x66>
 800f3a2:	f240 2171 	movw	r1, #625	; 0x271
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f7ff ff14 	bl	800f1d4 <__i2b>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3b4:	6003      	str	r3, [r0, #0]
 800f3b6:	f04f 0900 	mov.w	r9, #0
 800f3ba:	07eb      	lsls	r3, r5, #31
 800f3bc:	d50a      	bpl.n	800f3d4 <__pow5mult+0x84>
 800f3be:	4639      	mov	r1, r7
 800f3c0:	4622      	mov	r2, r4
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f7ff ff1c 	bl	800f200 <__multiply>
 800f3c8:	4680      	mov	r8, r0
 800f3ca:	4639      	mov	r1, r7
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f7ff fe4b 	bl	800f068 <_Bfree>
 800f3d2:	4647      	mov	r7, r8
 800f3d4:	106d      	asrs	r5, r5, #1
 800f3d6:	d00b      	beq.n	800f3f0 <__pow5mult+0xa0>
 800f3d8:	6820      	ldr	r0, [r4, #0]
 800f3da:	b938      	cbnz	r0, 800f3ec <__pow5mult+0x9c>
 800f3dc:	4622      	mov	r2, r4
 800f3de:	4621      	mov	r1, r4
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	f7ff ff0d 	bl	800f200 <__multiply>
 800f3e6:	6020      	str	r0, [r4, #0]
 800f3e8:	f8c0 9000 	str.w	r9, [r0]
 800f3ec:	4604      	mov	r4, r0
 800f3ee:	e7e4      	b.n	800f3ba <__pow5mult+0x6a>
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f6:	bf00      	nop
 800f3f8:	080124f8 	.word	0x080124f8
 800f3fc:	080122c9 	.word	0x080122c9
 800f400:	080123ac 	.word	0x080123ac

0800f404 <__lshift>:
 800f404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f408:	460c      	mov	r4, r1
 800f40a:	4607      	mov	r7, r0
 800f40c:	4691      	mov	r9, r2
 800f40e:	6923      	ldr	r3, [r4, #16]
 800f410:	6849      	ldr	r1, [r1, #4]
 800f412:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f416:	68a3      	ldr	r3, [r4, #8]
 800f418:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f41c:	f108 0601 	add.w	r6, r8, #1
 800f420:	42b3      	cmp	r3, r6
 800f422:	db0b      	blt.n	800f43c <__lshift+0x38>
 800f424:	4638      	mov	r0, r7
 800f426:	f7ff fddf 	bl	800efe8 <_Balloc>
 800f42a:	4605      	mov	r5, r0
 800f42c:	b948      	cbnz	r0, 800f442 <__lshift+0x3e>
 800f42e:	4602      	mov	r2, r0
 800f430:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f434:	4b29      	ldr	r3, [pc, #164]	; (800f4dc <__lshift+0xd8>)
 800f436:	482a      	ldr	r0, [pc, #168]	; (800f4e0 <__lshift+0xdc>)
 800f438:	f000 fc62 	bl	800fd00 <__assert_func>
 800f43c:	3101      	adds	r1, #1
 800f43e:	005b      	lsls	r3, r3, #1
 800f440:	e7ee      	b.n	800f420 <__lshift+0x1c>
 800f442:	2300      	movs	r3, #0
 800f444:	f100 0114 	add.w	r1, r0, #20
 800f448:	f100 0210 	add.w	r2, r0, #16
 800f44c:	4618      	mov	r0, r3
 800f44e:	4553      	cmp	r3, sl
 800f450:	db37      	blt.n	800f4c2 <__lshift+0xbe>
 800f452:	6920      	ldr	r0, [r4, #16]
 800f454:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f458:	f104 0314 	add.w	r3, r4, #20
 800f45c:	f019 091f 	ands.w	r9, r9, #31
 800f460:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f464:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f468:	d02f      	beq.n	800f4ca <__lshift+0xc6>
 800f46a:	468a      	mov	sl, r1
 800f46c:	f04f 0c00 	mov.w	ip, #0
 800f470:	f1c9 0e20 	rsb	lr, r9, #32
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	fa02 f209 	lsl.w	r2, r2, r9
 800f47a:	ea42 020c 	orr.w	r2, r2, ip
 800f47e:	f84a 2b04 	str.w	r2, [sl], #4
 800f482:	f853 2b04 	ldr.w	r2, [r3], #4
 800f486:	4298      	cmp	r0, r3
 800f488:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f48c:	d8f2      	bhi.n	800f474 <__lshift+0x70>
 800f48e:	1b03      	subs	r3, r0, r4
 800f490:	3b15      	subs	r3, #21
 800f492:	f023 0303 	bic.w	r3, r3, #3
 800f496:	3304      	adds	r3, #4
 800f498:	f104 0215 	add.w	r2, r4, #21
 800f49c:	4290      	cmp	r0, r2
 800f49e:	bf38      	it	cc
 800f4a0:	2304      	movcc	r3, #4
 800f4a2:	f841 c003 	str.w	ip, [r1, r3]
 800f4a6:	f1bc 0f00 	cmp.w	ip, #0
 800f4aa:	d001      	beq.n	800f4b0 <__lshift+0xac>
 800f4ac:	f108 0602 	add.w	r6, r8, #2
 800f4b0:	3e01      	subs	r6, #1
 800f4b2:	4638      	mov	r0, r7
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	612e      	str	r6, [r5, #16]
 800f4b8:	f7ff fdd6 	bl	800f068 <_Bfree>
 800f4bc:	4628      	mov	r0, r5
 800f4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	e7c1      	b.n	800f44e <__lshift+0x4a>
 800f4ca:	3904      	subs	r1, #4
 800f4cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4d0:	4298      	cmp	r0, r3
 800f4d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4d6:	d8f9      	bhi.n	800f4cc <__lshift+0xc8>
 800f4d8:	e7ea      	b.n	800f4b0 <__lshift+0xac>
 800f4da:	bf00      	nop
 800f4dc:	0801233b 	.word	0x0801233b
 800f4e0:	080123ac 	.word	0x080123ac

0800f4e4 <__mcmp>:
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	690a      	ldr	r2, [r1, #16]
 800f4e8:	6900      	ldr	r0, [r0, #16]
 800f4ea:	b530      	push	{r4, r5, lr}
 800f4ec:	1a80      	subs	r0, r0, r2
 800f4ee:	d10d      	bne.n	800f50c <__mcmp+0x28>
 800f4f0:	3314      	adds	r3, #20
 800f4f2:	3114      	adds	r1, #20
 800f4f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f4f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f4fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f504:	4295      	cmp	r5, r2
 800f506:	d002      	beq.n	800f50e <__mcmp+0x2a>
 800f508:	d304      	bcc.n	800f514 <__mcmp+0x30>
 800f50a:	2001      	movs	r0, #1
 800f50c:	bd30      	pop	{r4, r5, pc}
 800f50e:	42a3      	cmp	r3, r4
 800f510:	d3f4      	bcc.n	800f4fc <__mcmp+0x18>
 800f512:	e7fb      	b.n	800f50c <__mcmp+0x28>
 800f514:	f04f 30ff 	mov.w	r0, #4294967295
 800f518:	e7f8      	b.n	800f50c <__mcmp+0x28>
	...

0800f51c <__mdiff>:
 800f51c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f520:	460d      	mov	r5, r1
 800f522:	4607      	mov	r7, r0
 800f524:	4611      	mov	r1, r2
 800f526:	4628      	mov	r0, r5
 800f528:	4614      	mov	r4, r2
 800f52a:	f7ff ffdb 	bl	800f4e4 <__mcmp>
 800f52e:	1e06      	subs	r6, r0, #0
 800f530:	d111      	bne.n	800f556 <__mdiff+0x3a>
 800f532:	4631      	mov	r1, r6
 800f534:	4638      	mov	r0, r7
 800f536:	f7ff fd57 	bl	800efe8 <_Balloc>
 800f53a:	4602      	mov	r2, r0
 800f53c:	b928      	cbnz	r0, 800f54a <__mdiff+0x2e>
 800f53e:	f240 2132 	movw	r1, #562	; 0x232
 800f542:	4b3a      	ldr	r3, [pc, #232]	; (800f62c <__mdiff+0x110>)
 800f544:	483a      	ldr	r0, [pc, #232]	; (800f630 <__mdiff+0x114>)
 800f546:	f000 fbdb 	bl	800fd00 <__assert_func>
 800f54a:	2301      	movs	r3, #1
 800f54c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f550:	4610      	mov	r0, r2
 800f552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f556:	bfa4      	itt	ge
 800f558:	4623      	movge	r3, r4
 800f55a:	462c      	movge	r4, r5
 800f55c:	4638      	mov	r0, r7
 800f55e:	6861      	ldr	r1, [r4, #4]
 800f560:	bfa6      	itte	ge
 800f562:	461d      	movge	r5, r3
 800f564:	2600      	movge	r6, #0
 800f566:	2601      	movlt	r6, #1
 800f568:	f7ff fd3e 	bl	800efe8 <_Balloc>
 800f56c:	4602      	mov	r2, r0
 800f56e:	b918      	cbnz	r0, 800f578 <__mdiff+0x5c>
 800f570:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f574:	4b2d      	ldr	r3, [pc, #180]	; (800f62c <__mdiff+0x110>)
 800f576:	e7e5      	b.n	800f544 <__mdiff+0x28>
 800f578:	f102 0814 	add.w	r8, r2, #20
 800f57c:	46c2      	mov	sl, r8
 800f57e:	f04f 0c00 	mov.w	ip, #0
 800f582:	6927      	ldr	r7, [r4, #16]
 800f584:	60c6      	str	r6, [r0, #12]
 800f586:	692e      	ldr	r6, [r5, #16]
 800f588:	f104 0014 	add.w	r0, r4, #20
 800f58c:	f105 0914 	add.w	r9, r5, #20
 800f590:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800f594:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f598:	3410      	adds	r4, #16
 800f59a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800f59e:	f859 3b04 	ldr.w	r3, [r9], #4
 800f5a2:	fa1f f18b 	uxth.w	r1, fp
 800f5a6:	448c      	add	ip, r1
 800f5a8:	b299      	uxth	r1, r3
 800f5aa:	0c1b      	lsrs	r3, r3, #16
 800f5ac:	ebac 0101 	sub.w	r1, ip, r1
 800f5b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f5b4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f5b8:	b289      	uxth	r1, r1
 800f5ba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f5be:	454e      	cmp	r6, r9
 800f5c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f5c4:	f84a 3b04 	str.w	r3, [sl], #4
 800f5c8:	d8e7      	bhi.n	800f59a <__mdiff+0x7e>
 800f5ca:	1b73      	subs	r3, r6, r5
 800f5cc:	3b15      	subs	r3, #21
 800f5ce:	f023 0303 	bic.w	r3, r3, #3
 800f5d2:	3515      	adds	r5, #21
 800f5d4:	3304      	adds	r3, #4
 800f5d6:	42ae      	cmp	r6, r5
 800f5d8:	bf38      	it	cc
 800f5da:	2304      	movcc	r3, #4
 800f5dc:	4418      	add	r0, r3
 800f5de:	4443      	add	r3, r8
 800f5e0:	461e      	mov	r6, r3
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	4575      	cmp	r5, lr
 800f5e6:	d30e      	bcc.n	800f606 <__mdiff+0xea>
 800f5e8:	f10e 0103 	add.w	r1, lr, #3
 800f5ec:	1a09      	subs	r1, r1, r0
 800f5ee:	f021 0103 	bic.w	r1, r1, #3
 800f5f2:	3803      	subs	r0, #3
 800f5f4:	4586      	cmp	lr, r0
 800f5f6:	bf38      	it	cc
 800f5f8:	2100      	movcc	r1, #0
 800f5fa:	4419      	add	r1, r3
 800f5fc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f600:	b18b      	cbz	r3, 800f626 <__mdiff+0x10a>
 800f602:	6117      	str	r7, [r2, #16]
 800f604:	e7a4      	b.n	800f550 <__mdiff+0x34>
 800f606:	f855 8b04 	ldr.w	r8, [r5], #4
 800f60a:	fa1f f188 	uxth.w	r1, r8
 800f60e:	4461      	add	r1, ip
 800f610:	140c      	asrs	r4, r1, #16
 800f612:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f616:	b289      	uxth	r1, r1
 800f618:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f61c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800f620:	f846 1b04 	str.w	r1, [r6], #4
 800f624:	e7de      	b.n	800f5e4 <__mdiff+0xc8>
 800f626:	3f01      	subs	r7, #1
 800f628:	e7e8      	b.n	800f5fc <__mdiff+0xe0>
 800f62a:	bf00      	nop
 800f62c:	0801233b 	.word	0x0801233b
 800f630:	080123ac 	.word	0x080123ac

0800f634 <__d2b>:
 800f634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f638:	2101      	movs	r1, #1
 800f63a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f63e:	4690      	mov	r8, r2
 800f640:	461d      	mov	r5, r3
 800f642:	f7ff fcd1 	bl	800efe8 <_Balloc>
 800f646:	4604      	mov	r4, r0
 800f648:	b930      	cbnz	r0, 800f658 <__d2b+0x24>
 800f64a:	4602      	mov	r2, r0
 800f64c:	f240 310a 	movw	r1, #778	; 0x30a
 800f650:	4b24      	ldr	r3, [pc, #144]	; (800f6e4 <__d2b+0xb0>)
 800f652:	4825      	ldr	r0, [pc, #148]	; (800f6e8 <__d2b+0xb4>)
 800f654:	f000 fb54 	bl	800fd00 <__assert_func>
 800f658:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f65c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f660:	bb2d      	cbnz	r5, 800f6ae <__d2b+0x7a>
 800f662:	9301      	str	r3, [sp, #4]
 800f664:	f1b8 0300 	subs.w	r3, r8, #0
 800f668:	d026      	beq.n	800f6b8 <__d2b+0x84>
 800f66a:	4668      	mov	r0, sp
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	f7ff fd83 	bl	800f178 <__lo0bits>
 800f672:	9900      	ldr	r1, [sp, #0]
 800f674:	b1f0      	cbz	r0, 800f6b4 <__d2b+0x80>
 800f676:	9a01      	ldr	r2, [sp, #4]
 800f678:	f1c0 0320 	rsb	r3, r0, #32
 800f67c:	fa02 f303 	lsl.w	r3, r2, r3
 800f680:	430b      	orrs	r3, r1
 800f682:	40c2      	lsrs	r2, r0
 800f684:	6163      	str	r3, [r4, #20]
 800f686:	9201      	str	r2, [sp, #4]
 800f688:	9b01      	ldr	r3, [sp, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	bf14      	ite	ne
 800f68e:	2102      	movne	r1, #2
 800f690:	2101      	moveq	r1, #1
 800f692:	61a3      	str	r3, [r4, #24]
 800f694:	6121      	str	r1, [r4, #16]
 800f696:	b1c5      	cbz	r5, 800f6ca <__d2b+0x96>
 800f698:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f69c:	4405      	add	r5, r0
 800f69e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f6a2:	603d      	str	r5, [r7, #0]
 800f6a4:	6030      	str	r0, [r6, #0]
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	b002      	add	sp, #8
 800f6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f6b2:	e7d6      	b.n	800f662 <__d2b+0x2e>
 800f6b4:	6161      	str	r1, [r4, #20]
 800f6b6:	e7e7      	b.n	800f688 <__d2b+0x54>
 800f6b8:	a801      	add	r0, sp, #4
 800f6ba:	f7ff fd5d 	bl	800f178 <__lo0bits>
 800f6be:	2101      	movs	r1, #1
 800f6c0:	9b01      	ldr	r3, [sp, #4]
 800f6c2:	6121      	str	r1, [r4, #16]
 800f6c4:	6163      	str	r3, [r4, #20]
 800f6c6:	3020      	adds	r0, #32
 800f6c8:	e7e5      	b.n	800f696 <__d2b+0x62>
 800f6ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f6ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f6d2:	6038      	str	r0, [r7, #0]
 800f6d4:	6918      	ldr	r0, [r3, #16]
 800f6d6:	f7ff fd2f 	bl	800f138 <__hi0bits>
 800f6da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f6de:	6031      	str	r1, [r6, #0]
 800f6e0:	e7e1      	b.n	800f6a6 <__d2b+0x72>
 800f6e2:	bf00      	nop
 800f6e4:	0801233b 	.word	0x0801233b
 800f6e8:	080123ac 	.word	0x080123ac

0800f6ec <__ssputs_r>:
 800f6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6f0:	688e      	ldr	r6, [r1, #8]
 800f6f2:	4682      	mov	sl, r0
 800f6f4:	429e      	cmp	r6, r3
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	4690      	mov	r8, r2
 800f6fa:	461f      	mov	r7, r3
 800f6fc:	d838      	bhi.n	800f770 <__ssputs_r+0x84>
 800f6fe:	898a      	ldrh	r2, [r1, #12]
 800f700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f704:	d032      	beq.n	800f76c <__ssputs_r+0x80>
 800f706:	6825      	ldr	r5, [r4, #0]
 800f708:	6909      	ldr	r1, [r1, #16]
 800f70a:	3301      	adds	r3, #1
 800f70c:	eba5 0901 	sub.w	r9, r5, r1
 800f710:	6965      	ldr	r5, [r4, #20]
 800f712:	444b      	add	r3, r9
 800f714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f71c:	106d      	asrs	r5, r5, #1
 800f71e:	429d      	cmp	r5, r3
 800f720:	bf38      	it	cc
 800f722:	461d      	movcc	r5, r3
 800f724:	0553      	lsls	r3, r2, #21
 800f726:	d531      	bpl.n	800f78c <__ssputs_r+0xa0>
 800f728:	4629      	mov	r1, r5
 800f72a:	f7fd fd55 	bl	800d1d8 <_malloc_r>
 800f72e:	4606      	mov	r6, r0
 800f730:	b950      	cbnz	r0, 800f748 <__ssputs_r+0x5c>
 800f732:	230c      	movs	r3, #12
 800f734:	f04f 30ff 	mov.w	r0, #4294967295
 800f738:	f8ca 3000 	str.w	r3, [sl]
 800f73c:	89a3      	ldrh	r3, [r4, #12]
 800f73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f742:	81a3      	strh	r3, [r4, #12]
 800f744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f748:	464a      	mov	r2, r9
 800f74a:	6921      	ldr	r1, [r4, #16]
 800f74c:	f7fd fc98 	bl	800d080 <memcpy>
 800f750:	89a3      	ldrh	r3, [r4, #12]
 800f752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f75a:	81a3      	strh	r3, [r4, #12]
 800f75c:	6126      	str	r6, [r4, #16]
 800f75e:	444e      	add	r6, r9
 800f760:	6026      	str	r6, [r4, #0]
 800f762:	463e      	mov	r6, r7
 800f764:	6165      	str	r5, [r4, #20]
 800f766:	eba5 0509 	sub.w	r5, r5, r9
 800f76a:	60a5      	str	r5, [r4, #8]
 800f76c:	42be      	cmp	r6, r7
 800f76e:	d900      	bls.n	800f772 <__ssputs_r+0x86>
 800f770:	463e      	mov	r6, r7
 800f772:	4632      	mov	r2, r6
 800f774:	4641      	mov	r1, r8
 800f776:	6820      	ldr	r0, [r4, #0]
 800f778:	f7fd fc90 	bl	800d09c <memmove>
 800f77c:	68a3      	ldr	r3, [r4, #8]
 800f77e:	2000      	movs	r0, #0
 800f780:	1b9b      	subs	r3, r3, r6
 800f782:	60a3      	str	r3, [r4, #8]
 800f784:	6823      	ldr	r3, [r4, #0]
 800f786:	4433      	add	r3, r6
 800f788:	6023      	str	r3, [r4, #0]
 800f78a:	e7db      	b.n	800f744 <__ssputs_r+0x58>
 800f78c:	462a      	mov	r2, r5
 800f78e:	f000 fb3d 	bl	800fe0c <_realloc_r>
 800f792:	4606      	mov	r6, r0
 800f794:	2800      	cmp	r0, #0
 800f796:	d1e1      	bne.n	800f75c <__ssputs_r+0x70>
 800f798:	4650      	mov	r0, sl
 800f79a:	6921      	ldr	r1, [r4, #16]
 800f79c:	f7fd fcb4 	bl	800d108 <_free_r>
 800f7a0:	e7c7      	b.n	800f732 <__ssputs_r+0x46>
	...

0800f7a4 <_svfiprintf_r>:
 800f7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a8:	4698      	mov	r8, r3
 800f7aa:	898b      	ldrh	r3, [r1, #12]
 800f7ac:	4607      	mov	r7, r0
 800f7ae:	061b      	lsls	r3, r3, #24
 800f7b0:	460d      	mov	r5, r1
 800f7b2:	4614      	mov	r4, r2
 800f7b4:	b09d      	sub	sp, #116	; 0x74
 800f7b6:	d50e      	bpl.n	800f7d6 <_svfiprintf_r+0x32>
 800f7b8:	690b      	ldr	r3, [r1, #16]
 800f7ba:	b963      	cbnz	r3, 800f7d6 <_svfiprintf_r+0x32>
 800f7bc:	2140      	movs	r1, #64	; 0x40
 800f7be:	f7fd fd0b 	bl	800d1d8 <_malloc_r>
 800f7c2:	6028      	str	r0, [r5, #0]
 800f7c4:	6128      	str	r0, [r5, #16]
 800f7c6:	b920      	cbnz	r0, 800f7d2 <_svfiprintf_r+0x2e>
 800f7c8:	230c      	movs	r3, #12
 800f7ca:	603b      	str	r3, [r7, #0]
 800f7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f7d0:	e0d1      	b.n	800f976 <_svfiprintf_r+0x1d2>
 800f7d2:	2340      	movs	r3, #64	; 0x40
 800f7d4:	616b      	str	r3, [r5, #20]
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7da:	2320      	movs	r3, #32
 800f7dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7e0:	2330      	movs	r3, #48	; 0x30
 800f7e2:	f04f 0901 	mov.w	r9, #1
 800f7e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f990 <_svfiprintf_r+0x1ec>
 800f7ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7f2:	4623      	mov	r3, r4
 800f7f4:	469a      	mov	sl, r3
 800f7f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7fa:	b10a      	cbz	r2, 800f800 <_svfiprintf_r+0x5c>
 800f7fc:	2a25      	cmp	r2, #37	; 0x25
 800f7fe:	d1f9      	bne.n	800f7f4 <_svfiprintf_r+0x50>
 800f800:	ebba 0b04 	subs.w	fp, sl, r4
 800f804:	d00b      	beq.n	800f81e <_svfiprintf_r+0x7a>
 800f806:	465b      	mov	r3, fp
 800f808:	4622      	mov	r2, r4
 800f80a:	4629      	mov	r1, r5
 800f80c:	4638      	mov	r0, r7
 800f80e:	f7ff ff6d 	bl	800f6ec <__ssputs_r>
 800f812:	3001      	adds	r0, #1
 800f814:	f000 80aa 	beq.w	800f96c <_svfiprintf_r+0x1c8>
 800f818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f81a:	445a      	add	r2, fp
 800f81c:	9209      	str	r2, [sp, #36]	; 0x24
 800f81e:	f89a 3000 	ldrb.w	r3, [sl]
 800f822:	2b00      	cmp	r3, #0
 800f824:	f000 80a2 	beq.w	800f96c <_svfiprintf_r+0x1c8>
 800f828:	2300      	movs	r3, #0
 800f82a:	f04f 32ff 	mov.w	r2, #4294967295
 800f82e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f832:	f10a 0a01 	add.w	sl, sl, #1
 800f836:	9304      	str	r3, [sp, #16]
 800f838:	9307      	str	r3, [sp, #28]
 800f83a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f83e:	931a      	str	r3, [sp, #104]	; 0x68
 800f840:	4654      	mov	r4, sl
 800f842:	2205      	movs	r2, #5
 800f844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f848:	4851      	ldr	r0, [pc, #324]	; (800f990 <_svfiprintf_r+0x1ec>)
 800f84a:	f7ff fbb3 	bl	800efb4 <memchr>
 800f84e:	9a04      	ldr	r2, [sp, #16]
 800f850:	b9d8      	cbnz	r0, 800f88a <_svfiprintf_r+0xe6>
 800f852:	06d0      	lsls	r0, r2, #27
 800f854:	bf44      	itt	mi
 800f856:	2320      	movmi	r3, #32
 800f858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f85c:	0711      	lsls	r1, r2, #28
 800f85e:	bf44      	itt	mi
 800f860:	232b      	movmi	r3, #43	; 0x2b
 800f862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f866:	f89a 3000 	ldrb.w	r3, [sl]
 800f86a:	2b2a      	cmp	r3, #42	; 0x2a
 800f86c:	d015      	beq.n	800f89a <_svfiprintf_r+0xf6>
 800f86e:	4654      	mov	r4, sl
 800f870:	2000      	movs	r0, #0
 800f872:	f04f 0c0a 	mov.w	ip, #10
 800f876:	9a07      	ldr	r2, [sp, #28]
 800f878:	4621      	mov	r1, r4
 800f87a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f87e:	3b30      	subs	r3, #48	; 0x30
 800f880:	2b09      	cmp	r3, #9
 800f882:	d94e      	bls.n	800f922 <_svfiprintf_r+0x17e>
 800f884:	b1b0      	cbz	r0, 800f8b4 <_svfiprintf_r+0x110>
 800f886:	9207      	str	r2, [sp, #28]
 800f888:	e014      	b.n	800f8b4 <_svfiprintf_r+0x110>
 800f88a:	eba0 0308 	sub.w	r3, r0, r8
 800f88e:	fa09 f303 	lsl.w	r3, r9, r3
 800f892:	4313      	orrs	r3, r2
 800f894:	46a2      	mov	sl, r4
 800f896:	9304      	str	r3, [sp, #16]
 800f898:	e7d2      	b.n	800f840 <_svfiprintf_r+0x9c>
 800f89a:	9b03      	ldr	r3, [sp, #12]
 800f89c:	1d19      	adds	r1, r3, #4
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	9103      	str	r1, [sp, #12]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	bfbb      	ittet	lt
 800f8a6:	425b      	neglt	r3, r3
 800f8a8:	f042 0202 	orrlt.w	r2, r2, #2
 800f8ac:	9307      	strge	r3, [sp, #28]
 800f8ae:	9307      	strlt	r3, [sp, #28]
 800f8b0:	bfb8      	it	lt
 800f8b2:	9204      	strlt	r2, [sp, #16]
 800f8b4:	7823      	ldrb	r3, [r4, #0]
 800f8b6:	2b2e      	cmp	r3, #46	; 0x2e
 800f8b8:	d10c      	bne.n	800f8d4 <_svfiprintf_r+0x130>
 800f8ba:	7863      	ldrb	r3, [r4, #1]
 800f8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f8be:	d135      	bne.n	800f92c <_svfiprintf_r+0x188>
 800f8c0:	9b03      	ldr	r3, [sp, #12]
 800f8c2:	3402      	adds	r4, #2
 800f8c4:	1d1a      	adds	r2, r3, #4
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	9203      	str	r2, [sp, #12]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	bfb8      	it	lt
 800f8ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8d2:	9305      	str	r3, [sp, #20]
 800f8d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800f994 <_svfiprintf_r+0x1f0>
 800f8d8:	2203      	movs	r2, #3
 800f8da:	4650      	mov	r0, sl
 800f8dc:	7821      	ldrb	r1, [r4, #0]
 800f8de:	f7ff fb69 	bl	800efb4 <memchr>
 800f8e2:	b140      	cbz	r0, 800f8f6 <_svfiprintf_r+0x152>
 800f8e4:	2340      	movs	r3, #64	; 0x40
 800f8e6:	eba0 000a 	sub.w	r0, r0, sl
 800f8ea:	fa03 f000 	lsl.w	r0, r3, r0
 800f8ee:	9b04      	ldr	r3, [sp, #16]
 800f8f0:	3401      	adds	r4, #1
 800f8f2:	4303      	orrs	r3, r0
 800f8f4:	9304      	str	r3, [sp, #16]
 800f8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8fa:	2206      	movs	r2, #6
 800f8fc:	4826      	ldr	r0, [pc, #152]	; (800f998 <_svfiprintf_r+0x1f4>)
 800f8fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f902:	f7ff fb57 	bl	800efb4 <memchr>
 800f906:	2800      	cmp	r0, #0
 800f908:	d038      	beq.n	800f97c <_svfiprintf_r+0x1d8>
 800f90a:	4b24      	ldr	r3, [pc, #144]	; (800f99c <_svfiprintf_r+0x1f8>)
 800f90c:	bb1b      	cbnz	r3, 800f956 <_svfiprintf_r+0x1b2>
 800f90e:	9b03      	ldr	r3, [sp, #12]
 800f910:	3307      	adds	r3, #7
 800f912:	f023 0307 	bic.w	r3, r3, #7
 800f916:	3308      	adds	r3, #8
 800f918:	9303      	str	r3, [sp, #12]
 800f91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f91c:	4433      	add	r3, r6
 800f91e:	9309      	str	r3, [sp, #36]	; 0x24
 800f920:	e767      	b.n	800f7f2 <_svfiprintf_r+0x4e>
 800f922:	460c      	mov	r4, r1
 800f924:	2001      	movs	r0, #1
 800f926:	fb0c 3202 	mla	r2, ip, r2, r3
 800f92a:	e7a5      	b.n	800f878 <_svfiprintf_r+0xd4>
 800f92c:	2300      	movs	r3, #0
 800f92e:	f04f 0c0a 	mov.w	ip, #10
 800f932:	4619      	mov	r1, r3
 800f934:	3401      	adds	r4, #1
 800f936:	9305      	str	r3, [sp, #20]
 800f938:	4620      	mov	r0, r4
 800f93a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f93e:	3a30      	subs	r2, #48	; 0x30
 800f940:	2a09      	cmp	r2, #9
 800f942:	d903      	bls.n	800f94c <_svfiprintf_r+0x1a8>
 800f944:	2b00      	cmp	r3, #0
 800f946:	d0c5      	beq.n	800f8d4 <_svfiprintf_r+0x130>
 800f948:	9105      	str	r1, [sp, #20]
 800f94a:	e7c3      	b.n	800f8d4 <_svfiprintf_r+0x130>
 800f94c:	4604      	mov	r4, r0
 800f94e:	2301      	movs	r3, #1
 800f950:	fb0c 2101 	mla	r1, ip, r1, r2
 800f954:	e7f0      	b.n	800f938 <_svfiprintf_r+0x194>
 800f956:	ab03      	add	r3, sp, #12
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	462a      	mov	r2, r5
 800f95c:	4638      	mov	r0, r7
 800f95e:	4b10      	ldr	r3, [pc, #64]	; (800f9a0 <_svfiprintf_r+0x1fc>)
 800f960:	a904      	add	r1, sp, #16
 800f962:	f7fd fd4b 	bl	800d3fc <_printf_float>
 800f966:	1c42      	adds	r2, r0, #1
 800f968:	4606      	mov	r6, r0
 800f96a:	d1d6      	bne.n	800f91a <_svfiprintf_r+0x176>
 800f96c:	89ab      	ldrh	r3, [r5, #12]
 800f96e:	065b      	lsls	r3, r3, #25
 800f970:	f53f af2c 	bmi.w	800f7cc <_svfiprintf_r+0x28>
 800f974:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f976:	b01d      	add	sp, #116	; 0x74
 800f978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97c:	ab03      	add	r3, sp, #12
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	462a      	mov	r2, r5
 800f982:	4638      	mov	r0, r7
 800f984:	4b06      	ldr	r3, [pc, #24]	; (800f9a0 <_svfiprintf_r+0x1fc>)
 800f986:	a904      	add	r1, sp, #16
 800f988:	f7fd ffd4 	bl	800d934 <_printf_i>
 800f98c:	e7eb      	b.n	800f966 <_svfiprintf_r+0x1c2>
 800f98e:	bf00      	nop
 800f990:	08012504 	.word	0x08012504
 800f994:	0801250a 	.word	0x0801250a
 800f998:	0801250e 	.word	0x0801250e
 800f99c:	0800d3fd 	.word	0x0800d3fd
 800f9a0:	0800f6ed 	.word	0x0800f6ed

0800f9a4 <__sfputc_r>:
 800f9a4:	6893      	ldr	r3, [r2, #8]
 800f9a6:	b410      	push	{r4}
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	6093      	str	r3, [r2, #8]
 800f9ae:	da07      	bge.n	800f9c0 <__sfputc_r+0x1c>
 800f9b0:	6994      	ldr	r4, [r2, #24]
 800f9b2:	42a3      	cmp	r3, r4
 800f9b4:	db01      	blt.n	800f9ba <__sfputc_r+0x16>
 800f9b6:	290a      	cmp	r1, #10
 800f9b8:	d102      	bne.n	800f9c0 <__sfputc_r+0x1c>
 800f9ba:	bc10      	pop	{r4}
 800f9bc:	f7fe b99e 	b.w	800dcfc <__swbuf_r>
 800f9c0:	6813      	ldr	r3, [r2, #0]
 800f9c2:	1c58      	adds	r0, r3, #1
 800f9c4:	6010      	str	r0, [r2, #0]
 800f9c6:	7019      	strb	r1, [r3, #0]
 800f9c8:	4608      	mov	r0, r1
 800f9ca:	bc10      	pop	{r4}
 800f9cc:	4770      	bx	lr

0800f9ce <__sfputs_r>:
 800f9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9d0:	4606      	mov	r6, r0
 800f9d2:	460f      	mov	r7, r1
 800f9d4:	4614      	mov	r4, r2
 800f9d6:	18d5      	adds	r5, r2, r3
 800f9d8:	42ac      	cmp	r4, r5
 800f9da:	d101      	bne.n	800f9e0 <__sfputs_r+0x12>
 800f9dc:	2000      	movs	r0, #0
 800f9de:	e007      	b.n	800f9f0 <__sfputs_r+0x22>
 800f9e0:	463a      	mov	r2, r7
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9e8:	f7ff ffdc 	bl	800f9a4 <__sfputc_r>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d1f3      	bne.n	800f9d8 <__sfputs_r+0xa>
 800f9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9f4 <_vfiprintf_r>:
 800f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f8:	460d      	mov	r5, r1
 800f9fa:	4614      	mov	r4, r2
 800f9fc:	4698      	mov	r8, r3
 800f9fe:	4606      	mov	r6, r0
 800fa00:	b09d      	sub	sp, #116	; 0x74
 800fa02:	b118      	cbz	r0, 800fa0c <_vfiprintf_r+0x18>
 800fa04:	6983      	ldr	r3, [r0, #24]
 800fa06:	b90b      	cbnz	r3, 800fa0c <_vfiprintf_r+0x18>
 800fa08:	f7ff f9ca 	bl	800eda0 <__sinit>
 800fa0c:	4b89      	ldr	r3, [pc, #548]	; (800fc34 <_vfiprintf_r+0x240>)
 800fa0e:	429d      	cmp	r5, r3
 800fa10:	d11b      	bne.n	800fa4a <_vfiprintf_r+0x56>
 800fa12:	6875      	ldr	r5, [r6, #4]
 800fa14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa16:	07d9      	lsls	r1, r3, #31
 800fa18:	d405      	bmi.n	800fa26 <_vfiprintf_r+0x32>
 800fa1a:	89ab      	ldrh	r3, [r5, #12]
 800fa1c:	059a      	lsls	r2, r3, #22
 800fa1e:	d402      	bmi.n	800fa26 <_vfiprintf_r+0x32>
 800fa20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa22:	f7ff fa60 	bl	800eee6 <__retarget_lock_acquire_recursive>
 800fa26:	89ab      	ldrh	r3, [r5, #12]
 800fa28:	071b      	lsls	r3, r3, #28
 800fa2a:	d501      	bpl.n	800fa30 <_vfiprintf_r+0x3c>
 800fa2c:	692b      	ldr	r3, [r5, #16]
 800fa2e:	b9eb      	cbnz	r3, 800fa6c <_vfiprintf_r+0x78>
 800fa30:	4629      	mov	r1, r5
 800fa32:	4630      	mov	r0, r6
 800fa34:	f7fe f9b4 	bl	800dda0 <__swsetup_r>
 800fa38:	b1c0      	cbz	r0, 800fa6c <_vfiprintf_r+0x78>
 800fa3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa3c:	07dc      	lsls	r4, r3, #31
 800fa3e:	d50e      	bpl.n	800fa5e <_vfiprintf_r+0x6a>
 800fa40:	f04f 30ff 	mov.w	r0, #4294967295
 800fa44:	b01d      	add	sp, #116	; 0x74
 800fa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa4a:	4b7b      	ldr	r3, [pc, #492]	; (800fc38 <_vfiprintf_r+0x244>)
 800fa4c:	429d      	cmp	r5, r3
 800fa4e:	d101      	bne.n	800fa54 <_vfiprintf_r+0x60>
 800fa50:	68b5      	ldr	r5, [r6, #8]
 800fa52:	e7df      	b.n	800fa14 <_vfiprintf_r+0x20>
 800fa54:	4b79      	ldr	r3, [pc, #484]	; (800fc3c <_vfiprintf_r+0x248>)
 800fa56:	429d      	cmp	r5, r3
 800fa58:	bf08      	it	eq
 800fa5a:	68f5      	ldreq	r5, [r6, #12]
 800fa5c:	e7da      	b.n	800fa14 <_vfiprintf_r+0x20>
 800fa5e:	89ab      	ldrh	r3, [r5, #12]
 800fa60:	0598      	lsls	r0, r3, #22
 800fa62:	d4ed      	bmi.n	800fa40 <_vfiprintf_r+0x4c>
 800fa64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa66:	f7ff fa3f 	bl	800eee8 <__retarget_lock_release_recursive>
 800fa6a:	e7e9      	b.n	800fa40 <_vfiprintf_r+0x4c>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa70:	2320      	movs	r3, #32
 800fa72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa76:	2330      	movs	r3, #48	; 0x30
 800fa78:	f04f 0901 	mov.w	r9, #1
 800fa7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800fc40 <_vfiprintf_r+0x24c>
 800fa84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa88:	4623      	mov	r3, r4
 800fa8a:	469a      	mov	sl, r3
 800fa8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa90:	b10a      	cbz	r2, 800fa96 <_vfiprintf_r+0xa2>
 800fa92:	2a25      	cmp	r2, #37	; 0x25
 800fa94:	d1f9      	bne.n	800fa8a <_vfiprintf_r+0x96>
 800fa96:	ebba 0b04 	subs.w	fp, sl, r4
 800fa9a:	d00b      	beq.n	800fab4 <_vfiprintf_r+0xc0>
 800fa9c:	465b      	mov	r3, fp
 800fa9e:	4622      	mov	r2, r4
 800faa0:	4629      	mov	r1, r5
 800faa2:	4630      	mov	r0, r6
 800faa4:	f7ff ff93 	bl	800f9ce <__sfputs_r>
 800faa8:	3001      	adds	r0, #1
 800faaa:	f000 80aa 	beq.w	800fc02 <_vfiprintf_r+0x20e>
 800faae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fab0:	445a      	add	r2, fp
 800fab2:	9209      	str	r2, [sp, #36]	; 0x24
 800fab4:	f89a 3000 	ldrb.w	r3, [sl]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f000 80a2 	beq.w	800fc02 <_vfiprintf_r+0x20e>
 800fabe:	2300      	movs	r3, #0
 800fac0:	f04f 32ff 	mov.w	r2, #4294967295
 800fac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fac8:	f10a 0a01 	add.w	sl, sl, #1
 800facc:	9304      	str	r3, [sp, #16]
 800face:	9307      	str	r3, [sp, #28]
 800fad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fad4:	931a      	str	r3, [sp, #104]	; 0x68
 800fad6:	4654      	mov	r4, sl
 800fad8:	2205      	movs	r2, #5
 800fada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fade:	4858      	ldr	r0, [pc, #352]	; (800fc40 <_vfiprintf_r+0x24c>)
 800fae0:	f7ff fa68 	bl	800efb4 <memchr>
 800fae4:	9a04      	ldr	r2, [sp, #16]
 800fae6:	b9d8      	cbnz	r0, 800fb20 <_vfiprintf_r+0x12c>
 800fae8:	06d1      	lsls	r1, r2, #27
 800faea:	bf44      	itt	mi
 800faec:	2320      	movmi	r3, #32
 800faee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faf2:	0713      	lsls	r3, r2, #28
 800faf4:	bf44      	itt	mi
 800faf6:	232b      	movmi	r3, #43	; 0x2b
 800faf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fafc:	f89a 3000 	ldrb.w	r3, [sl]
 800fb00:	2b2a      	cmp	r3, #42	; 0x2a
 800fb02:	d015      	beq.n	800fb30 <_vfiprintf_r+0x13c>
 800fb04:	4654      	mov	r4, sl
 800fb06:	2000      	movs	r0, #0
 800fb08:	f04f 0c0a 	mov.w	ip, #10
 800fb0c:	9a07      	ldr	r2, [sp, #28]
 800fb0e:	4621      	mov	r1, r4
 800fb10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb14:	3b30      	subs	r3, #48	; 0x30
 800fb16:	2b09      	cmp	r3, #9
 800fb18:	d94e      	bls.n	800fbb8 <_vfiprintf_r+0x1c4>
 800fb1a:	b1b0      	cbz	r0, 800fb4a <_vfiprintf_r+0x156>
 800fb1c:	9207      	str	r2, [sp, #28]
 800fb1e:	e014      	b.n	800fb4a <_vfiprintf_r+0x156>
 800fb20:	eba0 0308 	sub.w	r3, r0, r8
 800fb24:	fa09 f303 	lsl.w	r3, r9, r3
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	46a2      	mov	sl, r4
 800fb2c:	9304      	str	r3, [sp, #16]
 800fb2e:	e7d2      	b.n	800fad6 <_vfiprintf_r+0xe2>
 800fb30:	9b03      	ldr	r3, [sp, #12]
 800fb32:	1d19      	adds	r1, r3, #4
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	9103      	str	r1, [sp, #12]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	bfbb      	ittet	lt
 800fb3c:	425b      	neglt	r3, r3
 800fb3e:	f042 0202 	orrlt.w	r2, r2, #2
 800fb42:	9307      	strge	r3, [sp, #28]
 800fb44:	9307      	strlt	r3, [sp, #28]
 800fb46:	bfb8      	it	lt
 800fb48:	9204      	strlt	r2, [sp, #16]
 800fb4a:	7823      	ldrb	r3, [r4, #0]
 800fb4c:	2b2e      	cmp	r3, #46	; 0x2e
 800fb4e:	d10c      	bne.n	800fb6a <_vfiprintf_r+0x176>
 800fb50:	7863      	ldrb	r3, [r4, #1]
 800fb52:	2b2a      	cmp	r3, #42	; 0x2a
 800fb54:	d135      	bne.n	800fbc2 <_vfiprintf_r+0x1ce>
 800fb56:	9b03      	ldr	r3, [sp, #12]
 800fb58:	3402      	adds	r4, #2
 800fb5a:	1d1a      	adds	r2, r3, #4
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	9203      	str	r2, [sp, #12]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	bfb8      	it	lt
 800fb64:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb68:	9305      	str	r3, [sp, #20]
 800fb6a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800fc44 <_vfiprintf_r+0x250>
 800fb6e:	2203      	movs	r2, #3
 800fb70:	4650      	mov	r0, sl
 800fb72:	7821      	ldrb	r1, [r4, #0]
 800fb74:	f7ff fa1e 	bl	800efb4 <memchr>
 800fb78:	b140      	cbz	r0, 800fb8c <_vfiprintf_r+0x198>
 800fb7a:	2340      	movs	r3, #64	; 0x40
 800fb7c:	eba0 000a 	sub.w	r0, r0, sl
 800fb80:	fa03 f000 	lsl.w	r0, r3, r0
 800fb84:	9b04      	ldr	r3, [sp, #16]
 800fb86:	3401      	adds	r4, #1
 800fb88:	4303      	orrs	r3, r0
 800fb8a:	9304      	str	r3, [sp, #16]
 800fb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb90:	2206      	movs	r2, #6
 800fb92:	482d      	ldr	r0, [pc, #180]	; (800fc48 <_vfiprintf_r+0x254>)
 800fb94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb98:	f7ff fa0c 	bl	800efb4 <memchr>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d03f      	beq.n	800fc20 <_vfiprintf_r+0x22c>
 800fba0:	4b2a      	ldr	r3, [pc, #168]	; (800fc4c <_vfiprintf_r+0x258>)
 800fba2:	bb1b      	cbnz	r3, 800fbec <_vfiprintf_r+0x1f8>
 800fba4:	9b03      	ldr	r3, [sp, #12]
 800fba6:	3307      	adds	r3, #7
 800fba8:	f023 0307 	bic.w	r3, r3, #7
 800fbac:	3308      	adds	r3, #8
 800fbae:	9303      	str	r3, [sp, #12]
 800fbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbb2:	443b      	add	r3, r7
 800fbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800fbb6:	e767      	b.n	800fa88 <_vfiprintf_r+0x94>
 800fbb8:	460c      	mov	r4, r1
 800fbba:	2001      	movs	r0, #1
 800fbbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbc0:	e7a5      	b.n	800fb0e <_vfiprintf_r+0x11a>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	f04f 0c0a 	mov.w	ip, #10
 800fbc8:	4619      	mov	r1, r3
 800fbca:	3401      	adds	r4, #1
 800fbcc:	9305      	str	r3, [sp, #20]
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbd4:	3a30      	subs	r2, #48	; 0x30
 800fbd6:	2a09      	cmp	r2, #9
 800fbd8:	d903      	bls.n	800fbe2 <_vfiprintf_r+0x1ee>
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d0c5      	beq.n	800fb6a <_vfiprintf_r+0x176>
 800fbde:	9105      	str	r1, [sp, #20]
 800fbe0:	e7c3      	b.n	800fb6a <_vfiprintf_r+0x176>
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbea:	e7f0      	b.n	800fbce <_vfiprintf_r+0x1da>
 800fbec:	ab03      	add	r3, sp, #12
 800fbee:	9300      	str	r3, [sp, #0]
 800fbf0:	462a      	mov	r2, r5
 800fbf2:	4630      	mov	r0, r6
 800fbf4:	4b16      	ldr	r3, [pc, #88]	; (800fc50 <_vfiprintf_r+0x25c>)
 800fbf6:	a904      	add	r1, sp, #16
 800fbf8:	f7fd fc00 	bl	800d3fc <_printf_float>
 800fbfc:	4607      	mov	r7, r0
 800fbfe:	1c78      	adds	r0, r7, #1
 800fc00:	d1d6      	bne.n	800fbb0 <_vfiprintf_r+0x1bc>
 800fc02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc04:	07d9      	lsls	r1, r3, #31
 800fc06:	d405      	bmi.n	800fc14 <_vfiprintf_r+0x220>
 800fc08:	89ab      	ldrh	r3, [r5, #12]
 800fc0a:	059a      	lsls	r2, r3, #22
 800fc0c:	d402      	bmi.n	800fc14 <_vfiprintf_r+0x220>
 800fc0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc10:	f7ff f96a 	bl	800eee8 <__retarget_lock_release_recursive>
 800fc14:	89ab      	ldrh	r3, [r5, #12]
 800fc16:	065b      	lsls	r3, r3, #25
 800fc18:	f53f af12 	bmi.w	800fa40 <_vfiprintf_r+0x4c>
 800fc1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc1e:	e711      	b.n	800fa44 <_vfiprintf_r+0x50>
 800fc20:	ab03      	add	r3, sp, #12
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	462a      	mov	r2, r5
 800fc26:	4630      	mov	r0, r6
 800fc28:	4b09      	ldr	r3, [pc, #36]	; (800fc50 <_vfiprintf_r+0x25c>)
 800fc2a:	a904      	add	r1, sp, #16
 800fc2c:	f7fd fe82 	bl	800d934 <_printf_i>
 800fc30:	e7e4      	b.n	800fbfc <_vfiprintf_r+0x208>
 800fc32:	bf00      	nop
 800fc34:	0801236c 	.word	0x0801236c
 800fc38:	0801238c 	.word	0x0801238c
 800fc3c:	0801234c 	.word	0x0801234c
 800fc40:	08012504 	.word	0x08012504
 800fc44:	0801250a 	.word	0x0801250a
 800fc48:	0801250e 	.word	0x0801250e
 800fc4c:	0800d3fd 	.word	0x0800d3fd
 800fc50:	0800f9cf 	.word	0x0800f9cf

0800fc54 <__sread>:
 800fc54:	b510      	push	{r4, lr}
 800fc56:	460c      	mov	r4, r1
 800fc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc5c:	f000 f906 	bl	800fe6c <_read_r>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	bfab      	itete	ge
 800fc64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc66:	89a3      	ldrhlt	r3, [r4, #12]
 800fc68:	181b      	addge	r3, r3, r0
 800fc6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc6e:	bfac      	ite	ge
 800fc70:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc72:	81a3      	strhlt	r3, [r4, #12]
 800fc74:	bd10      	pop	{r4, pc}

0800fc76 <__swrite>:
 800fc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc7a:	461f      	mov	r7, r3
 800fc7c:	898b      	ldrh	r3, [r1, #12]
 800fc7e:	4605      	mov	r5, r0
 800fc80:	05db      	lsls	r3, r3, #23
 800fc82:	460c      	mov	r4, r1
 800fc84:	4616      	mov	r6, r2
 800fc86:	d505      	bpl.n	800fc94 <__swrite+0x1e>
 800fc88:	2302      	movs	r3, #2
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc90:	f000 f898 	bl	800fdc4 <_lseek_r>
 800fc94:	89a3      	ldrh	r3, [r4, #12]
 800fc96:	4632      	mov	r2, r6
 800fc98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc9c:	81a3      	strh	r3, [r4, #12]
 800fc9e:	4628      	mov	r0, r5
 800fca0:	463b      	mov	r3, r7
 800fca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcaa:	f000 b817 	b.w	800fcdc <_write_r>

0800fcae <__sseek>:
 800fcae:	b510      	push	{r4, lr}
 800fcb0:	460c      	mov	r4, r1
 800fcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcb6:	f000 f885 	bl	800fdc4 <_lseek_r>
 800fcba:	1c43      	adds	r3, r0, #1
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	bf15      	itete	ne
 800fcc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fcc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fcc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fcca:	81a3      	strheq	r3, [r4, #12]
 800fccc:	bf18      	it	ne
 800fcce:	81a3      	strhne	r3, [r4, #12]
 800fcd0:	bd10      	pop	{r4, pc}

0800fcd2 <__sclose>:
 800fcd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcd6:	f000 b831 	b.w	800fd3c <_close_r>
	...

0800fcdc <_write_r>:
 800fcdc:	b538      	push	{r3, r4, r5, lr}
 800fcde:	4604      	mov	r4, r0
 800fce0:	4608      	mov	r0, r1
 800fce2:	4611      	mov	r1, r2
 800fce4:	2200      	movs	r2, #0
 800fce6:	4d05      	ldr	r5, [pc, #20]	; (800fcfc <_write_r+0x20>)
 800fce8:	602a      	str	r2, [r5, #0]
 800fcea:	461a      	mov	r2, r3
 800fcec:	f7f4 f81c 	bl	8003d28 <_write>
 800fcf0:	1c43      	adds	r3, r0, #1
 800fcf2:	d102      	bne.n	800fcfa <_write_r+0x1e>
 800fcf4:	682b      	ldr	r3, [r5, #0]
 800fcf6:	b103      	cbz	r3, 800fcfa <_write_r+0x1e>
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	bd38      	pop	{r3, r4, r5, pc}
 800fcfc:	200010d0 	.word	0x200010d0

0800fd00 <__assert_func>:
 800fd00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd02:	4614      	mov	r4, r2
 800fd04:	461a      	mov	r2, r3
 800fd06:	4b09      	ldr	r3, [pc, #36]	; (800fd2c <__assert_func+0x2c>)
 800fd08:	4605      	mov	r5, r0
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68d8      	ldr	r0, [r3, #12]
 800fd0e:	b14c      	cbz	r4, 800fd24 <__assert_func+0x24>
 800fd10:	4b07      	ldr	r3, [pc, #28]	; (800fd30 <__assert_func+0x30>)
 800fd12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd16:	9100      	str	r1, [sp, #0]
 800fd18:	462b      	mov	r3, r5
 800fd1a:	4906      	ldr	r1, [pc, #24]	; (800fd34 <__assert_func+0x34>)
 800fd1c:	f000 f81e 	bl	800fd5c <fiprintf>
 800fd20:	f000 f8c3 	bl	800feaa <abort>
 800fd24:	4b04      	ldr	r3, [pc, #16]	; (800fd38 <__assert_func+0x38>)
 800fd26:	461c      	mov	r4, r3
 800fd28:	e7f3      	b.n	800fd12 <__assert_func+0x12>
 800fd2a:	bf00      	nop
 800fd2c:	20000030 	.word	0x20000030
 800fd30:	08012515 	.word	0x08012515
 800fd34:	08012522 	.word	0x08012522
 800fd38:	08012550 	.word	0x08012550

0800fd3c <_close_r>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	2300      	movs	r3, #0
 800fd40:	4d05      	ldr	r5, [pc, #20]	; (800fd58 <_close_r+0x1c>)
 800fd42:	4604      	mov	r4, r0
 800fd44:	4608      	mov	r0, r1
 800fd46:	602b      	str	r3, [r5, #0]
 800fd48:	f7f5 f9b8 	bl	80050bc <_close>
 800fd4c:	1c43      	adds	r3, r0, #1
 800fd4e:	d102      	bne.n	800fd56 <_close_r+0x1a>
 800fd50:	682b      	ldr	r3, [r5, #0]
 800fd52:	b103      	cbz	r3, 800fd56 <_close_r+0x1a>
 800fd54:	6023      	str	r3, [r4, #0]
 800fd56:	bd38      	pop	{r3, r4, r5, pc}
 800fd58:	200010d0 	.word	0x200010d0

0800fd5c <fiprintf>:
 800fd5c:	b40e      	push	{r1, r2, r3}
 800fd5e:	b503      	push	{r0, r1, lr}
 800fd60:	4601      	mov	r1, r0
 800fd62:	ab03      	add	r3, sp, #12
 800fd64:	4805      	ldr	r0, [pc, #20]	; (800fd7c <fiprintf+0x20>)
 800fd66:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd6a:	6800      	ldr	r0, [r0, #0]
 800fd6c:	9301      	str	r3, [sp, #4]
 800fd6e:	f7ff fe41 	bl	800f9f4 <_vfiprintf_r>
 800fd72:	b002      	add	sp, #8
 800fd74:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd78:	b003      	add	sp, #12
 800fd7a:	4770      	bx	lr
 800fd7c:	20000030 	.word	0x20000030

0800fd80 <_fstat_r>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	2300      	movs	r3, #0
 800fd84:	4d06      	ldr	r5, [pc, #24]	; (800fda0 <_fstat_r+0x20>)
 800fd86:	4604      	mov	r4, r0
 800fd88:	4608      	mov	r0, r1
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	602b      	str	r3, [r5, #0]
 800fd8e:	f7f5 f9a0 	bl	80050d2 <_fstat>
 800fd92:	1c43      	adds	r3, r0, #1
 800fd94:	d102      	bne.n	800fd9c <_fstat_r+0x1c>
 800fd96:	682b      	ldr	r3, [r5, #0]
 800fd98:	b103      	cbz	r3, 800fd9c <_fstat_r+0x1c>
 800fd9a:	6023      	str	r3, [r4, #0]
 800fd9c:	bd38      	pop	{r3, r4, r5, pc}
 800fd9e:	bf00      	nop
 800fda0:	200010d0 	.word	0x200010d0

0800fda4 <_isatty_r>:
 800fda4:	b538      	push	{r3, r4, r5, lr}
 800fda6:	2300      	movs	r3, #0
 800fda8:	4d05      	ldr	r5, [pc, #20]	; (800fdc0 <_isatty_r+0x1c>)
 800fdaa:	4604      	mov	r4, r0
 800fdac:	4608      	mov	r0, r1
 800fdae:	602b      	str	r3, [r5, #0]
 800fdb0:	f7f5 f99e 	bl	80050f0 <_isatty>
 800fdb4:	1c43      	adds	r3, r0, #1
 800fdb6:	d102      	bne.n	800fdbe <_isatty_r+0x1a>
 800fdb8:	682b      	ldr	r3, [r5, #0]
 800fdba:	b103      	cbz	r3, 800fdbe <_isatty_r+0x1a>
 800fdbc:	6023      	str	r3, [r4, #0]
 800fdbe:	bd38      	pop	{r3, r4, r5, pc}
 800fdc0:	200010d0 	.word	0x200010d0

0800fdc4 <_lseek_r>:
 800fdc4:	b538      	push	{r3, r4, r5, lr}
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	4608      	mov	r0, r1
 800fdca:	4611      	mov	r1, r2
 800fdcc:	2200      	movs	r2, #0
 800fdce:	4d05      	ldr	r5, [pc, #20]	; (800fde4 <_lseek_r+0x20>)
 800fdd0:	602a      	str	r2, [r5, #0]
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	f7f5 f996 	bl	8005104 <_lseek>
 800fdd8:	1c43      	adds	r3, r0, #1
 800fdda:	d102      	bne.n	800fde2 <_lseek_r+0x1e>
 800fddc:	682b      	ldr	r3, [r5, #0]
 800fdde:	b103      	cbz	r3, 800fde2 <_lseek_r+0x1e>
 800fde0:	6023      	str	r3, [r4, #0]
 800fde2:	bd38      	pop	{r3, r4, r5, pc}
 800fde4:	200010d0 	.word	0x200010d0

0800fde8 <__ascii_mbtowc>:
 800fde8:	b082      	sub	sp, #8
 800fdea:	b901      	cbnz	r1, 800fdee <__ascii_mbtowc+0x6>
 800fdec:	a901      	add	r1, sp, #4
 800fdee:	b142      	cbz	r2, 800fe02 <__ascii_mbtowc+0x1a>
 800fdf0:	b14b      	cbz	r3, 800fe06 <__ascii_mbtowc+0x1e>
 800fdf2:	7813      	ldrb	r3, [r2, #0]
 800fdf4:	600b      	str	r3, [r1, #0]
 800fdf6:	7812      	ldrb	r2, [r2, #0]
 800fdf8:	1e10      	subs	r0, r2, #0
 800fdfa:	bf18      	it	ne
 800fdfc:	2001      	movne	r0, #1
 800fdfe:	b002      	add	sp, #8
 800fe00:	4770      	bx	lr
 800fe02:	4610      	mov	r0, r2
 800fe04:	e7fb      	b.n	800fdfe <__ascii_mbtowc+0x16>
 800fe06:	f06f 0001 	mvn.w	r0, #1
 800fe0a:	e7f8      	b.n	800fdfe <__ascii_mbtowc+0x16>

0800fe0c <_realloc_r>:
 800fe0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe10:	4680      	mov	r8, r0
 800fe12:	4614      	mov	r4, r2
 800fe14:	460e      	mov	r6, r1
 800fe16:	b921      	cbnz	r1, 800fe22 <_realloc_r+0x16>
 800fe18:	4611      	mov	r1, r2
 800fe1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1e:	f7fd b9db 	b.w	800d1d8 <_malloc_r>
 800fe22:	b92a      	cbnz	r2, 800fe30 <_realloc_r+0x24>
 800fe24:	f7fd f970 	bl	800d108 <_free_r>
 800fe28:	4625      	mov	r5, r4
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe30:	f000 f842 	bl	800feb8 <_malloc_usable_size_r>
 800fe34:	4284      	cmp	r4, r0
 800fe36:	4607      	mov	r7, r0
 800fe38:	d802      	bhi.n	800fe40 <_realloc_r+0x34>
 800fe3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe3e:	d812      	bhi.n	800fe66 <_realloc_r+0x5a>
 800fe40:	4621      	mov	r1, r4
 800fe42:	4640      	mov	r0, r8
 800fe44:	f7fd f9c8 	bl	800d1d8 <_malloc_r>
 800fe48:	4605      	mov	r5, r0
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d0ed      	beq.n	800fe2a <_realloc_r+0x1e>
 800fe4e:	42bc      	cmp	r4, r7
 800fe50:	4622      	mov	r2, r4
 800fe52:	4631      	mov	r1, r6
 800fe54:	bf28      	it	cs
 800fe56:	463a      	movcs	r2, r7
 800fe58:	f7fd f912 	bl	800d080 <memcpy>
 800fe5c:	4631      	mov	r1, r6
 800fe5e:	4640      	mov	r0, r8
 800fe60:	f7fd f952 	bl	800d108 <_free_r>
 800fe64:	e7e1      	b.n	800fe2a <_realloc_r+0x1e>
 800fe66:	4635      	mov	r5, r6
 800fe68:	e7df      	b.n	800fe2a <_realloc_r+0x1e>
	...

0800fe6c <_read_r>:
 800fe6c:	b538      	push	{r3, r4, r5, lr}
 800fe6e:	4604      	mov	r4, r0
 800fe70:	4608      	mov	r0, r1
 800fe72:	4611      	mov	r1, r2
 800fe74:	2200      	movs	r2, #0
 800fe76:	4d05      	ldr	r5, [pc, #20]	; (800fe8c <_read_r+0x20>)
 800fe78:	602a      	str	r2, [r5, #0]
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	f7f5 f901 	bl	8005082 <_read>
 800fe80:	1c43      	adds	r3, r0, #1
 800fe82:	d102      	bne.n	800fe8a <_read_r+0x1e>
 800fe84:	682b      	ldr	r3, [r5, #0]
 800fe86:	b103      	cbz	r3, 800fe8a <_read_r+0x1e>
 800fe88:	6023      	str	r3, [r4, #0]
 800fe8a:	bd38      	pop	{r3, r4, r5, pc}
 800fe8c:	200010d0 	.word	0x200010d0

0800fe90 <__ascii_wctomb>:
 800fe90:	4603      	mov	r3, r0
 800fe92:	4608      	mov	r0, r1
 800fe94:	b141      	cbz	r1, 800fea8 <__ascii_wctomb+0x18>
 800fe96:	2aff      	cmp	r2, #255	; 0xff
 800fe98:	d904      	bls.n	800fea4 <__ascii_wctomb+0x14>
 800fe9a:	228a      	movs	r2, #138	; 0x8a
 800fe9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fea0:	601a      	str	r2, [r3, #0]
 800fea2:	4770      	bx	lr
 800fea4:	2001      	movs	r0, #1
 800fea6:	700a      	strb	r2, [r1, #0]
 800fea8:	4770      	bx	lr

0800feaa <abort>:
 800feaa:	2006      	movs	r0, #6
 800feac:	b508      	push	{r3, lr}
 800feae:	f000 f833 	bl	800ff18 <raise>
 800feb2:	2001      	movs	r0, #1
 800feb4:	f7f5 f8db 	bl	800506e <_exit>

0800feb8 <_malloc_usable_size_r>:
 800feb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800febc:	1f18      	subs	r0, r3, #4
 800febe:	2b00      	cmp	r3, #0
 800fec0:	bfbc      	itt	lt
 800fec2:	580b      	ldrlt	r3, [r1, r0]
 800fec4:	18c0      	addlt	r0, r0, r3
 800fec6:	4770      	bx	lr

0800fec8 <_raise_r>:
 800fec8:	291f      	cmp	r1, #31
 800feca:	b538      	push	{r3, r4, r5, lr}
 800fecc:	4604      	mov	r4, r0
 800fece:	460d      	mov	r5, r1
 800fed0:	d904      	bls.n	800fedc <_raise_r+0x14>
 800fed2:	2316      	movs	r3, #22
 800fed4:	6003      	str	r3, [r0, #0]
 800fed6:	f04f 30ff 	mov.w	r0, #4294967295
 800feda:	bd38      	pop	{r3, r4, r5, pc}
 800fedc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fede:	b112      	cbz	r2, 800fee6 <_raise_r+0x1e>
 800fee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fee4:	b94b      	cbnz	r3, 800fefa <_raise_r+0x32>
 800fee6:	4620      	mov	r0, r4
 800fee8:	f000 f830 	bl	800ff4c <_getpid_r>
 800feec:	462a      	mov	r2, r5
 800feee:	4601      	mov	r1, r0
 800fef0:	4620      	mov	r0, r4
 800fef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fef6:	f000 b817 	b.w	800ff28 <_kill_r>
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d00a      	beq.n	800ff14 <_raise_r+0x4c>
 800fefe:	1c59      	adds	r1, r3, #1
 800ff00:	d103      	bne.n	800ff0a <_raise_r+0x42>
 800ff02:	2316      	movs	r3, #22
 800ff04:	6003      	str	r3, [r0, #0]
 800ff06:	2001      	movs	r0, #1
 800ff08:	e7e7      	b.n	800feda <_raise_r+0x12>
 800ff0a:	2400      	movs	r4, #0
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff12:	4798      	blx	r3
 800ff14:	2000      	movs	r0, #0
 800ff16:	e7e0      	b.n	800feda <_raise_r+0x12>

0800ff18 <raise>:
 800ff18:	4b02      	ldr	r3, [pc, #8]	; (800ff24 <raise+0xc>)
 800ff1a:	4601      	mov	r1, r0
 800ff1c:	6818      	ldr	r0, [r3, #0]
 800ff1e:	f7ff bfd3 	b.w	800fec8 <_raise_r>
 800ff22:	bf00      	nop
 800ff24:	20000030 	.word	0x20000030

0800ff28 <_kill_r>:
 800ff28:	b538      	push	{r3, r4, r5, lr}
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	4d06      	ldr	r5, [pc, #24]	; (800ff48 <_kill_r+0x20>)
 800ff2e:	4604      	mov	r4, r0
 800ff30:	4608      	mov	r0, r1
 800ff32:	4611      	mov	r1, r2
 800ff34:	602b      	str	r3, [r5, #0]
 800ff36:	f7f5 f88a 	bl	800504e <_kill>
 800ff3a:	1c43      	adds	r3, r0, #1
 800ff3c:	d102      	bne.n	800ff44 <_kill_r+0x1c>
 800ff3e:	682b      	ldr	r3, [r5, #0]
 800ff40:	b103      	cbz	r3, 800ff44 <_kill_r+0x1c>
 800ff42:	6023      	str	r3, [r4, #0]
 800ff44:	bd38      	pop	{r3, r4, r5, pc}
 800ff46:	bf00      	nop
 800ff48:	200010d0 	.word	0x200010d0

0800ff4c <_getpid_r>:
 800ff4c:	f7f5 b878 	b.w	8005040 <_getpid>

0800ff50 <cosf>:
 800ff50:	b507      	push	{r0, r1, r2, lr}
 800ff52:	4a1a      	ldr	r2, [pc, #104]	; (800ffbc <cosf+0x6c>)
 800ff54:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	4601      	mov	r1, r0
 800ff5c:	dc05      	bgt.n	800ff6a <cosf+0x1a>
 800ff5e:	2100      	movs	r1, #0
 800ff60:	b003      	add	sp, #12
 800ff62:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff66:	f000 b9e9 	b.w	801033c <__kernel_cosf>
 800ff6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ff6e:	db04      	blt.n	800ff7a <cosf+0x2a>
 800ff70:	f7f0 fdde 	bl	8000b30 <__aeabi_fsub>
 800ff74:	b003      	add	sp, #12
 800ff76:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff7a:	4669      	mov	r1, sp
 800ff7c:	f000 f880 	bl	8010080 <__ieee754_rem_pio2f>
 800ff80:	f000 0203 	and.w	r2, r0, #3
 800ff84:	2a01      	cmp	r2, #1
 800ff86:	d007      	beq.n	800ff98 <cosf+0x48>
 800ff88:	2a02      	cmp	r2, #2
 800ff8a:	d00c      	beq.n	800ffa6 <cosf+0x56>
 800ff8c:	b982      	cbnz	r2, 800ffb0 <cosf+0x60>
 800ff8e:	9901      	ldr	r1, [sp, #4]
 800ff90:	9800      	ldr	r0, [sp, #0]
 800ff92:	f000 f9d3 	bl	801033c <__kernel_cosf>
 800ff96:	e7ed      	b.n	800ff74 <cosf+0x24>
 800ff98:	9901      	ldr	r1, [sp, #4]
 800ff9a:	9800      	ldr	r0, [sp, #0]
 800ff9c:	f000 fd00 	bl	80109a0 <__kernel_sinf>
 800ffa0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ffa4:	e7e6      	b.n	800ff74 <cosf+0x24>
 800ffa6:	9901      	ldr	r1, [sp, #4]
 800ffa8:	9800      	ldr	r0, [sp, #0]
 800ffaa:	f000 f9c7 	bl	801033c <__kernel_cosf>
 800ffae:	e7f7      	b.n	800ffa0 <cosf+0x50>
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	9901      	ldr	r1, [sp, #4]
 800ffb4:	9800      	ldr	r0, [sp, #0]
 800ffb6:	f000 fcf3 	bl	80109a0 <__kernel_sinf>
 800ffba:	e7db      	b.n	800ff74 <cosf+0x24>
 800ffbc:	3f490fd8 	.word	0x3f490fd8

0800ffc0 <sinf>:
 800ffc0:	b507      	push	{r0, r1, r2, lr}
 800ffc2:	4a1b      	ldr	r2, [pc, #108]	; (8010030 <sinf+0x70>)
 800ffc4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	4601      	mov	r1, r0
 800ffcc:	dc06      	bgt.n	800ffdc <sinf+0x1c>
 800ffce:	2200      	movs	r2, #0
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	b003      	add	sp, #12
 800ffd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffd8:	f000 bce2 	b.w	80109a0 <__kernel_sinf>
 800ffdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ffe0:	db04      	blt.n	800ffec <sinf+0x2c>
 800ffe2:	f7f0 fda5 	bl	8000b30 <__aeabi_fsub>
 800ffe6:	b003      	add	sp, #12
 800ffe8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffec:	4669      	mov	r1, sp
 800ffee:	f000 f847 	bl	8010080 <__ieee754_rem_pio2f>
 800fff2:	f000 0003 	and.w	r0, r0, #3
 800fff6:	2801      	cmp	r0, #1
 800fff8:	d008      	beq.n	801000c <sinf+0x4c>
 800fffa:	2802      	cmp	r0, #2
 800fffc:	d00b      	beq.n	8010016 <sinf+0x56>
 800fffe:	b990      	cbnz	r0, 8010026 <sinf+0x66>
 8010000:	2201      	movs	r2, #1
 8010002:	9901      	ldr	r1, [sp, #4]
 8010004:	9800      	ldr	r0, [sp, #0]
 8010006:	f000 fccb 	bl	80109a0 <__kernel_sinf>
 801000a:	e7ec      	b.n	800ffe6 <sinf+0x26>
 801000c:	9901      	ldr	r1, [sp, #4]
 801000e:	9800      	ldr	r0, [sp, #0]
 8010010:	f000 f994 	bl	801033c <__kernel_cosf>
 8010014:	e7e7      	b.n	800ffe6 <sinf+0x26>
 8010016:	2201      	movs	r2, #1
 8010018:	9901      	ldr	r1, [sp, #4]
 801001a:	9800      	ldr	r0, [sp, #0]
 801001c:	f000 fcc0 	bl	80109a0 <__kernel_sinf>
 8010020:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010024:	e7df      	b.n	800ffe6 <sinf+0x26>
 8010026:	9901      	ldr	r1, [sp, #4]
 8010028:	9800      	ldr	r0, [sp, #0]
 801002a:	f000 f987 	bl	801033c <__kernel_cosf>
 801002e:	e7f7      	b.n	8010020 <sinf+0x60>
 8010030:	3f490fd8 	.word	0x3f490fd8

08010034 <tanf>:
 8010034:	b507      	push	{r0, r1, r2, lr}
 8010036:	4a11      	ldr	r2, [pc, #68]	; (801007c <tanf+0x48>)
 8010038:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801003c:	4293      	cmp	r3, r2
 801003e:	4601      	mov	r1, r0
 8010040:	dc06      	bgt.n	8010050 <tanf+0x1c>
 8010042:	2201      	movs	r2, #1
 8010044:	2100      	movs	r1, #0
 8010046:	b003      	add	sp, #12
 8010048:	f85d eb04 	ldr.w	lr, [sp], #4
 801004c:	f000 bd1e 	b.w	8010a8c <__kernel_tanf>
 8010050:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010054:	db04      	blt.n	8010060 <tanf+0x2c>
 8010056:	f7f0 fd6b 	bl	8000b30 <__aeabi_fsub>
 801005a:	b003      	add	sp, #12
 801005c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010060:	4669      	mov	r1, sp
 8010062:	f000 f80d 	bl	8010080 <__ieee754_rem_pio2f>
 8010066:	0042      	lsls	r2, r0, #1
 8010068:	f002 0202 	and.w	r2, r2, #2
 801006c:	9901      	ldr	r1, [sp, #4]
 801006e:	9800      	ldr	r0, [sp, #0]
 8010070:	f1c2 0201 	rsb	r2, r2, #1
 8010074:	f000 fd0a 	bl	8010a8c <__kernel_tanf>
 8010078:	e7ef      	b.n	801005a <tanf+0x26>
 801007a:	bf00      	nop
 801007c:	3f490fda 	.word	0x3f490fda

08010080 <__ieee754_rem_pio2f>:
 8010080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010084:	4aa0      	ldr	r2, [pc, #640]	; (8010308 <__ieee754_rem_pio2f+0x288>)
 8010086:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801008a:	4296      	cmp	r6, r2
 801008c:	460c      	mov	r4, r1
 801008e:	4682      	mov	sl, r0
 8010090:	b087      	sub	sp, #28
 8010092:	dc04      	bgt.n	801009e <__ieee754_rem_pio2f+0x1e>
 8010094:	2300      	movs	r3, #0
 8010096:	6008      	str	r0, [r1, #0]
 8010098:	604b      	str	r3, [r1, #4]
 801009a:	2500      	movs	r5, #0
 801009c:	e01a      	b.n	80100d4 <__ieee754_rem_pio2f+0x54>
 801009e:	4a9b      	ldr	r2, [pc, #620]	; (801030c <__ieee754_rem_pio2f+0x28c>)
 80100a0:	4296      	cmp	r6, r2
 80100a2:	dc4b      	bgt.n	801013c <__ieee754_rem_pio2f+0xbc>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	499a      	ldr	r1, [pc, #616]	; (8010310 <__ieee754_rem_pio2f+0x290>)
 80100a8:	4f9a      	ldr	r7, [pc, #616]	; (8010314 <__ieee754_rem_pio2f+0x294>)
 80100aa:	f026 060f 	bic.w	r6, r6, #15
 80100ae:	dd23      	ble.n	80100f8 <__ieee754_rem_pio2f+0x78>
 80100b0:	f7f0 fd3e 	bl	8000b30 <__aeabi_fsub>
 80100b4:	42be      	cmp	r6, r7
 80100b6:	4605      	mov	r5, r0
 80100b8:	d010      	beq.n	80100dc <__ieee754_rem_pio2f+0x5c>
 80100ba:	4997      	ldr	r1, [pc, #604]	; (8010318 <__ieee754_rem_pio2f+0x298>)
 80100bc:	f7f0 fd38 	bl	8000b30 <__aeabi_fsub>
 80100c0:	4601      	mov	r1, r0
 80100c2:	6020      	str	r0, [r4, #0]
 80100c4:	4628      	mov	r0, r5
 80100c6:	f7f0 fd33 	bl	8000b30 <__aeabi_fsub>
 80100ca:	4993      	ldr	r1, [pc, #588]	; (8010318 <__ieee754_rem_pio2f+0x298>)
 80100cc:	f7f0 fd30 	bl	8000b30 <__aeabi_fsub>
 80100d0:	2501      	movs	r5, #1
 80100d2:	6060      	str	r0, [r4, #4]
 80100d4:	4628      	mov	r0, r5
 80100d6:	b007      	add	sp, #28
 80100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100dc:	498f      	ldr	r1, [pc, #572]	; (801031c <__ieee754_rem_pio2f+0x29c>)
 80100de:	f7f0 fd27 	bl	8000b30 <__aeabi_fsub>
 80100e2:	498f      	ldr	r1, [pc, #572]	; (8010320 <__ieee754_rem_pio2f+0x2a0>)
 80100e4:	4605      	mov	r5, r0
 80100e6:	f7f0 fd23 	bl	8000b30 <__aeabi_fsub>
 80100ea:	4601      	mov	r1, r0
 80100ec:	6020      	str	r0, [r4, #0]
 80100ee:	4628      	mov	r0, r5
 80100f0:	f7f0 fd1e 	bl	8000b30 <__aeabi_fsub>
 80100f4:	498a      	ldr	r1, [pc, #552]	; (8010320 <__ieee754_rem_pio2f+0x2a0>)
 80100f6:	e7e9      	b.n	80100cc <__ieee754_rem_pio2f+0x4c>
 80100f8:	f7f0 fd1c 	bl	8000b34 <__addsf3>
 80100fc:	42be      	cmp	r6, r7
 80100fe:	4605      	mov	r5, r0
 8010100:	d00e      	beq.n	8010120 <__ieee754_rem_pio2f+0xa0>
 8010102:	4985      	ldr	r1, [pc, #532]	; (8010318 <__ieee754_rem_pio2f+0x298>)
 8010104:	f7f0 fd16 	bl	8000b34 <__addsf3>
 8010108:	4601      	mov	r1, r0
 801010a:	6020      	str	r0, [r4, #0]
 801010c:	4628      	mov	r0, r5
 801010e:	f7f0 fd0f 	bl	8000b30 <__aeabi_fsub>
 8010112:	4981      	ldr	r1, [pc, #516]	; (8010318 <__ieee754_rem_pio2f+0x298>)
 8010114:	f7f0 fd0e 	bl	8000b34 <__addsf3>
 8010118:	f04f 35ff 	mov.w	r5, #4294967295
 801011c:	6060      	str	r0, [r4, #4]
 801011e:	e7d9      	b.n	80100d4 <__ieee754_rem_pio2f+0x54>
 8010120:	497e      	ldr	r1, [pc, #504]	; (801031c <__ieee754_rem_pio2f+0x29c>)
 8010122:	f7f0 fd07 	bl	8000b34 <__addsf3>
 8010126:	497e      	ldr	r1, [pc, #504]	; (8010320 <__ieee754_rem_pio2f+0x2a0>)
 8010128:	4605      	mov	r5, r0
 801012a:	f7f0 fd03 	bl	8000b34 <__addsf3>
 801012e:	4601      	mov	r1, r0
 8010130:	6020      	str	r0, [r4, #0]
 8010132:	4628      	mov	r0, r5
 8010134:	f7f0 fcfc 	bl	8000b30 <__aeabi_fsub>
 8010138:	4979      	ldr	r1, [pc, #484]	; (8010320 <__ieee754_rem_pio2f+0x2a0>)
 801013a:	e7eb      	b.n	8010114 <__ieee754_rem_pio2f+0x94>
 801013c:	4a79      	ldr	r2, [pc, #484]	; (8010324 <__ieee754_rem_pio2f+0x2a4>)
 801013e:	4296      	cmp	r6, r2
 8010140:	f300 8091 	bgt.w	8010266 <__ieee754_rem_pio2f+0x1e6>
 8010144:	f000 fdd0 	bl	8010ce8 <fabsf>
 8010148:	4977      	ldr	r1, [pc, #476]	; (8010328 <__ieee754_rem_pio2f+0x2a8>)
 801014a:	4607      	mov	r7, r0
 801014c:	f7f0 fdfa 	bl	8000d44 <__aeabi_fmul>
 8010150:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010154:	f7f0 fcee 	bl	8000b34 <__addsf3>
 8010158:	f7f0 ffd0 	bl	80010fc <__aeabi_f2iz>
 801015c:	4605      	mov	r5, r0
 801015e:	f7f0 fd9d 	bl	8000c9c <__aeabi_i2f>
 8010162:	496b      	ldr	r1, [pc, #428]	; (8010310 <__ieee754_rem_pio2f+0x290>)
 8010164:	4681      	mov	r9, r0
 8010166:	f7f0 fded 	bl	8000d44 <__aeabi_fmul>
 801016a:	4601      	mov	r1, r0
 801016c:	4638      	mov	r0, r7
 801016e:	f7f0 fcdf 	bl	8000b30 <__aeabi_fsub>
 8010172:	4969      	ldr	r1, [pc, #420]	; (8010318 <__ieee754_rem_pio2f+0x298>)
 8010174:	4680      	mov	r8, r0
 8010176:	4648      	mov	r0, r9
 8010178:	f7f0 fde4 	bl	8000d44 <__aeabi_fmul>
 801017c:	2d1f      	cmp	r5, #31
 801017e:	4607      	mov	r7, r0
 8010180:	dc0c      	bgt.n	801019c <__ieee754_rem_pio2f+0x11c>
 8010182:	4a6a      	ldr	r2, [pc, #424]	; (801032c <__ieee754_rem_pio2f+0x2ac>)
 8010184:	1e69      	subs	r1, r5, #1
 8010186:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801018a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 801018e:	4293      	cmp	r3, r2
 8010190:	d004      	beq.n	801019c <__ieee754_rem_pio2f+0x11c>
 8010192:	4639      	mov	r1, r7
 8010194:	4640      	mov	r0, r8
 8010196:	f7f0 fccb 	bl	8000b30 <__aeabi_fsub>
 801019a:	e00b      	b.n	80101b4 <__ieee754_rem_pio2f+0x134>
 801019c:	4639      	mov	r1, r7
 801019e:	4640      	mov	r0, r8
 80101a0:	f7f0 fcc6 	bl	8000b30 <__aeabi_fsub>
 80101a4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80101a8:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80101ac:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80101b0:	2e08      	cmp	r6, #8
 80101b2:	dc01      	bgt.n	80101b8 <__ieee754_rem_pio2f+0x138>
 80101b4:	6020      	str	r0, [r4, #0]
 80101b6:	e026      	b.n	8010206 <__ieee754_rem_pio2f+0x186>
 80101b8:	4958      	ldr	r1, [pc, #352]	; (801031c <__ieee754_rem_pio2f+0x29c>)
 80101ba:	4648      	mov	r0, r9
 80101bc:	f7f0 fdc2 	bl	8000d44 <__aeabi_fmul>
 80101c0:	4607      	mov	r7, r0
 80101c2:	4601      	mov	r1, r0
 80101c4:	4640      	mov	r0, r8
 80101c6:	f7f0 fcb3 	bl	8000b30 <__aeabi_fsub>
 80101ca:	4601      	mov	r1, r0
 80101cc:	4606      	mov	r6, r0
 80101ce:	4640      	mov	r0, r8
 80101d0:	f7f0 fcae 	bl	8000b30 <__aeabi_fsub>
 80101d4:	4639      	mov	r1, r7
 80101d6:	f7f0 fcab 	bl	8000b30 <__aeabi_fsub>
 80101da:	4607      	mov	r7, r0
 80101dc:	4950      	ldr	r1, [pc, #320]	; (8010320 <__ieee754_rem_pio2f+0x2a0>)
 80101de:	4648      	mov	r0, r9
 80101e0:	f7f0 fdb0 	bl	8000d44 <__aeabi_fmul>
 80101e4:	4639      	mov	r1, r7
 80101e6:	f7f0 fca3 	bl	8000b30 <__aeabi_fsub>
 80101ea:	4601      	mov	r1, r0
 80101ec:	4607      	mov	r7, r0
 80101ee:	4630      	mov	r0, r6
 80101f0:	f7f0 fc9e 	bl	8000b30 <__aeabi_fsub>
 80101f4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80101f8:	ebab 0b03 	sub.w	fp, fp, r3
 80101fc:	f1bb 0f19 	cmp.w	fp, #25
 8010200:	dc16      	bgt.n	8010230 <__ieee754_rem_pio2f+0x1b0>
 8010202:	46b0      	mov	r8, r6
 8010204:	6020      	str	r0, [r4, #0]
 8010206:	6826      	ldr	r6, [r4, #0]
 8010208:	4640      	mov	r0, r8
 801020a:	4631      	mov	r1, r6
 801020c:	f7f0 fc90 	bl	8000b30 <__aeabi_fsub>
 8010210:	4639      	mov	r1, r7
 8010212:	f7f0 fc8d 	bl	8000b30 <__aeabi_fsub>
 8010216:	f1ba 0f00 	cmp.w	sl, #0
 801021a:	6060      	str	r0, [r4, #4]
 801021c:	f6bf af5a 	bge.w	80100d4 <__ieee754_rem_pio2f+0x54>
 8010220:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8010224:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010228:	6026      	str	r6, [r4, #0]
 801022a:	6060      	str	r0, [r4, #4]
 801022c:	426d      	negs	r5, r5
 801022e:	e751      	b.n	80100d4 <__ieee754_rem_pio2f+0x54>
 8010230:	493f      	ldr	r1, [pc, #252]	; (8010330 <__ieee754_rem_pio2f+0x2b0>)
 8010232:	4648      	mov	r0, r9
 8010234:	f7f0 fd86 	bl	8000d44 <__aeabi_fmul>
 8010238:	4607      	mov	r7, r0
 801023a:	4601      	mov	r1, r0
 801023c:	4630      	mov	r0, r6
 801023e:	f7f0 fc77 	bl	8000b30 <__aeabi_fsub>
 8010242:	4601      	mov	r1, r0
 8010244:	4680      	mov	r8, r0
 8010246:	4630      	mov	r0, r6
 8010248:	f7f0 fc72 	bl	8000b30 <__aeabi_fsub>
 801024c:	4639      	mov	r1, r7
 801024e:	f7f0 fc6f 	bl	8000b30 <__aeabi_fsub>
 8010252:	4606      	mov	r6, r0
 8010254:	4937      	ldr	r1, [pc, #220]	; (8010334 <__ieee754_rem_pio2f+0x2b4>)
 8010256:	4648      	mov	r0, r9
 8010258:	f7f0 fd74 	bl	8000d44 <__aeabi_fmul>
 801025c:	4631      	mov	r1, r6
 801025e:	f7f0 fc67 	bl	8000b30 <__aeabi_fsub>
 8010262:	4607      	mov	r7, r0
 8010264:	e795      	b.n	8010192 <__ieee754_rem_pio2f+0x112>
 8010266:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801026a:	db05      	blt.n	8010278 <__ieee754_rem_pio2f+0x1f8>
 801026c:	4601      	mov	r1, r0
 801026e:	f7f0 fc5f 	bl	8000b30 <__aeabi_fsub>
 8010272:	6060      	str	r0, [r4, #4]
 8010274:	6020      	str	r0, [r4, #0]
 8010276:	e710      	b.n	801009a <__ieee754_rem_pio2f+0x1a>
 8010278:	15f7      	asrs	r7, r6, #23
 801027a:	3f86      	subs	r7, #134	; 0x86
 801027c:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8010280:	4630      	mov	r0, r6
 8010282:	f7f0 ff3b 	bl	80010fc <__aeabi_f2iz>
 8010286:	f7f0 fd09 	bl	8000c9c <__aeabi_i2f>
 801028a:	4601      	mov	r1, r0
 801028c:	9003      	str	r0, [sp, #12]
 801028e:	4630      	mov	r0, r6
 8010290:	f7f0 fc4e 	bl	8000b30 <__aeabi_fsub>
 8010294:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8010298:	f7f0 fd54 	bl	8000d44 <__aeabi_fmul>
 801029c:	4606      	mov	r6, r0
 801029e:	f7f0 ff2d 	bl	80010fc <__aeabi_f2iz>
 80102a2:	f7f0 fcfb 	bl	8000c9c <__aeabi_i2f>
 80102a6:	4601      	mov	r1, r0
 80102a8:	9004      	str	r0, [sp, #16]
 80102aa:	4605      	mov	r5, r0
 80102ac:	4630      	mov	r0, r6
 80102ae:	f7f0 fc3f 	bl	8000b30 <__aeabi_fsub>
 80102b2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80102b6:	f7f0 fd45 	bl	8000d44 <__aeabi_fmul>
 80102ba:	2100      	movs	r1, #0
 80102bc:	9005      	str	r0, [sp, #20]
 80102be:	f7f0 fed5 	bl	800106c <__aeabi_fcmpeq>
 80102c2:	b1f0      	cbz	r0, 8010302 <__ieee754_rem_pio2f+0x282>
 80102c4:	2100      	movs	r1, #0
 80102c6:	4628      	mov	r0, r5
 80102c8:	f7f0 fed0 	bl	800106c <__aeabi_fcmpeq>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	bf14      	ite	ne
 80102d0:	2301      	movne	r3, #1
 80102d2:	2302      	moveq	r3, #2
 80102d4:	4a18      	ldr	r2, [pc, #96]	; (8010338 <__ieee754_rem_pio2f+0x2b8>)
 80102d6:	4621      	mov	r1, r4
 80102d8:	9201      	str	r2, [sp, #4]
 80102da:	2202      	movs	r2, #2
 80102dc:	a803      	add	r0, sp, #12
 80102de:	9200      	str	r2, [sp, #0]
 80102e0:	463a      	mov	r2, r7
 80102e2:	f000 f8ab 	bl	801043c <__kernel_rem_pio2f>
 80102e6:	f1ba 0f00 	cmp.w	sl, #0
 80102ea:	4605      	mov	r5, r0
 80102ec:	f6bf aef2 	bge.w	80100d4 <__ieee754_rem_pio2f+0x54>
 80102f0:	6823      	ldr	r3, [r4, #0]
 80102f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80102f6:	6023      	str	r3, [r4, #0]
 80102f8:	6863      	ldr	r3, [r4, #4]
 80102fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80102fe:	6063      	str	r3, [r4, #4]
 8010300:	e794      	b.n	801022c <__ieee754_rem_pio2f+0x1ac>
 8010302:	2303      	movs	r3, #3
 8010304:	e7e6      	b.n	80102d4 <__ieee754_rem_pio2f+0x254>
 8010306:	bf00      	nop
 8010308:	3f490fd8 	.word	0x3f490fd8
 801030c:	4016cbe3 	.word	0x4016cbe3
 8010310:	3fc90f80 	.word	0x3fc90f80
 8010314:	3fc90fd0 	.word	0x3fc90fd0
 8010318:	37354443 	.word	0x37354443
 801031c:	37354400 	.word	0x37354400
 8010320:	2e85a308 	.word	0x2e85a308
 8010324:	43490f80 	.word	0x43490f80
 8010328:	3f22f984 	.word	0x3f22f984
 801032c:	0801265c 	.word	0x0801265c
 8010330:	2e85a300 	.word	0x2e85a300
 8010334:	248d3132 	.word	0x248d3132
 8010338:	080126dc 	.word	0x080126dc

0801033c <__kernel_cosf>:
 801033c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010340:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8010344:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8010348:	4606      	mov	r6, r0
 801034a:	4688      	mov	r8, r1
 801034c:	da03      	bge.n	8010356 <__kernel_cosf+0x1a>
 801034e:	f7f0 fed5 	bl	80010fc <__aeabi_f2iz>
 8010352:	2800      	cmp	r0, #0
 8010354:	d05c      	beq.n	8010410 <__kernel_cosf+0xd4>
 8010356:	4631      	mov	r1, r6
 8010358:	4630      	mov	r0, r6
 801035a:	f7f0 fcf3 	bl	8000d44 <__aeabi_fmul>
 801035e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010362:	4605      	mov	r5, r0
 8010364:	f7f0 fcee 	bl	8000d44 <__aeabi_fmul>
 8010368:	492b      	ldr	r1, [pc, #172]	; (8010418 <__kernel_cosf+0xdc>)
 801036a:	4607      	mov	r7, r0
 801036c:	4628      	mov	r0, r5
 801036e:	f7f0 fce9 	bl	8000d44 <__aeabi_fmul>
 8010372:	492a      	ldr	r1, [pc, #168]	; (801041c <__kernel_cosf+0xe0>)
 8010374:	f7f0 fbde 	bl	8000b34 <__addsf3>
 8010378:	4629      	mov	r1, r5
 801037a:	f7f0 fce3 	bl	8000d44 <__aeabi_fmul>
 801037e:	4928      	ldr	r1, [pc, #160]	; (8010420 <__kernel_cosf+0xe4>)
 8010380:	f7f0 fbd6 	bl	8000b30 <__aeabi_fsub>
 8010384:	4629      	mov	r1, r5
 8010386:	f7f0 fcdd 	bl	8000d44 <__aeabi_fmul>
 801038a:	4926      	ldr	r1, [pc, #152]	; (8010424 <__kernel_cosf+0xe8>)
 801038c:	f7f0 fbd2 	bl	8000b34 <__addsf3>
 8010390:	4629      	mov	r1, r5
 8010392:	f7f0 fcd7 	bl	8000d44 <__aeabi_fmul>
 8010396:	4924      	ldr	r1, [pc, #144]	; (8010428 <__kernel_cosf+0xec>)
 8010398:	f7f0 fbca 	bl	8000b30 <__aeabi_fsub>
 801039c:	4629      	mov	r1, r5
 801039e:	f7f0 fcd1 	bl	8000d44 <__aeabi_fmul>
 80103a2:	4922      	ldr	r1, [pc, #136]	; (801042c <__kernel_cosf+0xf0>)
 80103a4:	f7f0 fbc6 	bl	8000b34 <__addsf3>
 80103a8:	4629      	mov	r1, r5
 80103aa:	f7f0 fccb 	bl	8000d44 <__aeabi_fmul>
 80103ae:	4629      	mov	r1, r5
 80103b0:	f7f0 fcc8 	bl	8000d44 <__aeabi_fmul>
 80103b4:	4641      	mov	r1, r8
 80103b6:	4605      	mov	r5, r0
 80103b8:	4630      	mov	r0, r6
 80103ba:	f7f0 fcc3 	bl	8000d44 <__aeabi_fmul>
 80103be:	4601      	mov	r1, r0
 80103c0:	4628      	mov	r0, r5
 80103c2:	f7f0 fbb5 	bl	8000b30 <__aeabi_fsub>
 80103c6:	4b1a      	ldr	r3, [pc, #104]	; (8010430 <__kernel_cosf+0xf4>)
 80103c8:	4605      	mov	r5, r0
 80103ca:	429c      	cmp	r4, r3
 80103cc:	dc0a      	bgt.n	80103e4 <__kernel_cosf+0xa8>
 80103ce:	4601      	mov	r1, r0
 80103d0:	4638      	mov	r0, r7
 80103d2:	f7f0 fbad 	bl	8000b30 <__aeabi_fsub>
 80103d6:	4601      	mov	r1, r0
 80103d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80103dc:	f7f0 fba8 	bl	8000b30 <__aeabi_fsub>
 80103e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e4:	4b13      	ldr	r3, [pc, #76]	; (8010434 <__kernel_cosf+0xf8>)
 80103e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80103ea:	429c      	cmp	r4, r3
 80103ec:	bfcc      	ite	gt
 80103ee:	4c12      	ldrgt	r4, [pc, #72]	; (8010438 <__kernel_cosf+0xfc>)
 80103f0:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80103f4:	4621      	mov	r1, r4
 80103f6:	f7f0 fb9b 	bl	8000b30 <__aeabi_fsub>
 80103fa:	4621      	mov	r1, r4
 80103fc:	4606      	mov	r6, r0
 80103fe:	4638      	mov	r0, r7
 8010400:	f7f0 fb96 	bl	8000b30 <__aeabi_fsub>
 8010404:	4629      	mov	r1, r5
 8010406:	f7f0 fb93 	bl	8000b30 <__aeabi_fsub>
 801040a:	4601      	mov	r1, r0
 801040c:	4630      	mov	r0, r6
 801040e:	e7e5      	b.n	80103dc <__kernel_cosf+0xa0>
 8010410:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010414:	e7e4      	b.n	80103e0 <__kernel_cosf+0xa4>
 8010416:	bf00      	nop
 8010418:	ad47d74e 	.word	0xad47d74e
 801041c:	310f74f6 	.word	0x310f74f6
 8010420:	3493f27c 	.word	0x3493f27c
 8010424:	37d00d01 	.word	0x37d00d01
 8010428:	3ab60b61 	.word	0x3ab60b61
 801042c:	3d2aaaab 	.word	0x3d2aaaab
 8010430:	3e999999 	.word	0x3e999999
 8010434:	3f480000 	.word	0x3f480000
 8010438:	3e900000 	.word	0x3e900000

0801043c <__kernel_rem_pio2f>:
 801043c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010440:	b0db      	sub	sp, #364	; 0x16c
 8010442:	9202      	str	r2, [sp, #8]
 8010444:	9304      	str	r3, [sp, #16]
 8010446:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010448:	4bb2      	ldr	r3, [pc, #712]	; (8010714 <__kernel_rem_pio2f+0x2d8>)
 801044a:	9005      	str	r0, [sp, #20]
 801044c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010450:	9100      	str	r1, [sp, #0]
 8010452:	9301      	str	r3, [sp, #4]
 8010454:	9b04      	ldr	r3, [sp, #16]
 8010456:	3b01      	subs	r3, #1
 8010458:	9303      	str	r3, [sp, #12]
 801045a:	9b02      	ldr	r3, [sp, #8]
 801045c:	1d1a      	adds	r2, r3, #4
 801045e:	f2c0 809b 	blt.w	8010598 <__kernel_rem_pio2f+0x15c>
 8010462:	1edc      	subs	r4, r3, #3
 8010464:	bf48      	it	mi
 8010466:	1d1c      	addmi	r4, r3, #4
 8010468:	10e4      	asrs	r4, r4, #3
 801046a:	2500      	movs	r5, #0
 801046c:	f04f 0b00 	mov.w	fp, #0
 8010470:	1c67      	adds	r7, r4, #1
 8010472:	00fb      	lsls	r3, r7, #3
 8010474:	9306      	str	r3, [sp, #24]
 8010476:	9b02      	ldr	r3, [sp, #8]
 8010478:	9a03      	ldr	r2, [sp, #12]
 801047a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 801047e:	9b01      	ldr	r3, [sp, #4]
 8010480:	eba4 0802 	sub.w	r8, r4, r2
 8010484:	eb03 0902 	add.w	r9, r3, r2
 8010488:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801048a:	ae1e      	add	r6, sp, #120	; 0x78
 801048c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8010490:	454d      	cmp	r5, r9
 8010492:	f340 8083 	ble.w	801059c <__kernel_rem_pio2f+0x160>
 8010496:	9a04      	ldr	r2, [sp, #16]
 8010498:	ab1e      	add	r3, sp, #120	; 0x78
 801049a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 801049e:	f04f 0900 	mov.w	r9, #0
 80104a2:	2300      	movs	r3, #0
 80104a4:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 80104a8:	9a01      	ldr	r2, [sp, #4]
 80104aa:	4591      	cmp	r9, r2
 80104ac:	f340 809e 	ble.w	80105ec <__kernel_rem_pio2f+0x1b0>
 80104b0:	4613      	mov	r3, r2
 80104b2:	aa0a      	add	r2, sp, #40	; 0x28
 80104b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104b8:	9308      	str	r3, [sp, #32]
 80104ba:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80104bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80104c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80104c4:	9307      	str	r3, [sp, #28]
 80104c6:	ac0a      	add	r4, sp, #40	; 0x28
 80104c8:	4626      	mov	r6, r4
 80104ca:	46c3      	mov	fp, r8
 80104cc:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 80104d0:	ab5a      	add	r3, sp, #360	; 0x168
 80104d2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80104d6:	f853 5c50 	ldr.w	r5, [r3, #-80]
 80104da:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80104de:	f1bb 0f00 	cmp.w	fp, #0
 80104e2:	f300 8088 	bgt.w	80105f6 <__kernel_rem_pio2f+0x1ba>
 80104e6:	4639      	mov	r1, r7
 80104e8:	4628      	mov	r0, r5
 80104ea:	f000 fc43 	bl	8010d74 <scalbnf>
 80104ee:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80104f2:	4605      	mov	r5, r0
 80104f4:	f7f0 fc26 	bl	8000d44 <__aeabi_fmul>
 80104f8:	f000 fbfa 	bl	8010cf0 <floorf>
 80104fc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8010500:	f7f0 fc20 	bl	8000d44 <__aeabi_fmul>
 8010504:	4601      	mov	r1, r0
 8010506:	4628      	mov	r0, r5
 8010508:	f7f0 fb12 	bl	8000b30 <__aeabi_fsub>
 801050c:	4605      	mov	r5, r0
 801050e:	f7f0 fdf5 	bl	80010fc <__aeabi_f2iz>
 8010512:	4606      	mov	r6, r0
 8010514:	f7f0 fbc2 	bl	8000c9c <__aeabi_i2f>
 8010518:	4601      	mov	r1, r0
 801051a:	4628      	mov	r0, r5
 801051c:	f7f0 fb08 	bl	8000b30 <__aeabi_fsub>
 8010520:	2f00      	cmp	r7, #0
 8010522:	4681      	mov	r9, r0
 8010524:	f340 8086 	ble.w	8010634 <__kernel_rem_pio2f+0x1f8>
 8010528:	f108 32ff 	add.w	r2, r8, #4294967295
 801052c:	ab0a      	add	r3, sp, #40	; 0x28
 801052e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8010532:	f1c7 0108 	rsb	r1, r7, #8
 8010536:	fa45 f301 	asr.w	r3, r5, r1
 801053a:	441e      	add	r6, r3
 801053c:	408b      	lsls	r3, r1
 801053e:	1aed      	subs	r5, r5, r3
 8010540:	f1c7 0007 	rsb	r0, r7, #7
 8010544:	ab0a      	add	r3, sp, #40	; 0x28
 8010546:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801054a:	4105      	asrs	r5, r0
 801054c:	2d00      	cmp	r5, #0
 801054e:	dd7f      	ble.n	8010650 <__kernel_rem_pio2f+0x214>
 8010550:	2200      	movs	r2, #0
 8010552:	4692      	mov	sl, r2
 8010554:	3601      	adds	r6, #1
 8010556:	4590      	cmp	r8, r2
 8010558:	f300 80b0 	bgt.w	80106bc <__kernel_rem_pio2f+0x280>
 801055c:	2f00      	cmp	r7, #0
 801055e:	dd05      	ble.n	801056c <__kernel_rem_pio2f+0x130>
 8010560:	2f01      	cmp	r7, #1
 8010562:	f000 80bd 	beq.w	80106e0 <__kernel_rem_pio2f+0x2a4>
 8010566:	2f02      	cmp	r7, #2
 8010568:	f000 80c5 	beq.w	80106f6 <__kernel_rem_pio2f+0x2ba>
 801056c:	2d02      	cmp	r5, #2
 801056e:	d16f      	bne.n	8010650 <__kernel_rem_pio2f+0x214>
 8010570:	4649      	mov	r1, r9
 8010572:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010576:	f7f0 fadb 	bl	8000b30 <__aeabi_fsub>
 801057a:	4681      	mov	r9, r0
 801057c:	f1ba 0f00 	cmp.w	sl, #0
 8010580:	d066      	beq.n	8010650 <__kernel_rem_pio2f+0x214>
 8010582:	4639      	mov	r1, r7
 8010584:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010588:	f000 fbf4 	bl	8010d74 <scalbnf>
 801058c:	4601      	mov	r1, r0
 801058e:	4648      	mov	r0, r9
 8010590:	f7f0 face 	bl	8000b30 <__aeabi_fsub>
 8010594:	4681      	mov	r9, r0
 8010596:	e05b      	b.n	8010650 <__kernel_rem_pio2f+0x214>
 8010598:	2400      	movs	r4, #0
 801059a:	e766      	b.n	801046a <__kernel_rem_pio2f+0x2e>
 801059c:	eb18 0f05 	cmn.w	r8, r5
 80105a0:	d407      	bmi.n	80105b2 <__kernel_rem_pio2f+0x176>
 80105a2:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80105a6:	f7f0 fb79 	bl	8000c9c <__aeabi_i2f>
 80105aa:	f846 0b04 	str.w	r0, [r6], #4
 80105ae:	3501      	adds	r5, #1
 80105b0:	e76e      	b.n	8010490 <__kernel_rem_pio2f+0x54>
 80105b2:	4658      	mov	r0, fp
 80105b4:	e7f9      	b.n	80105aa <__kernel_rem_pio2f+0x16e>
 80105b6:	9307      	str	r3, [sp, #28]
 80105b8:	9b05      	ldr	r3, [sp, #20]
 80105ba:	f8da 1000 	ldr.w	r1, [sl]
 80105be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80105c2:	f7f0 fbbf 	bl	8000d44 <__aeabi_fmul>
 80105c6:	4601      	mov	r1, r0
 80105c8:	4630      	mov	r0, r6
 80105ca:	f7f0 fab3 	bl	8000b34 <__addsf3>
 80105ce:	4606      	mov	r6, r0
 80105d0:	9b07      	ldr	r3, [sp, #28]
 80105d2:	f108 0801 	add.w	r8, r8, #1
 80105d6:	9a03      	ldr	r2, [sp, #12]
 80105d8:	f1aa 0a04 	sub.w	sl, sl, #4
 80105dc:	4590      	cmp	r8, r2
 80105de:	ddea      	ble.n	80105b6 <__kernel_rem_pio2f+0x17a>
 80105e0:	f84b 6b04 	str.w	r6, [fp], #4
 80105e4:	f109 0901 	add.w	r9, r9, #1
 80105e8:	3504      	adds	r5, #4
 80105ea:	e75d      	b.n	80104a8 <__kernel_rem_pio2f+0x6c>
 80105ec:	46aa      	mov	sl, r5
 80105ee:	461e      	mov	r6, r3
 80105f0:	f04f 0800 	mov.w	r8, #0
 80105f4:	e7ef      	b.n	80105d6 <__kernel_rem_pio2f+0x19a>
 80105f6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80105fa:	4628      	mov	r0, r5
 80105fc:	f7f0 fba2 	bl	8000d44 <__aeabi_fmul>
 8010600:	f7f0 fd7c 	bl	80010fc <__aeabi_f2iz>
 8010604:	f7f0 fb4a 	bl	8000c9c <__aeabi_i2f>
 8010608:	4649      	mov	r1, r9
 801060a:	9009      	str	r0, [sp, #36]	; 0x24
 801060c:	f7f0 fb9a 	bl	8000d44 <__aeabi_fmul>
 8010610:	4601      	mov	r1, r0
 8010612:	4628      	mov	r0, r5
 8010614:	f7f0 fa8c 	bl	8000b30 <__aeabi_fsub>
 8010618:	f7f0 fd70 	bl	80010fc <__aeabi_f2iz>
 801061c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801061e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010622:	f846 0b04 	str.w	r0, [r6], #4
 8010626:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 801062a:	4618      	mov	r0, r3
 801062c:	f7f0 fa82 	bl	8000b34 <__addsf3>
 8010630:	4605      	mov	r5, r0
 8010632:	e754      	b.n	80104de <__kernel_rem_pio2f+0xa2>
 8010634:	d106      	bne.n	8010644 <__kernel_rem_pio2f+0x208>
 8010636:	f108 33ff 	add.w	r3, r8, #4294967295
 801063a:	aa0a      	add	r2, sp, #40	; 0x28
 801063c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8010640:	11ed      	asrs	r5, r5, #7
 8010642:	e783      	b.n	801054c <__kernel_rem_pio2f+0x110>
 8010644:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010648:	f7f0 fd2e 	bl	80010a8 <__aeabi_fcmpge>
 801064c:	4605      	mov	r5, r0
 801064e:	bb98      	cbnz	r0, 80106b8 <__kernel_rem_pio2f+0x27c>
 8010650:	2100      	movs	r1, #0
 8010652:	4648      	mov	r0, r9
 8010654:	f7f0 fd0a 	bl	800106c <__aeabi_fcmpeq>
 8010658:	2800      	cmp	r0, #0
 801065a:	f000 8098 	beq.w	801078e <__kernel_rem_pio2f+0x352>
 801065e:	f108 34ff 	add.w	r4, r8, #4294967295
 8010662:	4623      	mov	r3, r4
 8010664:	2200      	movs	r2, #0
 8010666:	9901      	ldr	r1, [sp, #4]
 8010668:	428b      	cmp	r3, r1
 801066a:	da4c      	bge.n	8010706 <__kernel_rem_pio2f+0x2ca>
 801066c:	2a00      	cmp	r2, #0
 801066e:	d07a      	beq.n	8010766 <__kernel_rem_pio2f+0x32a>
 8010670:	ab0a      	add	r3, sp, #40	; 0x28
 8010672:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010676:	3f08      	subs	r7, #8
 8010678:	2b00      	cmp	r3, #0
 801067a:	f000 8086 	beq.w	801078a <__kernel_rem_pio2f+0x34e>
 801067e:	4639      	mov	r1, r7
 8010680:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010684:	f000 fb76 	bl	8010d74 <scalbnf>
 8010688:	46a2      	mov	sl, r4
 801068a:	4681      	mov	r9, r0
 801068c:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8010690:	af46      	add	r7, sp, #280	; 0x118
 8010692:	f1ba 0f00 	cmp.w	sl, #0
 8010696:	f280 80af 	bge.w	80107f8 <__kernel_rem_pio2f+0x3bc>
 801069a:	4627      	mov	r7, r4
 801069c:	2200      	movs	r2, #0
 801069e:	2f00      	cmp	r7, #0
 80106a0:	f2c0 80d9 	blt.w	8010856 <__kernel_rem_pio2f+0x41a>
 80106a4:	a946      	add	r1, sp, #280	; 0x118
 80106a6:	4690      	mov	r8, r2
 80106a8:	f04f 0a00 	mov.w	sl, #0
 80106ac:	4b1a      	ldr	r3, [pc, #104]	; (8010718 <__kernel_rem_pio2f+0x2dc>)
 80106ae:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 80106b2:	eba4 0907 	sub.w	r9, r4, r7
 80106b6:	e0c2      	b.n	801083e <__kernel_rem_pio2f+0x402>
 80106b8:	2502      	movs	r5, #2
 80106ba:	e749      	b.n	8010550 <__kernel_rem_pio2f+0x114>
 80106bc:	6823      	ldr	r3, [r4, #0]
 80106be:	f1ba 0f00 	cmp.w	sl, #0
 80106c2:	d108      	bne.n	80106d6 <__kernel_rem_pio2f+0x29a>
 80106c4:	b11b      	cbz	r3, 80106ce <__kernel_rem_pio2f+0x292>
 80106c6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80106ca:	6023      	str	r3, [r4, #0]
 80106cc:	2301      	movs	r3, #1
 80106ce:	469a      	mov	sl, r3
 80106d0:	3201      	adds	r2, #1
 80106d2:	3404      	adds	r4, #4
 80106d4:	e73f      	b.n	8010556 <__kernel_rem_pio2f+0x11a>
 80106d6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80106da:	6023      	str	r3, [r4, #0]
 80106dc:	4653      	mov	r3, sl
 80106de:	e7f6      	b.n	80106ce <__kernel_rem_pio2f+0x292>
 80106e0:	f108 32ff 	add.w	r2, r8, #4294967295
 80106e4:	ab0a      	add	r3, sp, #40	; 0x28
 80106e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106ee:	a90a      	add	r1, sp, #40	; 0x28
 80106f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80106f4:	e73a      	b.n	801056c <__kernel_rem_pio2f+0x130>
 80106f6:	f108 32ff 	add.w	r2, r8, #4294967295
 80106fa:	ab0a      	add	r3, sp, #40	; 0x28
 80106fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010704:	e7f3      	b.n	80106ee <__kernel_rem_pio2f+0x2b2>
 8010706:	a90a      	add	r1, sp, #40	; 0x28
 8010708:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801070c:	3b01      	subs	r3, #1
 801070e:	430a      	orrs	r2, r1
 8010710:	e7a9      	b.n	8010666 <__kernel_rem_pio2f+0x22a>
 8010712:	bf00      	nop
 8010714:	08012a20 	.word	0x08012a20
 8010718:	080129f4 	.word	0x080129f4
 801071c:	3301      	adds	r3, #1
 801071e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010722:	2900      	cmp	r1, #0
 8010724:	d0fa      	beq.n	801071c <__kernel_rem_pio2f+0x2e0>
 8010726:	9a04      	ldr	r2, [sp, #16]
 8010728:	f108 0501 	add.w	r5, r8, #1
 801072c:	eb08 0402 	add.w	r4, r8, r2
 8010730:	aa1e      	add	r2, sp, #120	; 0x78
 8010732:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8010736:	4498      	add	r8, r3
 8010738:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 801073c:	45a8      	cmp	r8, r5
 801073e:	f6ff aec2 	blt.w	80104c6 <__kernel_rem_pio2f+0x8a>
 8010742:	9b07      	ldr	r3, [sp, #28]
 8010744:	46a3      	mov	fp, r4
 8010746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801074a:	f7f0 faa7 	bl	8000c9c <__aeabi_i2f>
 801074e:	f04f 0a00 	mov.w	sl, #0
 8010752:	2600      	movs	r6, #0
 8010754:	6020      	str	r0, [r4, #0]
 8010756:	9b03      	ldr	r3, [sp, #12]
 8010758:	459a      	cmp	sl, r3
 801075a:	dd07      	ble.n	801076c <__kernel_rem_pio2f+0x330>
 801075c:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8010760:	3404      	adds	r4, #4
 8010762:	3501      	adds	r5, #1
 8010764:	e7ea      	b.n	801073c <__kernel_rem_pio2f+0x300>
 8010766:	2301      	movs	r3, #1
 8010768:	9a08      	ldr	r2, [sp, #32]
 801076a:	e7d8      	b.n	801071e <__kernel_rem_pio2f+0x2e2>
 801076c:	9b05      	ldr	r3, [sp, #20]
 801076e:	f85b 0904 	ldr.w	r0, [fp], #-4
 8010772:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8010776:	f7f0 fae5 	bl	8000d44 <__aeabi_fmul>
 801077a:	4601      	mov	r1, r0
 801077c:	4630      	mov	r0, r6
 801077e:	f7f0 f9d9 	bl	8000b34 <__addsf3>
 8010782:	f10a 0a01 	add.w	sl, sl, #1
 8010786:	4606      	mov	r6, r0
 8010788:	e7e5      	b.n	8010756 <__kernel_rem_pio2f+0x31a>
 801078a:	3c01      	subs	r4, #1
 801078c:	e770      	b.n	8010670 <__kernel_rem_pio2f+0x234>
 801078e:	9b06      	ldr	r3, [sp, #24]
 8010790:	9a02      	ldr	r2, [sp, #8]
 8010792:	4648      	mov	r0, r9
 8010794:	1a99      	subs	r1, r3, r2
 8010796:	f000 faed 	bl	8010d74 <scalbnf>
 801079a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801079e:	4604      	mov	r4, r0
 80107a0:	f7f0 fc82 	bl	80010a8 <__aeabi_fcmpge>
 80107a4:	b300      	cbz	r0, 80107e8 <__kernel_rem_pio2f+0x3ac>
 80107a6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80107aa:	4620      	mov	r0, r4
 80107ac:	f7f0 faca 	bl	8000d44 <__aeabi_fmul>
 80107b0:	f7f0 fca4 	bl	80010fc <__aeabi_f2iz>
 80107b4:	f7f0 fa72 	bl	8000c9c <__aeabi_i2f>
 80107b8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80107bc:	4681      	mov	r9, r0
 80107be:	f7f0 fac1 	bl	8000d44 <__aeabi_fmul>
 80107c2:	4601      	mov	r1, r0
 80107c4:	4620      	mov	r0, r4
 80107c6:	f7f0 f9b3 	bl	8000b30 <__aeabi_fsub>
 80107ca:	f7f0 fc97 	bl	80010fc <__aeabi_f2iz>
 80107ce:	ab0a      	add	r3, sp, #40	; 0x28
 80107d0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80107d4:	4648      	mov	r0, r9
 80107d6:	f7f0 fc91 	bl	80010fc <__aeabi_f2iz>
 80107da:	f108 0401 	add.w	r4, r8, #1
 80107de:	ab0a      	add	r3, sp, #40	; 0x28
 80107e0:	3708      	adds	r7, #8
 80107e2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80107e6:	e74a      	b.n	801067e <__kernel_rem_pio2f+0x242>
 80107e8:	4620      	mov	r0, r4
 80107ea:	f7f0 fc87 	bl	80010fc <__aeabi_f2iz>
 80107ee:	ab0a      	add	r3, sp, #40	; 0x28
 80107f0:	4644      	mov	r4, r8
 80107f2:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80107f6:	e742      	b.n	801067e <__kernel_rem_pio2f+0x242>
 80107f8:	ab0a      	add	r3, sp, #40	; 0x28
 80107fa:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80107fe:	f7f0 fa4d 	bl	8000c9c <__aeabi_i2f>
 8010802:	4649      	mov	r1, r9
 8010804:	f7f0 fa9e 	bl	8000d44 <__aeabi_fmul>
 8010808:	4641      	mov	r1, r8
 801080a:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 801080e:	4648      	mov	r0, r9
 8010810:	f7f0 fa98 	bl	8000d44 <__aeabi_fmul>
 8010814:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010818:	4681      	mov	r9, r0
 801081a:	e73a      	b.n	8010692 <__kernel_rem_pio2f+0x256>
 801081c:	f853 0b04 	ldr.w	r0, [r3], #4
 8010820:	f85b 1b04 	ldr.w	r1, [fp], #4
 8010824:	9203      	str	r2, [sp, #12]
 8010826:	9302      	str	r3, [sp, #8]
 8010828:	f7f0 fa8c 	bl	8000d44 <__aeabi_fmul>
 801082c:	4601      	mov	r1, r0
 801082e:	4640      	mov	r0, r8
 8010830:	f7f0 f980 	bl	8000b34 <__addsf3>
 8010834:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010838:	4680      	mov	r8, r0
 801083a:	f10a 0a01 	add.w	sl, sl, #1
 801083e:	9901      	ldr	r1, [sp, #4]
 8010840:	458a      	cmp	sl, r1
 8010842:	dc01      	bgt.n	8010848 <__kernel_rem_pio2f+0x40c>
 8010844:	45ca      	cmp	sl, r9
 8010846:	dde9      	ble.n	801081c <__kernel_rem_pio2f+0x3e0>
 8010848:	ab5a      	add	r3, sp, #360	; 0x168
 801084a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 801084e:	f849 8ca0 	str.w	r8, [r9, #-160]
 8010852:	3f01      	subs	r7, #1
 8010854:	e723      	b.n	801069e <__kernel_rem_pio2f+0x262>
 8010856:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010858:	2b02      	cmp	r3, #2
 801085a:	dc07      	bgt.n	801086c <__kernel_rem_pio2f+0x430>
 801085c:	2b00      	cmp	r3, #0
 801085e:	dc4d      	bgt.n	80108fc <__kernel_rem_pio2f+0x4c0>
 8010860:	d02e      	beq.n	80108c0 <__kernel_rem_pio2f+0x484>
 8010862:	f006 0007 	and.w	r0, r6, #7
 8010866:	b05b      	add	sp, #364	; 0x16c
 8010868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801086c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801086e:	2b03      	cmp	r3, #3
 8010870:	d1f7      	bne.n	8010862 <__kernel_rem_pio2f+0x426>
 8010872:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8010876:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 801087a:	46b8      	mov	r8, r7
 801087c:	46a2      	mov	sl, r4
 801087e:	f1ba 0f00 	cmp.w	sl, #0
 8010882:	dc48      	bgt.n	8010916 <__kernel_rem_pio2f+0x4da>
 8010884:	46a1      	mov	r9, r4
 8010886:	f1b9 0f01 	cmp.w	r9, #1
 801088a:	dc5f      	bgt.n	801094c <__kernel_rem_pio2f+0x510>
 801088c:	2000      	movs	r0, #0
 801088e:	2c01      	cmp	r4, #1
 8010890:	dc75      	bgt.n	801097e <__kernel_rem_pio2f+0x542>
 8010892:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8010894:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8010896:	2d00      	cmp	r5, #0
 8010898:	d177      	bne.n	801098a <__kernel_rem_pio2f+0x54e>
 801089a:	9900      	ldr	r1, [sp, #0]
 801089c:	600a      	str	r2, [r1, #0]
 801089e:	460a      	mov	r2, r1
 80108a0:	604b      	str	r3, [r1, #4]
 80108a2:	6090      	str	r0, [r2, #8]
 80108a4:	e7dd      	b.n	8010862 <__kernel_rem_pio2f+0x426>
 80108a6:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80108aa:	f7f0 f943 	bl	8000b34 <__addsf3>
 80108ae:	3c01      	subs	r4, #1
 80108b0:	2c00      	cmp	r4, #0
 80108b2:	daf8      	bge.n	80108a6 <__kernel_rem_pio2f+0x46a>
 80108b4:	b10d      	cbz	r5, 80108ba <__kernel_rem_pio2f+0x47e>
 80108b6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80108ba:	9b00      	ldr	r3, [sp, #0]
 80108bc:	6018      	str	r0, [r3, #0]
 80108be:	e7d0      	b.n	8010862 <__kernel_rem_pio2f+0x426>
 80108c0:	2000      	movs	r0, #0
 80108c2:	af32      	add	r7, sp, #200	; 0xc8
 80108c4:	e7f4      	b.n	80108b0 <__kernel_rem_pio2f+0x474>
 80108c6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80108ca:	f7f0 f933 	bl	8000b34 <__addsf3>
 80108ce:	3f01      	subs	r7, #1
 80108d0:	2f00      	cmp	r7, #0
 80108d2:	daf8      	bge.n	80108c6 <__kernel_rem_pio2f+0x48a>
 80108d4:	b1bd      	cbz	r5, 8010906 <__kernel_rem_pio2f+0x4ca>
 80108d6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80108da:	9a00      	ldr	r2, [sp, #0]
 80108dc:	4601      	mov	r1, r0
 80108de:	6013      	str	r3, [r2, #0]
 80108e0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80108e2:	f7f0 f925 	bl	8000b30 <__aeabi_fsub>
 80108e6:	2701      	movs	r7, #1
 80108e8:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80108ec:	42bc      	cmp	r4, r7
 80108ee:	da0c      	bge.n	801090a <__kernel_rem_pio2f+0x4ce>
 80108f0:	b10d      	cbz	r5, 80108f6 <__kernel_rem_pio2f+0x4ba>
 80108f2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80108f6:	9b00      	ldr	r3, [sp, #0]
 80108f8:	6058      	str	r0, [r3, #4]
 80108fa:	e7b2      	b.n	8010862 <__kernel_rem_pio2f+0x426>
 80108fc:	4627      	mov	r7, r4
 80108fe:	2000      	movs	r0, #0
 8010900:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8010904:	e7e4      	b.n	80108d0 <__kernel_rem_pio2f+0x494>
 8010906:	4603      	mov	r3, r0
 8010908:	e7e7      	b.n	80108da <__kernel_rem_pio2f+0x49e>
 801090a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 801090e:	f7f0 f911 	bl	8000b34 <__addsf3>
 8010912:	3701      	adds	r7, #1
 8010914:	e7ea      	b.n	80108ec <__kernel_rem_pio2f+0x4b0>
 8010916:	f8d8 3000 	ldr.w	r3, [r8]
 801091a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801091e:	4619      	mov	r1, r3
 8010920:	4610      	mov	r0, r2
 8010922:	9302      	str	r3, [sp, #8]
 8010924:	9201      	str	r2, [sp, #4]
 8010926:	f7f0 f905 	bl	8000b34 <__addsf3>
 801092a:	9a01      	ldr	r2, [sp, #4]
 801092c:	4601      	mov	r1, r0
 801092e:	4681      	mov	r9, r0
 8010930:	4610      	mov	r0, r2
 8010932:	f7f0 f8fd 	bl	8000b30 <__aeabi_fsub>
 8010936:	9b02      	ldr	r3, [sp, #8]
 8010938:	f10a 3aff 	add.w	sl, sl, #4294967295
 801093c:	4619      	mov	r1, r3
 801093e:	f7f0 f8f9 	bl	8000b34 <__addsf3>
 8010942:	f848 0904 	str.w	r0, [r8], #-4
 8010946:	f8c8 9000 	str.w	r9, [r8]
 801094a:	e798      	b.n	801087e <__kernel_rem_pio2f+0x442>
 801094c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8010950:	f8d7 a000 	ldr.w	sl, [r7]
 8010954:	4618      	mov	r0, r3
 8010956:	4651      	mov	r1, sl
 8010958:	9301      	str	r3, [sp, #4]
 801095a:	f7f0 f8eb 	bl	8000b34 <__addsf3>
 801095e:	9b01      	ldr	r3, [sp, #4]
 8010960:	4601      	mov	r1, r0
 8010962:	4680      	mov	r8, r0
 8010964:	4618      	mov	r0, r3
 8010966:	f7f0 f8e3 	bl	8000b30 <__aeabi_fsub>
 801096a:	4651      	mov	r1, sl
 801096c:	f7f0 f8e2 	bl	8000b34 <__addsf3>
 8010970:	f847 0904 	str.w	r0, [r7], #-4
 8010974:	f109 39ff 	add.w	r9, r9, #4294967295
 8010978:	f8c7 8000 	str.w	r8, [r7]
 801097c:	e783      	b.n	8010886 <__kernel_rem_pio2f+0x44a>
 801097e:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8010982:	f7f0 f8d7 	bl	8000b34 <__addsf3>
 8010986:	3c01      	subs	r4, #1
 8010988:	e781      	b.n	801088e <__kernel_rem_pio2f+0x452>
 801098a:	9900      	ldr	r1, [sp, #0]
 801098c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8010990:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010994:	600a      	str	r2, [r1, #0]
 8010996:	604b      	str	r3, [r1, #4]
 8010998:	460a      	mov	r2, r1
 801099a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801099e:	e780      	b.n	80108a2 <__kernel_rem_pio2f+0x466>

080109a0 <__kernel_sinf>:
 80109a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109a4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80109a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80109ac:	4604      	mov	r4, r0
 80109ae:	460f      	mov	r7, r1
 80109b0:	4691      	mov	r9, r2
 80109b2:	da03      	bge.n	80109bc <__kernel_sinf+0x1c>
 80109b4:	f7f0 fba2 	bl	80010fc <__aeabi_f2iz>
 80109b8:	2800      	cmp	r0, #0
 80109ba:	d035      	beq.n	8010a28 <__kernel_sinf+0x88>
 80109bc:	4621      	mov	r1, r4
 80109be:	4620      	mov	r0, r4
 80109c0:	f7f0 f9c0 	bl	8000d44 <__aeabi_fmul>
 80109c4:	4605      	mov	r5, r0
 80109c6:	4601      	mov	r1, r0
 80109c8:	4620      	mov	r0, r4
 80109ca:	f7f0 f9bb 	bl	8000d44 <__aeabi_fmul>
 80109ce:	4929      	ldr	r1, [pc, #164]	; (8010a74 <__kernel_sinf+0xd4>)
 80109d0:	4606      	mov	r6, r0
 80109d2:	4628      	mov	r0, r5
 80109d4:	f7f0 f9b6 	bl	8000d44 <__aeabi_fmul>
 80109d8:	4927      	ldr	r1, [pc, #156]	; (8010a78 <__kernel_sinf+0xd8>)
 80109da:	f7f0 f8a9 	bl	8000b30 <__aeabi_fsub>
 80109de:	4629      	mov	r1, r5
 80109e0:	f7f0 f9b0 	bl	8000d44 <__aeabi_fmul>
 80109e4:	4925      	ldr	r1, [pc, #148]	; (8010a7c <__kernel_sinf+0xdc>)
 80109e6:	f7f0 f8a5 	bl	8000b34 <__addsf3>
 80109ea:	4629      	mov	r1, r5
 80109ec:	f7f0 f9aa 	bl	8000d44 <__aeabi_fmul>
 80109f0:	4923      	ldr	r1, [pc, #140]	; (8010a80 <__kernel_sinf+0xe0>)
 80109f2:	f7f0 f89d 	bl	8000b30 <__aeabi_fsub>
 80109f6:	4629      	mov	r1, r5
 80109f8:	f7f0 f9a4 	bl	8000d44 <__aeabi_fmul>
 80109fc:	4921      	ldr	r1, [pc, #132]	; (8010a84 <__kernel_sinf+0xe4>)
 80109fe:	f7f0 f899 	bl	8000b34 <__addsf3>
 8010a02:	4680      	mov	r8, r0
 8010a04:	f1b9 0f00 	cmp.w	r9, #0
 8010a08:	d111      	bne.n	8010a2e <__kernel_sinf+0x8e>
 8010a0a:	4601      	mov	r1, r0
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	f7f0 f999 	bl	8000d44 <__aeabi_fmul>
 8010a12:	491d      	ldr	r1, [pc, #116]	; (8010a88 <__kernel_sinf+0xe8>)
 8010a14:	f7f0 f88c 	bl	8000b30 <__aeabi_fsub>
 8010a18:	4631      	mov	r1, r6
 8010a1a:	f7f0 f993 	bl	8000d44 <__aeabi_fmul>
 8010a1e:	4601      	mov	r1, r0
 8010a20:	4620      	mov	r0, r4
 8010a22:	f7f0 f887 	bl	8000b34 <__addsf3>
 8010a26:	4604      	mov	r4, r0
 8010a28:	4620      	mov	r0, r4
 8010a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a2e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010a32:	4638      	mov	r0, r7
 8010a34:	f7f0 f986 	bl	8000d44 <__aeabi_fmul>
 8010a38:	4641      	mov	r1, r8
 8010a3a:	4681      	mov	r9, r0
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f7f0 f981 	bl	8000d44 <__aeabi_fmul>
 8010a42:	4601      	mov	r1, r0
 8010a44:	4648      	mov	r0, r9
 8010a46:	f7f0 f873 	bl	8000b30 <__aeabi_fsub>
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	f7f0 f97a 	bl	8000d44 <__aeabi_fmul>
 8010a50:	4639      	mov	r1, r7
 8010a52:	f7f0 f86d 	bl	8000b30 <__aeabi_fsub>
 8010a56:	490c      	ldr	r1, [pc, #48]	; (8010a88 <__kernel_sinf+0xe8>)
 8010a58:	4605      	mov	r5, r0
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f7f0 f972 	bl	8000d44 <__aeabi_fmul>
 8010a60:	4601      	mov	r1, r0
 8010a62:	4628      	mov	r0, r5
 8010a64:	f7f0 f866 	bl	8000b34 <__addsf3>
 8010a68:	4601      	mov	r1, r0
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f7f0 f860 	bl	8000b30 <__aeabi_fsub>
 8010a70:	e7d9      	b.n	8010a26 <__kernel_sinf+0x86>
 8010a72:	bf00      	nop
 8010a74:	2f2ec9d3 	.word	0x2f2ec9d3
 8010a78:	32d72f34 	.word	0x32d72f34
 8010a7c:	3638ef1b 	.word	0x3638ef1b
 8010a80:	39500d01 	.word	0x39500d01
 8010a84:	3c088889 	.word	0x3c088889
 8010a88:	3e2aaaab 	.word	0x3e2aaaab

08010a8c <__kernel_tanf>:
 8010a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a90:	f020 4a00 	bic.w	sl, r0, #2147483648	; 0x80000000
 8010a94:	f1ba 5f46 	cmp.w	sl, #830472192	; 0x31800000
 8010a98:	4604      	mov	r4, r0
 8010a9a:	460e      	mov	r6, r1
 8010a9c:	4690      	mov	r8, r2
 8010a9e:	4607      	mov	r7, r0
 8010aa0:	da1b      	bge.n	8010ada <__kernel_tanf+0x4e>
 8010aa2:	f7f0 fb2b 	bl	80010fc <__aeabi_f2iz>
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	d12f      	bne.n	8010b0a <__kernel_tanf+0x7e>
 8010aaa:	f108 0301 	add.w	r3, r8, #1
 8010aae:	ea53 030a 	orrs.w	r3, r3, sl
 8010ab2:	d10c      	bne.n	8010ace <__kernel_tanf+0x42>
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f000 f917 	bl	8010ce8 <fabsf>
 8010aba:	4601      	mov	r1, r0
 8010abc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010ac0:	f7f0 f9f4 	bl	8000eac <__aeabi_fdiv>
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	b003      	add	sp, #12
 8010aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ace:	f1b8 0f01 	cmp.w	r8, #1
 8010ad2:	d0f8      	beq.n	8010ac6 <__kernel_tanf+0x3a>
 8010ad4:	4621      	mov	r1, r4
 8010ad6:	4872      	ldr	r0, [pc, #456]	; (8010ca0 <__kernel_tanf+0x214>)
 8010ad8:	e7f2      	b.n	8010ac0 <__kernel_tanf+0x34>
 8010ada:	4b72      	ldr	r3, [pc, #456]	; (8010ca4 <__kernel_tanf+0x218>)
 8010adc:	459a      	cmp	sl, r3
 8010ade:	db14      	blt.n	8010b0a <__kernel_tanf+0x7e>
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	bfbe      	ittt	lt
 8010ae4:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 8010ae8:	4604      	movlt	r4, r0
 8010aea:	f101 4600 	addlt.w	r6, r1, #2147483648	; 0x80000000
 8010aee:	486e      	ldr	r0, [pc, #440]	; (8010ca8 <__kernel_tanf+0x21c>)
 8010af0:	4621      	mov	r1, r4
 8010af2:	f7f0 f81d 	bl	8000b30 <__aeabi_fsub>
 8010af6:	4604      	mov	r4, r0
 8010af8:	4631      	mov	r1, r6
 8010afa:	486c      	ldr	r0, [pc, #432]	; (8010cac <__kernel_tanf+0x220>)
 8010afc:	f7f0 f818 	bl	8000b30 <__aeabi_fsub>
 8010b00:	4621      	mov	r1, r4
 8010b02:	f7f0 f817 	bl	8000b34 <__addsf3>
 8010b06:	2600      	movs	r6, #0
 8010b08:	4604      	mov	r4, r0
 8010b0a:	4621      	mov	r1, r4
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f7f0 f919 	bl	8000d44 <__aeabi_fmul>
 8010b12:	4601      	mov	r1, r0
 8010b14:	4681      	mov	r9, r0
 8010b16:	f7f0 f915 	bl	8000d44 <__aeabi_fmul>
 8010b1a:	4649      	mov	r1, r9
 8010b1c:	4605      	mov	r5, r0
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f7f0 f910 	bl	8000d44 <__aeabi_fmul>
 8010b24:	4962      	ldr	r1, [pc, #392]	; (8010cb0 <__kernel_tanf+0x224>)
 8010b26:	4683      	mov	fp, r0
 8010b28:	4628      	mov	r0, r5
 8010b2a:	f7f0 f90b 	bl	8000d44 <__aeabi_fmul>
 8010b2e:	4961      	ldr	r1, [pc, #388]	; (8010cb4 <__kernel_tanf+0x228>)
 8010b30:	f7f0 f800 	bl	8000b34 <__addsf3>
 8010b34:	4629      	mov	r1, r5
 8010b36:	f7f0 f905 	bl	8000d44 <__aeabi_fmul>
 8010b3a:	495f      	ldr	r1, [pc, #380]	; (8010cb8 <__kernel_tanf+0x22c>)
 8010b3c:	f7ef fffa 	bl	8000b34 <__addsf3>
 8010b40:	4629      	mov	r1, r5
 8010b42:	f7f0 f8ff 	bl	8000d44 <__aeabi_fmul>
 8010b46:	495d      	ldr	r1, [pc, #372]	; (8010cbc <__kernel_tanf+0x230>)
 8010b48:	f7ef fff4 	bl	8000b34 <__addsf3>
 8010b4c:	4629      	mov	r1, r5
 8010b4e:	f7f0 f8f9 	bl	8000d44 <__aeabi_fmul>
 8010b52:	495b      	ldr	r1, [pc, #364]	; (8010cc0 <__kernel_tanf+0x234>)
 8010b54:	f7ef ffee 	bl	8000b34 <__addsf3>
 8010b58:	4629      	mov	r1, r5
 8010b5a:	f7f0 f8f3 	bl	8000d44 <__aeabi_fmul>
 8010b5e:	4959      	ldr	r1, [pc, #356]	; (8010cc4 <__kernel_tanf+0x238>)
 8010b60:	f7ef ffe8 	bl	8000b34 <__addsf3>
 8010b64:	4649      	mov	r1, r9
 8010b66:	f7f0 f8ed 	bl	8000d44 <__aeabi_fmul>
 8010b6a:	4957      	ldr	r1, [pc, #348]	; (8010cc8 <__kernel_tanf+0x23c>)
 8010b6c:	9001      	str	r0, [sp, #4]
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f7f0 f8e8 	bl	8000d44 <__aeabi_fmul>
 8010b74:	4955      	ldr	r1, [pc, #340]	; (8010ccc <__kernel_tanf+0x240>)
 8010b76:	f7ef ffdd 	bl	8000b34 <__addsf3>
 8010b7a:	4629      	mov	r1, r5
 8010b7c:	f7f0 f8e2 	bl	8000d44 <__aeabi_fmul>
 8010b80:	4953      	ldr	r1, [pc, #332]	; (8010cd0 <__kernel_tanf+0x244>)
 8010b82:	f7ef ffd7 	bl	8000b34 <__addsf3>
 8010b86:	4629      	mov	r1, r5
 8010b88:	f7f0 f8dc 	bl	8000d44 <__aeabi_fmul>
 8010b8c:	4951      	ldr	r1, [pc, #324]	; (8010cd4 <__kernel_tanf+0x248>)
 8010b8e:	f7ef ffd1 	bl	8000b34 <__addsf3>
 8010b92:	4629      	mov	r1, r5
 8010b94:	f7f0 f8d6 	bl	8000d44 <__aeabi_fmul>
 8010b98:	494f      	ldr	r1, [pc, #316]	; (8010cd8 <__kernel_tanf+0x24c>)
 8010b9a:	f7ef ffcb 	bl	8000b34 <__addsf3>
 8010b9e:	4629      	mov	r1, r5
 8010ba0:	f7f0 f8d0 	bl	8000d44 <__aeabi_fmul>
 8010ba4:	494d      	ldr	r1, [pc, #308]	; (8010cdc <__kernel_tanf+0x250>)
 8010ba6:	f7ef ffc5 	bl	8000b34 <__addsf3>
 8010baa:	9b01      	ldr	r3, [sp, #4]
 8010bac:	4601      	mov	r1, r0
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7ef ffc0 	bl	8000b34 <__addsf3>
 8010bb4:	4659      	mov	r1, fp
 8010bb6:	f7f0 f8c5 	bl	8000d44 <__aeabi_fmul>
 8010bba:	4631      	mov	r1, r6
 8010bbc:	f7ef ffba 	bl	8000b34 <__addsf3>
 8010bc0:	4649      	mov	r1, r9
 8010bc2:	f7f0 f8bf 	bl	8000d44 <__aeabi_fmul>
 8010bc6:	4631      	mov	r1, r6
 8010bc8:	f7ef ffb4 	bl	8000b34 <__addsf3>
 8010bcc:	4605      	mov	r5, r0
 8010bce:	4944      	ldr	r1, [pc, #272]	; (8010ce0 <__kernel_tanf+0x254>)
 8010bd0:	4658      	mov	r0, fp
 8010bd2:	f7f0 f8b7 	bl	8000d44 <__aeabi_fmul>
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	f7ef ffac 	bl	8000b34 <__addsf3>
 8010bdc:	4601      	mov	r1, r0
 8010bde:	4681      	mov	r9, r0
 8010be0:	4620      	mov	r0, r4
 8010be2:	f7ef ffa7 	bl	8000b34 <__addsf3>
 8010be6:	4b2f      	ldr	r3, [pc, #188]	; (8010ca4 <__kernel_tanf+0x218>)
 8010be8:	4605      	mov	r5, r0
 8010bea:	459a      	cmp	sl, r3
 8010bec:	db2b      	blt.n	8010c46 <__kernel_tanf+0x1ba>
 8010bee:	4640      	mov	r0, r8
 8010bf0:	f7f0 f854 	bl	8000c9c <__aeabi_i2f>
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	f7f0 f8a3 	bl	8000d44 <__aeabi_fmul>
 8010bfe:	4631      	mov	r1, r6
 8010c00:	4680      	mov	r8, r0
 8010c02:	4628      	mov	r0, r5
 8010c04:	f7ef ff96 	bl	8000b34 <__addsf3>
 8010c08:	4601      	mov	r1, r0
 8010c0a:	4640      	mov	r0, r8
 8010c0c:	f7f0 f94e 	bl	8000eac <__aeabi_fdiv>
 8010c10:	4649      	mov	r1, r9
 8010c12:	f7ef ff8d 	bl	8000b30 <__aeabi_fsub>
 8010c16:	4601      	mov	r1, r0
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f7ef ff89 	bl	8000b30 <__aeabi_fsub>
 8010c1e:	4601      	mov	r1, r0
 8010c20:	f7ef ff88 	bl	8000b34 <__addsf3>
 8010c24:	4601      	mov	r1, r0
 8010c26:	4630      	mov	r0, r6
 8010c28:	f7ef ff82 	bl	8000b30 <__aeabi_fsub>
 8010c2c:	17bf      	asrs	r7, r7, #30
 8010c2e:	f007 0702 	and.w	r7, r7, #2
 8010c32:	4604      	mov	r4, r0
 8010c34:	f1c7 0001 	rsb	r0, r7, #1
 8010c38:	f7f0 f830 	bl	8000c9c <__aeabi_i2f>
 8010c3c:	4601      	mov	r1, r0
 8010c3e:	4620      	mov	r0, r4
 8010c40:	f7f0 f880 	bl	8000d44 <__aeabi_fmul>
 8010c44:	e73e      	b.n	8010ac4 <__kernel_tanf+0x38>
 8010c46:	f1b8 0f01 	cmp.w	r8, #1
 8010c4a:	d027      	beq.n	8010c9c <__kernel_tanf+0x210>
 8010c4c:	4e25      	ldr	r6, [pc, #148]	; (8010ce4 <__kernel_tanf+0x258>)
 8010c4e:	4601      	mov	r1, r0
 8010c50:	ea06 0800 	and.w	r8, r6, r0
 8010c54:	4812      	ldr	r0, [pc, #72]	; (8010ca0 <__kernel_tanf+0x214>)
 8010c56:	f7f0 f929 	bl	8000eac <__aeabi_fdiv>
 8010c5a:	4621      	mov	r1, r4
 8010c5c:	4006      	ands	r6, r0
 8010c5e:	4607      	mov	r7, r0
 8010c60:	4640      	mov	r0, r8
 8010c62:	f7ef ff65 	bl	8000b30 <__aeabi_fsub>
 8010c66:	4601      	mov	r1, r0
 8010c68:	4648      	mov	r0, r9
 8010c6a:	f7ef ff61 	bl	8000b30 <__aeabi_fsub>
 8010c6e:	4631      	mov	r1, r6
 8010c70:	f7f0 f868 	bl	8000d44 <__aeabi_fmul>
 8010c74:	4631      	mov	r1, r6
 8010c76:	4604      	mov	r4, r0
 8010c78:	4640      	mov	r0, r8
 8010c7a:	f7f0 f863 	bl	8000d44 <__aeabi_fmul>
 8010c7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010c82:	f7ef ff57 	bl	8000b34 <__addsf3>
 8010c86:	4601      	mov	r1, r0
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f7ef ff53 	bl	8000b34 <__addsf3>
 8010c8e:	4639      	mov	r1, r7
 8010c90:	f7f0 f858 	bl	8000d44 <__aeabi_fmul>
 8010c94:	4631      	mov	r1, r6
 8010c96:	f7ef ff4d 	bl	8000b34 <__addsf3>
 8010c9a:	e713      	b.n	8010ac4 <__kernel_tanf+0x38>
 8010c9c:	4604      	mov	r4, r0
 8010c9e:	e712      	b.n	8010ac6 <__kernel_tanf+0x3a>
 8010ca0:	bf800000 	.word	0xbf800000
 8010ca4:	3f2ca140 	.word	0x3f2ca140
 8010ca8:	3f490fda 	.word	0x3f490fda
 8010cac:	33222168 	.word	0x33222168
 8010cb0:	37d95384 	.word	0x37d95384
 8010cb4:	3895c07a 	.word	0x3895c07a
 8010cb8:	398137b9 	.word	0x398137b9
 8010cbc:	3abede48 	.word	0x3abede48
 8010cc0:	3c11371f 	.word	0x3c11371f
 8010cc4:	3d5d0dd1 	.word	0x3d5d0dd1
 8010cc8:	b79bae5f 	.word	0xb79bae5f
 8010ccc:	38a3f445 	.word	0x38a3f445
 8010cd0:	3a1a26c8 	.word	0x3a1a26c8
 8010cd4:	3b6b6916 	.word	0x3b6b6916
 8010cd8:	3cb327a4 	.word	0x3cb327a4
 8010cdc:	3e088889 	.word	0x3e088889
 8010ce0:	3eaaaaab 	.word	0x3eaaaaab
 8010ce4:	fffff000 	.word	0xfffff000

08010ce8 <fabsf>:
 8010ce8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010cec:	4770      	bx	lr
	...

08010cf0 <floorf>:
 8010cf0:	b570      	push	{r4, r5, r6, lr}
 8010cf2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8010cf6:	3d7f      	subs	r5, #127	; 0x7f
 8010cf8:	2d16      	cmp	r5, #22
 8010cfa:	4601      	mov	r1, r0
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8010d02:	dc26      	bgt.n	8010d52 <floorf+0x62>
 8010d04:	2d00      	cmp	r5, #0
 8010d06:	da0e      	bge.n	8010d26 <floorf+0x36>
 8010d08:	4917      	ldr	r1, [pc, #92]	; (8010d68 <floorf+0x78>)
 8010d0a:	f7ef ff13 	bl	8000b34 <__addsf3>
 8010d0e:	2100      	movs	r1, #0
 8010d10:	f7f0 f9d4 	bl	80010bc <__aeabi_fcmpgt>
 8010d14:	b128      	cbz	r0, 8010d22 <floorf+0x32>
 8010d16:	2c00      	cmp	r4, #0
 8010d18:	da23      	bge.n	8010d62 <floorf+0x72>
 8010d1a:	4b14      	ldr	r3, [pc, #80]	; (8010d6c <floorf+0x7c>)
 8010d1c:	2e00      	cmp	r6, #0
 8010d1e:	bf18      	it	ne
 8010d20:	461c      	movne	r4, r3
 8010d22:	4621      	mov	r1, r4
 8010d24:	e01b      	b.n	8010d5e <floorf+0x6e>
 8010d26:	4e12      	ldr	r6, [pc, #72]	; (8010d70 <floorf+0x80>)
 8010d28:	412e      	asrs	r6, r5
 8010d2a:	4230      	tst	r0, r6
 8010d2c:	d017      	beq.n	8010d5e <floorf+0x6e>
 8010d2e:	490e      	ldr	r1, [pc, #56]	; (8010d68 <floorf+0x78>)
 8010d30:	f7ef ff00 	bl	8000b34 <__addsf3>
 8010d34:	2100      	movs	r1, #0
 8010d36:	f7f0 f9c1 	bl	80010bc <__aeabi_fcmpgt>
 8010d3a:	2800      	cmp	r0, #0
 8010d3c:	d0f1      	beq.n	8010d22 <floorf+0x32>
 8010d3e:	2c00      	cmp	r4, #0
 8010d40:	bfbe      	ittt	lt
 8010d42:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8010d46:	fa43 f505 	asrlt.w	r5, r3, r5
 8010d4a:	1964      	addlt	r4, r4, r5
 8010d4c:	ea24 0406 	bic.w	r4, r4, r6
 8010d50:	e7e7      	b.n	8010d22 <floorf+0x32>
 8010d52:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8010d56:	d302      	bcc.n	8010d5e <floorf+0x6e>
 8010d58:	f7ef feec 	bl	8000b34 <__addsf3>
 8010d5c:	4601      	mov	r1, r0
 8010d5e:	4608      	mov	r0, r1
 8010d60:	bd70      	pop	{r4, r5, r6, pc}
 8010d62:	2400      	movs	r4, #0
 8010d64:	e7dd      	b.n	8010d22 <floorf+0x32>
 8010d66:	bf00      	nop
 8010d68:	7149f2ca 	.word	0x7149f2ca
 8010d6c:	bf800000 	.word	0xbf800000
 8010d70:	007fffff 	.word	0x007fffff

08010d74 <scalbnf>:
 8010d74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8010d78:	b538      	push	{r3, r4, r5, lr}
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	460d      	mov	r5, r1
 8010d7e:	4604      	mov	r4, r0
 8010d80:	d02a      	beq.n	8010dd8 <scalbnf+0x64>
 8010d82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010d86:	d304      	bcc.n	8010d92 <scalbnf+0x1e>
 8010d88:	4601      	mov	r1, r0
 8010d8a:	f7ef fed3 	bl	8000b34 <__addsf3>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	e022      	b.n	8010dd8 <scalbnf+0x64>
 8010d92:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8010d96:	d117      	bne.n	8010dc8 <scalbnf+0x54>
 8010d98:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8010d9c:	f7ef ffd2 	bl	8000d44 <__aeabi_fmul>
 8010da0:	4a17      	ldr	r2, [pc, #92]	; (8010e00 <scalbnf+0x8c>)
 8010da2:	4603      	mov	r3, r0
 8010da4:	4295      	cmp	r5, r2
 8010da6:	db0b      	blt.n	8010dc0 <scalbnf+0x4c>
 8010da8:	4604      	mov	r4, r0
 8010daa:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8010dae:	3a19      	subs	r2, #25
 8010db0:	442a      	add	r2, r5
 8010db2:	2afe      	cmp	r2, #254	; 0xfe
 8010db4:	dd0a      	ble.n	8010dcc <scalbnf+0x58>
 8010db6:	4913      	ldr	r1, [pc, #76]	; (8010e04 <scalbnf+0x90>)
 8010db8:	4618      	mov	r0, r3
 8010dba:	f361 001e 	bfi	r0, r1, #0, #31
 8010dbe:	e000      	b.n	8010dc2 <scalbnf+0x4e>
 8010dc0:	4911      	ldr	r1, [pc, #68]	; (8010e08 <scalbnf+0x94>)
 8010dc2:	f7ef ffbf 	bl	8000d44 <__aeabi_fmul>
 8010dc6:	e7e2      	b.n	8010d8e <scalbnf+0x1a>
 8010dc8:	0dd2      	lsrs	r2, r2, #23
 8010dca:	e7f1      	b.n	8010db0 <scalbnf+0x3c>
 8010dcc:	2a00      	cmp	r2, #0
 8010dce:	dd05      	ble.n	8010ddc <scalbnf+0x68>
 8010dd0:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8010dd4:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8010dd8:	4618      	mov	r0, r3
 8010dda:	bd38      	pop	{r3, r4, r5, pc}
 8010ddc:	f112 0f16 	cmn.w	r2, #22
 8010de0:	da05      	bge.n	8010dee <scalbnf+0x7a>
 8010de2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010de6:	4295      	cmp	r5, r2
 8010de8:	dce5      	bgt.n	8010db6 <scalbnf+0x42>
 8010dea:	4907      	ldr	r1, [pc, #28]	; (8010e08 <scalbnf+0x94>)
 8010dec:	e7e4      	b.n	8010db8 <scalbnf+0x44>
 8010dee:	3219      	adds	r2, #25
 8010df0:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8010df4:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8010df8:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8010dfc:	e7e1      	b.n	8010dc2 <scalbnf+0x4e>
 8010dfe:	bf00      	nop
 8010e00:	ffff3cb0 	.word	0xffff3cb0
 8010e04:	7149f2ca 	.word	0x7149f2ca
 8010e08:	0da24260 	.word	0x0da24260

08010e0c <_init>:
 8010e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e0e:	bf00      	nop
 8010e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e12:	bc08      	pop	{r3}
 8010e14:	469e      	mov	lr, r3
 8010e16:	4770      	bx	lr

08010e18 <_fini>:
 8010e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e1a:	bf00      	nop
 8010e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e1e:	bc08      	pop	{r3}
 8010e20:	469e      	mov	lr, r3
 8010e22:	4770      	bx	lr
