/*
 * bee.c
 *
 *  Created on: 14 нояб. 2022 г.
 *      Author: wooffie
 */
#include "bee.h"
#include "crc.h"
#include "usart.h"
#include "stm32f1xx_hal.h"

uint16_t getCRC(uint8_t *Buffer, uint16_t BufferSize);

volatile uint8_t bee_response[bee_size];

UART_HandleTypeDef bee_uart;

// Define UART
void BEE_init(UART_HandleTypeDef huart) {
	bee_uart = huart;
}

// Clear buffer of messages from bee
void BEE_clear_response() {
	for (int i = 0; i < bee_size; i++) {
		bee_response[i] = 0x00;
	}
	return;
}

// TX and RX to swarm
void BEE_tx_and_rx(uint8_t *data, uint16_t size) {
	BEE_clear_response();
	HAL_UART_Transmit(&bee_uart, (uint8_t*) data, size, 50);
	HAL_UART_Receive(&bee_uart, (uint8_t*) bee_response, 32, 50);
	return;
}

// Set bee in binary mode
void BEE_set_binary() {
	BEE_tx_and_rx((uint8_t*) "SBIN\r\n", (uint16_t) 6);
	return;
}

// Set blink rate in Ms
void BEE_set_blinkrate(uint16_t blinkrate) {
	uint8_t sbiv[] = { 0x7f, 0x04, 0x55, 0x31, 0x00, 0x00, 0x00, 0x00 };
	uint16_t size = 8;
	sbiv[size - 4] = (blinkrate >> 8) & 0xFF;
	sbiv[size - 3] = (blinkrate) & 0xFF;
	uint16_t crc = getCRC((uint8_t*) sbiv, size);
	sbiv[size - 2] = (crc) & 0xFF;
	sbiv[size - 1] = (crc >> 8) & 0xFF;
	BEE_tx_and_rx((uint8_t*) sbiv, size);
}

// TODO()
void bee_send_payload();

// TODO()
void validate();

// Send 3 bytes from bee. TODO() make send pay load
void BEE_send(uint8_t pulse, uint8_t o2, uint8_t temp) {
	uint8_t fnin[32] = { 0x7F, 0x06, 0x55, 0x28, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00 };
	uint16_t fnin_length = 10;
	fnin[fnin_length - 5] = pulse;
	fnin[fnin_length - 4] = temp;
	fnin[fnin_length - 3] = o2;
	uint16_t crc = getCRC((uint8_t*) fnin, fnin_length);
	fnin[fnin_length - 2] = (crc) & 0xFF;
	fnin[fnin_length - 1] = (crc >> 8) & 0xFF;

	uint16_t i = 1;

	while (i != fnin_length) {
		if (fnin[i] == 0x1B) {
			for (uint16_t j = fnin_length - 1; j > i; j--) {
				fnin[j + 1] = fnin[j];
			}
			fnin[i + 1] = 0x45;
			fnin_length++;
		}
		if (fnin[i] == 0x7F) {
			for (uint16_t j = fnin_length - 1; j > i; j--) {
				fnin[j + 1] = fnin[j];
			}
			fnin[i] = 0x1B;
			fnin[i + 1] = 0x53;
			fnin_length++;
		}

		i++;
	}

	BEE_tx_and_rx((uint8_t*) fnin, fnin_length);
}

// Calculate CRC16-ANSI for flow control
uint16_t getCRC(uint8_t *Buffer, uint16_t BufferSize) {
	uint8_t z[BufferSize];
	uint16_t crc;
	for (uint8_t i = 0; i < BufferSize; i++)
		z[i] = *Buffer++;
	crc = Crc16(z, BufferSize - 2);
	return crc;
}

