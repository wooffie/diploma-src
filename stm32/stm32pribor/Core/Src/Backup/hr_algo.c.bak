/*
 * hr_algo.c
 *
 *  Created on: 17 мар. 2023 г.
 *      Author: wooffie
 */

#include <math.h>
#include <malloc.h>
#include <string.h>
#include <stdlib.h>

float stddev(float arrary[], int size);
float mean(float array[], int size);

float a, a2, b, b2, r, n;
float *A, *d1, *d2, *d3, *d4, *w0, *w1, *w2, *w3, *w4;

int bpf_init(int order, float freq, float low, float up) {

	n = order;
	a = cosf(M_PI * (up + low) / freq) / cosf(M_PI * (up - low) / freq);
	a2 = a * a;
	b = tanf(M_PI * (up - low) / freq);
	b2 = b * b;

	n = n / 4;
	A = (float*) malloc(n * sizeof(float));
	d1 = (float*) malloc(n * sizeof(float));
	d2 = (float*) malloc(n * sizeof(float));
	d3 = (float*) malloc(n * sizeof(float));
	d4 = (float*) malloc(n * sizeof(float));

	w0 = (float*) calloc(n, sizeof(float));
	w1 = (float*) calloc(n, sizeof(float));
	w2 = (float*) calloc(n, sizeof(float));
	w3 = (float*) calloc(n, sizeof(float));
	w4 = (float*) calloc(n, sizeof(float));

	float r;

	for (int i = 0; i < n; ++i) {
		r = sinf(M_PI * (2.0 * i + 1.0) / (4.0 * n));
		freq = b2 + 2.0 * b * r + 1.0;
		A[i] = b2 / freq;
		d1[i] = 4.0 * a * (1.0 + b * r) / freq;
		d2[i] = 2.0 * (b2 - 2.0 * a2 - 1.0) / freq;
		d3[i] = 4.0 * a * (1.0 - b * r) / freq;
		d4[i] = -(b2 - 2.0 * b * r + 1.0) / freq;
	}

	return 1;
}

void bpf_deinit() {
	free(A);
	free(d1);
	free(d2);
	free(d3);
	free(d4);
	free(w0);
	free(w1);
	free(w2);
	free(w3);
	free(w4);
}

float bpf_next(float value) {
	float x = value;
	for (int j = 0; j < n; ++j) {
		w0[j] = d1[j] * w1[j] + d2[j] * w2[j] + d3[j] * w3[j] + d4[j] * w4[j]
				+ x;
		x = A[j] * (w0[j] - 2.0 * w2[j] + w4[j]);
		w4[j] = w3[j];
		w3[j] = w2[j];
		w2[j] = w1[j];
		w1[j] = w0[j];
	}
	return x;
}

void zscore(float array[], int array_size, int signals[], int lag,
		float threshold) {

	float avgFilter = mean(array, lag);
	float stdFilter = stddev(array, lag);

	for (int i = lag; i < array_size; i++) {
		if (fabsf(array[i] - avgFilter) > threshold * stdFilter) {
			if (array[i] > avgFilter) {
				signals[i] = 1;
			} else {
				signals[i] = -1;
			}

		} else {
			signals[i] = 0;
		}
		avgFilter = mean(array + i - lag, lag);
		stdFilter = stddev(array + i - lag, lag);
	}
}

float mean(float array[], int size) {
	float sum = 0.0;

	for (int i = 0; i < size; i++) {
		sum += array[i];
	}

	return sum / size;
}

float stddev(float array[], int size) {
	float mean_ = mean(array, size);
	float stddev_ = 0.0;

	for (int i = 0; i < size; i++) {
		stddev_ += pow(array[i] - mean_, 2);
	}

	return sqrt(stddev_);
}
